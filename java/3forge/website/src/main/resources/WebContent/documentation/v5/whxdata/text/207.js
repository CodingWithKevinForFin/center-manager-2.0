rh._.exports({"0":[["Data Storage (Advanced)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n","Data sizes Overview."," Each parameter added to an object  and \n application status message has a ","3 byte overhead",", plus additional \n bytes, depending on the data type. Please see the table below.","\n"," ","\n","\n\t","\n\t\t","Type","\n\t\t","Min value","\n\t\t","Max value","\n\t\t","Size (bytes)*","\n\t","\n\t","\n\t\t","Integer","\n\t\t","-128","\n\t\t","127","\n\t\t","3 \n\t\t + 1","\n\t","\n\t","\n\t\t","Integer","\n\t\t","-32,768","\n\t\t","32,767","\n\t\t","3 \n\t\t + 2","\n\t","\n\t","\n\t\t","Integer","\n\t\t","-8,388,608","\n\t\t","8,388,607","\n\t\t","3 \n\t\t + 3","\n\t","\n\t","\n\t\t","Integer","\n\t\t","-2,147,483,648","\n\t\t","2,147,483,647","\n\t\t","3 \n\t\t + 4","\n\t","\n\t","\n\t\t","Long","\n\t\t","-128","\n\t\t","127","\n\t\t","3 \n\t\t + 1","\n\t","\n\t","\n\t\t","Long","\n\t\t","-32,768","\n\t\t","32,767","\n\t\t","3 \n\t\t + 2","\n\t","\n\t","\n\t\t","Long","\n\t\t","-8,388,608","\n\t\t","8,388,607","\n\t\t","3 \n\t\t + 3","\n\t","\n\t","\n\t\t","Long","\n\t\t","-2,147,483,648","\n\t\t","2,147,483,647","\n\t\t","3 \n\t\t + 4","\n\t","\n\t","\n\t\t","Long","\n\t\t","-549,755,813,888","\n\t\t","549,755,813,887","\n\t\t","3 \n\t\t + 5","\n\t","\n\t","\n\t\t","Long","\n\t\t","-140,737,488,355,328","\n\t\t","140,737,488,355,327","\n\t\t","3 \n\t\t + 6","\n\t","\n\t","\n\t\t","Long","\n\t\t","-36,028,797,018,963,968","\n\t\t","36,028,797,018,963,967","\n\t\t","3 \n\t\t + 7","\n\t","\n\t","\n\t\t","Long","\n\t\t","-9,223,372,036,854,775,808","\n\t\t","9,223,372,036,854,775,807","\n\t\t","3 \n\t\t + 8","\n\t","\n\t","\n\t\t","Boolean","\n\t\t","false","\n\t\t","true","\n\t\t","3 \n\t\t + 1","\n\t","\n\t","\n\t\t","Float","\n\t\t","3 \n\t\t + 4","\n\t","\n\t","\n\t\t","Double","\n\t\t","3 \n\t\t + 8","\n\t","\n\t","\n\t\t","String or Json (simple ascii with length \n\t\t < 128)","\n\t\t","3 \n\t\t + 1 + length","\n\t","\n\t","\n\t\t","String or Json (simple ascii with length \n\t\t >= 128)","\n\t\t","3 \n\t\t + 4 + length","\n\t","\n\t","\n\t\t","String or Json (Unicode)","\n\t\t","3 \n\t\t + 4 + (length x 2)","\n\t","\n\t","\n\t\t","Enum (First 255 enums)","\n\t\t","3 \n\t\t + 1 per entry + enum_cost","\n\t","\n\t","\n\t\t","Enum (Next 65,281 enums)","\n\t\t","3 \n\t\t + 2 per entry + enum_cost","\n\t","\n\t","\n\t\t","Enum (Next 16,711,935 enums)","\n\t\t","3 \n\t\t + 3 per entry + enum_cost","\n\t","\n\t","\n\t\t","Binary","\n\t\t","3 \n\t\t + byte length","\n\t","\n","\n"," ","\n","Keys",". The length of a key has virtually no impact on memory.  This \n is because all key names are indexed. Ami Supports up to 65,536 ","unique"," \n key names plus data types (T=). This is a hard limit per AMI center and \n going beyond that will result in data loss. For example, the following \n 2 messages would result in 5 unique keys. Note that when key names and \n types (T=) are repeated then they do not count as a new unique key.","\n"," ","\n","O","|","T","=\"Order\"|quantity=100|symbol='ABC'|","I","=\"Ord123\"","\n","O","|","T","=\"Execution\"|quantity=50|symbol='XYZ'|price=45.3d|","I","=\"exec123\"","\n","O","|","T","=\"Execution\"|quantity=150|symbol='DEF'|price=13d|","I","=\"exec456\"","\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Data Storage (Advanced)"]],"id":"207"})