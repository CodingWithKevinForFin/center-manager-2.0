rh._.exports({"0":[["Realtime Tables"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n"],["\n","\n"],["\n","This command is used to create a new, empty (no \n rows) public table with a specified set of columns (names, types, no-null \n restriction).  If another public table already exists with the \n ","tblname,"," the create table will fail. ","\n"," ","\n","At least one column must be specified, and each \n column must have a unique name. Columns with the nonull constraint cannot \n hold a null value. Updates and inserts in violation of the rule will fail.","\n"," ","\n","The Following ","Use"," Options \n can be applied to a table:","\n"," ","\n","\n\t","PersistEngine"," -","\n\t","\n\t\t","\"FAST\"",": The table will \n\t\t be persisted to disk using a fast, binary protocol. Additional \n\t\t options include:","\n\t\t","\n\t\t\t","\"persist_dir\" = \"/path/to/directory/for/storing/file\""," \n\t\t\t - this is the directory where the .fast binary file will be \n\t\t\t saved/loaded from","\n\t\t\t","\"persist_compact_percent\""," ","= \n\t\t\t \".95\""," - a number between 0 and 1 which says \n\t\t\t how much of the file should contain updates & deletes \n\t\t\t before it's compacted. Because the FAST table uses a journaling \n\t\t\t strategy, updates and deletes will get appended and can create \n\t\t\t large files. Setting a value of .95 would indicate that if \n\t\t\t the file becomes 95% updates and deletes then the file should \n\t\t\t be rebuilt.","\n\t\t","\n\t\t","\"TEXT\"",": \n\t\t The table will be persisted to disk using a slow, but easy to \n\t\t read text file","\n\t\t","\n\t\t\t","\"persist_dir\" = \"/path/to/directory/for/storing/file\""," ","- this is \n\t\t\t the directory where the .txt text file will be saved/loaded \n\t\t\t from"," ","\n\t\t","\n\t","\n\t","P","ersistEngine=\"","Custom\"",": \n\t A custom persist engine will be used (see AMI plugins documentation). \n\t Note, that ","Pe","rsistOpt","ions=\"...\""," is available to pass options to the \n\t custom plugin.","\n\t","B","roadcast=\"true\"",": Front end visualizations & external \n\t listeners will be notified as data is updated in the table.","\n\t","R","efreshPeriodMs=\"","durration_millis","\"",": \n\t The period that the table will conflate and broadcast changes to front \n\t end at.  For example, if a cells' value changes 10 times \n\t in one second and the refresh period is 500ms, then only ~2 updates \n\t will be broadcast out (the other 8 will be conflated)","\n\t","OnUndefColumn"," \n\t - Behaviour to take when a realtime Object record contains an undefined \n\t column","\n\t","\n\t\t","\"REJECT\""," \n\t\t - The record will be rejected.  This is the default","\n\t\t","\"IGNORE\""," \n\t\t - The  record will be inserted, but the undefined values \n\t\t will be ignored","\n\t\t","\"ADD\""," \n\t\t ","-  The table will automatically \n\t\t have the column added.","\n\t","\n\t","InitialCapacity=","\"number_of_rows\""," - the number of rows to allocate memory for \n\t when the table is created. Must be at least 1. The default initial \n\t capacity is 1,000 rows.","\n","\n"," ","\n"],["\n","CREATE \n PUBLIC"," ","TABLE"," \n ","[IF NOT EXISTS] ","tblname"," ","(","col1"," ","public_column_type"," \n "," ","[",","," ","col2"," ","public_column_type"," ...","]",")","\n","      "," ","[","USE"," \n "," ","[","PersistEngine","=\"","[","FAST","|","TEXT","|custom]\"]","\n","[","PersistOptions","=\"custom_options\"]","\n","[","Broadcast","=\"[","true","|","false","]\"]","\n","[","RefreshPeriodMs","=\"duration_millis\"]","\n","[","OnUndefColumn","=\"","REJECT","|","IGNORE","|","ADD","\"]","\n"," ","\n","tblname"," \n -"," string name of the table to create","\n","colN -"," string name of Nth column to create","\n"," ","\n"],["\n","CREATE PUBLIC TABLE countries (country String NoNull, \n language String, GDP Double) USE PersistEngine=\"TEXT\" Broadcast=\"false\" \n InitialCapacity=\"100\"","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n command is used to create a new table which has the same schema definition \n as the result set of a ","select_clause",".  If \n another table already exists with the ","tblname,"," \n the create table will fail.","\n","                                                                                      ","\n","All \n rows from the ","select_clause","'s result \n set will be inserted into the table. For valid ","USE"," \n options, see ","create_public_table_clause \n ","Options.","\n"," ","\n"],["\n","CREATE PUBLIC"," \n "," ","TABLE"," ","[IF NOT EXISTS] \n ","tblname","[","(","col1"," \n ","public_column_type"," "," ","[",","," \n ","col2"," \n ","public_column_type"," ","...]",")","]"," ","[","USE"," \n ","..."," ","]"," \n "," AS"," ","select_clause","\n","CREATE PUBLIC"," \n "," ","TABLE"," ","[IF NOT EXISTS] \n ","tblname","[","(","col1"," \n ","public_column_type"," "," ","[",","," \n ","col2"," \n ","public_column_type"," ","...]",")","]"," ","[","USE"," \n ","..."," ","]"," \n "," AS"," ","analyze_clause","\n","CREATE PUBLIC"," \n "," ","TABLE"," ","[IF NOT EXISTS] \n ","tblname","[","(","col1"," \n ","public_column_type"," "," ","[",","," \n ","col2"," \n ","public_column_type"," ","...]",")","]"," ","[","USE"," \n ","..."," ","]"," \n "," AS"," ","prepare_clause","\n","CREATE PUBLIC"," \n "," ","TABLE"," ","[IF NOT EXISTS] \n ","tblname"," ","[","USE"," ","..."," \n ","]"," "," ","[",", \n tblname"," ","[","USE"," \n ","..."," ","]"," \n "," ","...","]"," "," AS"," \n ","execute_clause","               ","\n"," ","\n","tblname"," \n -"," string name of the table to create","\n"," ","\n"],["\n","CREATE PUBLIC TABLE \n names USE PersistEngine=\"FAST\" AS SELECT first_name, last_name \n FROM employees","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n command alters the schema (column names and types) of an existing table.  You \n can add columns (","ADD","), rename columns \n (","RENAME ... TO","), delete columns (","DROP","), and change the type of columns \n (","MODIFY",").  Note, when multiple \n alterations are supplied, they are evaluated left to right. When changing \n types, a best effort cast will be applied.","\n"," ","\n","When \n adding columns, the new cells will default to null. The column will be \n added to the end (right-most) of the table.","\n"," ","\n","ALTER PUBLIC \n TABLE"," ","tblname"," "," ","alter_public_col_expr"," \n "," ","[",","," ","alter_public_col_expr"," \n "," ","...","]"," "," ","\n"," ","\n","tblname"," \n -"," string name of the table to alter","\n"," ","\n"],["\n","ALTER PUBLIC TABLE \n AccountHoldings ADD UserId long, RENAME AccountId TO Account_Id, DROP \n UserInfo","\n"," ","\n","ALTER PUBLIC TABLE \n AccountHoldings MODIF UserId AS UserId INT","\n"," ","\n","ALTER PUBLIC TABLE \n AccountHoldings RENAME UserId TO UserIds, ADD UserId STRING","\n"," ","\n"," ","\n","alter_public_column_expr","\n","\n","MODIFY"," \n colname ","AS"," newname ","public_column_type"," \n |","ADD"," newname ","public_column_type"," [","BEFORE"," \n beforecol]|","DROP"," colname|","RENAME"," \n colname ","TO"," newname","\n"," ","\n","colname"," \n - String name of the column to alter","\n","newname"," \n - String name of the column to create","\n","beforecol"," \n - String name of the existing column to add the new column before","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n command renames an existing table. If another table already exists with \n the ","newname,"," the existing table will \n be implicitly dropped and replaced with the renamed table.","\n"," ","\n"],["\n","RENAME PUBLIC TABLE"," \n ","tblname"," "," ","TO"," \n ","newname","\n"," ","\n","tblname"," \n -"," string name of the table to rename","\n","newname"," \n -"," string name of the new name for the table","\n"," ","\n"],["\n"," ","\n","RENAME PUBLIC TABLE \n AccountHoldings TO Accounts","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n command drops an existing table, along with its schema and all rows. You \n can specify multiple tables, separated by commas.","\n"," ","\n"],["\n","DROP \n PUBLIC TABLE"," ","[IF EXISTS] \n ","tblname"," ","[",", tblname"," \n ...","]"," ","\n"," ","\n","tblname"," - string name of the table to create","\n"," ","\n"],["\n","DROP PUBLIC TABLE \n Accounts","\n"," ","\n"," ","\n","public_column_type","\n","\n","The following types are supported for columns in public tables.","\n","Note on Nulls: If the \n NONULL attribute is included, the column does not support null values, \n and inserts/updates of null will fail.","\n","Note on ","NOBROADCAST",": Columns with broadcast disabled \n will not be included in updates sent to front end visualizations & \n external listeners. This is a more granular version of the Broadcast option \n at the table level.","\n"," ","\n","BYTE"," ","[","NONULL","]","[","NOBROADCAST","]"," \n ","8-bit signed number (see java.lang.Byte for details on range). \n If NONULL is omitted then an extra 1-bit per row is used (precisely, 64-bits \n per each 64 rows).","\n","SHORT"," ","[","NONULL","]","[","NOBROADCAST","]"," \n ","16-bit signed \n number (see java.lang.Short for details on range). If NONULL is omitted \n then an extra 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","INT"," ","[","NONULL","]","[","NOBROADCAST","]"," \n ","32-bit signed number (see \n java.lang.Integer for details on range). If NONULL is omitted then an \n extra 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","LONG \n ","[","NONULL","]","[","NOBROADCAST","]"," \n ","64-bit signed number (see \n java.lang.Long for details on range). If NONULL is omitted then an extra \n 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","DOUBLE \n ","[","NONULL","]","[","NOBROADCAST","]"," \n ","64-bit signed float (see \n java.lang.Double for details on range). If NONULL is omitted then an extra \n 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","FLOAT \n ","[","NONULL","]","[","NOBROADCAST","]"," ","32-bit \n signed float (see java.lang.Float for details on range). If NONULL is \n omitted then an extra 1-bit per row is used (precisely, 64-bits per each \n 64 rows).","\n","UTC"," ","[","NONULL","]","[","NOBROADCAST","]"," ","64-bit \n unix epoc timestamp in milliseconds. If NONULL is omitted then an extra \n 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","UTCN ","[","NONULL","]","[","NOBROADCAST","]"," ","64-bit unix \n epoc timestamp in nanoseconds. If NONULL is omitted then an extra 1-bit \n per row is used (precisely, 64-bits per each 64 rows).","\n","CHAR \n ","[","NONULL","]","[","NOBROADCAST","]"," \n ","16-bit unicode character \n (see.java.lang.Character for details on range). If NONULL is omitted then \n an extra 1-bit per row is used (precisely, 64-bits per each 64 rows).","\n","BOOLEAN \n ","[","NONULL","]","[","NOBROADCAST","]"," \n ","1-bit signed Boolean (see \n java.lang.Boolean for details on range).","\n","STRING \n ","[","NONULL","]","[","NOBROADCAST","]"," \n ","variable length string. \n Each cell is backed by a java.lang.String instance","\n","STRING \n COMPACT"," ","[","NONULL","]","[","NOBROADCAST","] ","4-byte \n index into a continuous char array for all values in the column. Values \n are limited to 32,766 characters in length. Max total chars per column \n (include 2 byte EOL) is 2^31.","\n","STRING \n COMPACT ASCII"," \n ","[","NONULL","]","[","NOBROADCAST","]"," 4-byte \n index into a continuous byte array for all values in the column. Extended \n ascii not supported. Values are limited to 126 chars. Max total chars \n per column (include 1 byte EOL) is 2^31","\n","ENUM"," \n ","[","NONULL","]","[","NOBROADCAST","]"," 32-bit \n index into map of global Strings (map is shared across all public tables)","\n","STRING \n BITMAP"," ","[","NONULL","]","[","NOBROADCAST","]","8-bit, \n 16-bit, or 32-bit address into an underlying map of strings (local to \n the column). The addressing depends on the number of unique values encountered \n in the column: 0 - 255 unique entries is 8-bit, 256 - 65,535 unique entries \n is 16-bit, otherwise 32-bit addressing is used. Note that as new unique \n values are added, the addressing will automatically escalate as needed. \n Note that entries from the underlying map are never removed, even as cells \n are updated deleted.","\n","BINARY ","[","NONULL","][","NOBROADCAST","]"," "," ","variable \n length byte array, useful for storing images and other media. ","\n","STRING ONDISK","  ","[","NONULL","][","CACHE=nnnMB","][","NOBROADCAST","]"," "," ","Same as \n a String, but only a 64-bit pointer is kept in memory, which resolves \n to a Block on disk, meaning that strings of any length will take up the \n same 64-bits in memory. The optional ","CACHE"," directive \n specifies the maximum RAM to use for caching the most recently used values, \n supported units are KB,MB,GB and TB (if no unit is specified, then in \n bytes),  example to cache 2 gigabytes: ","STRING \n ONDISK"," ","CACHE=2GB."," ","Cache-misses \n will result in reading from disk which can slow down query performance. \n ","\n","BINARY ONDISK","  ","[","NONULL","][","CACHE=nnnMB","][","NOBROADCAST","]"," "," ","Same as \n a Binary, but only a 64-bit pointer is kept in memory, which resolves \n to a Block on disk, meaning that binaries of any length will take up the \n same 64-bits in memory. The optional ","CACHE"," directive \n specifies the maximum RAM to use for caching the most recently used values, \n supported units are KB,MB,GB and TB (if no unit is specified, then in \n bytes), example to cache ~100 megs: ","BINARY \n ONDISK"," ","CACHE=100000000."," ","Cache-misses \n will result in reading from disk which can slow down query performance. \n ","\n","BIGDECIMAL ","[","NONULL","]","[","NOBROADCAST","]"," ","Unbounded(variable \n length) signed decimal (see java.lang.BigDecimal for details on range). \n ","\n","BIGINTEGER ","[","NONULL","]","[","NOBROADCAST","]"," ","Unbounded(variable \n length) signed number (see java.lang.BigInteger for details on range). \n ","\n","COMPLEX ","[","NONULL","]","[","NOBROADCAST","]"," ","A 128-bit \n Complex number, composed of 64-bit signed real and 64-bit signed imaginary \n parts. ","\n","UUID","[","NONULL","]","[","NOBROADCAST","]"," ","a 128-bit \n Universally Unique Identifier. ","\n"," ","\n"],["\n","Simple \n rules: For data that never repeats and is queried often ","STRING"," is the best. For columns with data \n that does not repeat but is not queried often ","STRING \n COMPACT"," (or ","STRING COMPACT ASCII"," \n for non-extended ascii data) offer a lower memory footprint. For repeating \n data, generally ","STRING \n BITMAP"," is best. Below is a table outlining the advantages/disadvantages \n of each.","\n"," ","\n","\n\t","\n\t\t","Type","\n\t\t","Storage \n\t\t Method","\n\t\t","Advantage","\n\t\t","Disadvantage","\n\t\t","Usage \n\t\t Scenario","\n\t","\n\t","\n\t\t","STRING","\n\t\t","Each cell \n\t\t is stored as a java.lang.String object.","\n\t\t","Fastest \n\t\t Retrieval","\n\t\t","High Memory \n\t\t Usage. Internally, each entry is stored as a java object.","\n\t\t","For columns \n\t\t that have very high cardinality and accessed often or participate \n\t\t in indexes. Another use would be when the total data in the column \n\t\t (adding up the lengths of all cells in the column) exceeds 2 billion \n\t\t chars.","\n\t","\n\t","\n\t\t","STRING COMPACT","\n\t\t","Each cell \n\t\t contains a 32-bit address into a continuous char array.15-bits \n\t\t are used to store string length. Each cell has a unique address.","\n\t\t","Low Memory/Object \n\t\t usage. A single large continuous array","\n\t\t","Slower \n\t\t Retrieval, as cell values are used a temporary string object may \n\t\t be constructed. Frequent deletes or updates that change the cell \n\t\t content lengths may result in array-data compaction.","\n\t\t","For columns \n\t\t that have high cardinality and whose cells are either beyond 126 \n\t\t chars or have extended ascii. But is not accessed frequently (ex, \n\t\t as part of a where clause). For example"," ","comment"," ","columns","\n\t","\n\t","\n\t\t","STRING COMPACT \n\t\t ASCII","\n\t\t","Each cell \n\t\t contains a 32-bit address into a continuous byte array. 7-bits \n\t\t are used to store string length. Each cell has a unique address","\n\t\t","1/2 the memory of a STRING \n\t\t COMPACT.","\n\t\t","Slower \n\t\t Retrieval, as cell values are used a temporary string object may \n\t\t be constructed. Frequent deletes or updates that change the cell \n\t\t content lengths may result in array-data compaction.","\n\t\t","Same as \n\t\t STRING COMPACT, except limited to shorter strings that are basic \n\t\t asci (not extended asci)","\n\t","\n\t","\n\t\t","STRING BITMAP","\n\t\t","Each cell \n\t\t contains a 8,16 or 32-bit address into a map of unique java.lang.String \n\t\t Objects local to the column.  Multiple cells containing \n\t\t the same value will share an address.","\n\t\t","Most Compact.","\n\t\t","Only used \n\t\t for repeating data (lower cardinality). Retrieval is slightly \n\t\t slower than a simple STRING column, but much faster than COMPACT \n\t\t type columns.","\n\t\t","Any scenario \n\t\t where columns have lower cardinality and fewer than approximately \n\t\t 32,000 unique values.","\n\t","\n\t","\n\t\t","ENUM","\n\t\t","Each cell \n\t\t contains a 32-bit address into a map of unique java.lang.String \n\t\t Objects, global to the entire database.  Multiple cells \n\t\t containing the same value will share an address, even if those \n\t\t cells are on different columns of type ENUM.","\n\t\t","Compact.  Note: \n\t\t this is generally for legacy, BITMAP is generally preferred","\n\t\t","Must be used \n\t\t only on columns with low cardinality. Note this is mostly for \n\t\t legacy support and STRING BITMAP is prefered.","\n\t\t","When several \n\t\t columns all use a similar set of values (ex: BUY,SELL, SHORT) \n\t\t then all columns can be set to use ENUM.","\n\t","\n\t","\n\t\t","STRING \n\t\t ONDISK","\n\t\t","Each \n\t\t cell contains a 64-bit address into a random-access file. And \n\t\t only the most recent values read/wrote are cached in memory"," \n\t\t ","\n\t\t","Fixed \n\t\t memory size regardless of string length."," ","\n\t\t","Slower \n\t\t read times for un-cached Strings"," ","\n\t\t","For \n\t\t large text documents or those that do not need to be searched \n\t\t on"," ","\n\t","\n","\n"," ","\n"," ","\n"],["\n","\n","If \n any of the following columns are declared they will be automatically populated \n by the AMI engine. Note that when creating the table, the column type \n MUST match the type specified below, otherwise table creation will fail. \n Note all times are since unix epoc in milliseconds.","\n"," ","\n","\n\t","\n\t\t","Name","\n\t\t","Type"," ","\n\t\t","Label"," ","\n\t\t","Mutatable","\n\t\t","Description"," ","\n\t","\n\t","\n\t\t","C","\n\t\t","Long","\n\t\t","Created On"," ","\n\t\t"," ","\n\t\t","Time that the record was inserted into \n\t\t the table"," ","\n\t","\n\t","\n\t\t","D","\n\t\t","Long","\n\t\t","AMI ID"," ","\n\t\t"," ","\n\t\t","An auto-generated incrementing unique \n\t\t id for the row. Unique across all tables."," ","\n\t","\n\t","\n\t\t","E","\n\t\t","Long","\n\t\t","Expires \n\t\t On","\n\t\t","INSERT, \n\t\t UPDATE","\n\t\t","Time \n\t\t when the row should be automatically deleted.","\n\t\t","   * \n\t\t Negative Number - Offset from now. Ex:  -4000 remove \n\t\t four seconds from now","\n\t\t","   * \n\t\t Zero or Null - don't automatically delete","\n\t\t","   * \n\t\t Positive number - time since epoc to. Ex: 2510712000000L remove \n\t\t 07/24/2049"," ","\n\t","\n\t","\n\t\t","I","*","\n\t\t","String","\n\t\t","UniqueID","\n\t\t","INSERT"," ","\n\t\t","The Id(","I",") value supplied from the realtime streaming \n\t\t on the Object (","O",") message"," ","\n\t","\n\t","\n\t\t","M","\n\t\t","Long","\n\t\t","Modified \n\t\t On","\n\t\t"," ","\n\t\t","Most recent time that the record was updated \n\t\t (initially the time the row was inserted)"," ","\n\t","\n\t","\n\t\t","P","\n\t\t","String","\n\t\t","Login \n\t\t ID","\n\t\t","INSERT"," ","\n\t\t","The Login Id (","I",") value supplied from the realtime messaging \n\t\t api on the Login (","L",") message"," ","\n\t","\n\t","\n\t\t","V","\n\t\t","Int","\n\t\t","Revision","\n\t\t"," ","\n\t\t","The number of times the record has been \n\t\t updated (initially zero)"," ","\n\t","\n\t","\n\t\t","T","\n\t\t","Enum","\n\t\t","Table \n\t\t Name","\n\t\t"," ","\n\t\t","The name of the table, all \n\t\t cells will contain the same value (this is for backwards compatibility)"," ","\n\t","\n","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n","* ","I"," (and ","P",") column behavior \n can be thought of as a convenient way of supporting the \"upsert\" \n concept:"," \n ","\n","\n\t","If \n\t the ","I"," column \n\t is defined (but not the P column) AMI treats ","I"," as a \n\t (pseudo) primary key. An attempt to insert a row with the same non-null \n\t ","I"," value as an existing row will result \n\t in an update to the existing row instead of an insert. This is different \n\t from a standard PRIMARY key in that two rows can exist in a table \n\t with the same key if the key is null. ","Please \n\t see"," \n\t ","CREATE INDEX ... USE CONSTRAINT=\"PRIMARY\""," ","for \n\t standard primary keys.","\n","\n"," ","\n","If \n both the ","P"," and ","I"," columns are defined, AMI treats the"," ","P \n + I"," combination as a (pseudo) primary \n key. An attempt to insert a row with the same non-null ","P"," \n and ","I"," ","values \n as an existing row will result in an update to the existing row instead \n of an insert. This is different from a standard PRIMARY key in that two \n rows can exist in a table with the same key if the key contains a null \n value. ","Please see"," ","CREATE INDEX ... USE CONSTRAINT=\"PRIMARY\""," \n ","for standard primary keys.","\n","Table DefinedBy Attributes","\n\n\n","\n    "," ","\n  ","\n\n"]],"3":[["Realtime \n Tables"]],"4":[["create_public_table_clause"],["create_public_table_as_clause"],["alter_public_table_clause"],["rename_public_table_clause"],["drop_public_table_clause"],["Reserved \n columns on public Tables"]],"6":[["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["Choosing the best column type for \n String"]],"id":"215"})