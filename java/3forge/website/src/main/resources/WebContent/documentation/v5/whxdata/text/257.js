rh._.exports({"0":[["Filtering in lines Directive (optional)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n","\n"],["\n","_filterIn=","regex","\n"," ","\n"],["\n","Only lines that match the supplied regular \n expression will be considered. If not supplied, then all lines are considered. \n From a Performance standpoint, this is applied before other parsing is \n considered, so narrowing down the lines considered using a filter in directive \n is faster, as opposed to using a WHERE clause for example. If you use \n a grouping (..) inside the regular expression, then only the contents \n of the first grouping will be considered for parsing","\n"," ","\n"],["\n","_filterIn=\"3Forge\" \n ","(ignore any lines that don't contain the word ","3Forge",")","\n","_filterIn=\"^Outgoing\" \n ","(ignore any lines that don't start with ","Outgoing",")","\n","_filterIn=\"Data(.*)\" \n ","(ignore any lines that don't start with ","Data,"," and only consider the \n text after the word ","Data"," for processing)","\n"," ","\n\n\n","\n    "," ","\n  ","\n\n"]],"3":[["Filtering in lines Directive (optional)"]],"4":[["Syntax"],["Overview"],["Examples"]],"id":"257"})