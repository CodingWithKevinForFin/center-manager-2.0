rh._.exports({"0":[["Enums (Advanced)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n","Clarification on Denoting Enums vs. \n Strings:"," Enums are surrounded using single quotes (') while strings \n are denoted using double quotes (\"). For example (note the quote \n types):","\n"," ","\n","O|T=\"sample\"|my_enum='hello'|my_string=\"Hello \n there Mr. Jones\"","\n"," ","\n","Enum Storage Methodology",": Using \n enums will dramatically reduce the cost of storing text that is often \n repeated. Instead of storing the ","actual"," value, just an index \n (binary number) is stored and regardless of how many times it is referenced \n only a single instance of the string is kept in a lookup table. The \n first 255 unique enum values received by the AMI central server will be \n indexed using a single byte index. The following 65,281 unique enum \n values received will be indexed using 2 bytes and the last 16,711,935 \n unique entries will use a 3 byte index. Be aware that the order in \n which unique enum values are introduced also determines the storage requirements \n for repeat entries.","\n"," ","\n","Enum Scope",": The scope of a particular \n enum is for an AmiCenter. This means that the same index will be used \n regardless of application sending the enum, type of message it is in or \n parameter it is associated with. For example, the following will result \n in 3 enums (presuming these are the first 3 messages then all 3 of these \n would be indexed using a single byte):","\n"," ","\n","O","|","T","=\"Order\"|symbol='ABC'|","I","=\"Ord123\"|name='DEF'","\n","O","|","T","=\"Execution\"|name='ABC'|","I","=\"exec123\"","\n","O","|","T","=\"Execution\"|symbol='DEF'|Orig='ZZZ'|","I","=\"exec456\"","\n"," ","\n","Note",": Exceeding 16,777,216 unique \n enums will cause the Center to treat remaining Enums as Strings.","\n"," ","\n","Understanding \n Cost:","\n","The first instance \n of an enum has significant overhead verses a String, but following instances \n will usually have a highly reduced overhead.  ","\n"," ","\n","\n\t","\n\t\t","Description","\n\t\t","Enum Cost","\n\t\t","(Best case)","\n\t\t","String  Cost","\n\t\t","(Best Case)","\n\t\t","Enum Cost","\n\t\t","(Worst  case)","\n\t\t","String  Cost","\n\t\t","(Worst \n\t\t Case)","\n\t","\n\t","\n\t\t","First entry for a string","\n\t\t","19 \n\t\t + (length x 2)","\n\t\t","4 \n\t\t + length","\n\t\t","21 \n\t\t + (length x 2)","\n\t\t","7 \n\t\t + length * 2","\n\t","\n\t","\n\t\t","repeat entries for string","\n\t\t","4","\n\t\t","4 \n\t\t + length","\n\t\t","6","\n\t\t","7 \n\t\t + length * 2","\n\t","\n","\n","Notes: (1) The \n length variable is the number of characters in the string. (2) Costs are \n in bytes.","\n"," ","\n","From the table \n above you can see there is a large cost for the first entry for an enum, \n but additional entries have a highly reduced cost which is regardless \n of string size.","\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Enums (Advanced)"]],"id":"205"})