rh._.exports({"0":[["Interfacing with Directory Naming Service (Ami One, Center)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n"],["\n","In Enterprise environments, some services cannot be directly identified \n by a physical destination (ex: host name) and are instead logically identified.  In \n this situation, the organization implements a directory naming service \n that can map, in realtime, the logical identifier to a physical destination. \n  ","\n"," ","\n","For AMI to access resources in this scenario, a plugin must be written \n that interfaces with the directory naming service.  Then, when \n a resource is requested inside AMI, AMI will first ask the Plugin to \"resolve\" \n the logical name to a physical one, passing the resolved physical one \n to the underlying connectors.  It's the plugin's responsibility \n to connect to the naming service and provide an answer in a timely fashion.","\n"," ","\n"," ","\n"],["\n","Note, that many resolvers can be supplied. The order in which they are \n defined in the property is the order in which they are visited. Once a \n resolver plugin says it \"canResolve\" the identifier, the remaining \n resolvers are not called.","\n"," ","\n"," ","\n"],["\n","If no resolvers plugins are provided, or none of the resolvers \"canResolve(...)\" \n a given identifier, then the identifier is considered a physical identifier \n and passed straight to the connector.   ","\n"," ","\n","                ","      ","\n"],["\n","com.f1.ami.amicommon.AmiNamingServiceResolver","\n"," ","\n"," ","\n"],["\n","ami.naming.service.resolvers","=","comma_delimited_list_of_fully_qualified_java_class_names","\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Interfacing with Directory Naming Service (AMI One, Center)"]],"3":[["Overview"],["Using Multiple Resolvers"],["Default case"],["Java interface (see javadoc for details)"],["Property name"]],"id":"259"})