rh._.exports({"0":[["Data Modification"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n"],["\n","\n","OVERVIEW","\n","This clause enables the insertion of raw values \n into an existing table.  Many rows may be inserted in a single \n call. Each ","values_expr"," \n represents a single row of data to be inserted. To insert multiple rows \n append additional ","values_expr","\n"," ","\n","In order to specify columns in which to insert values, \n provide an ordered list of column names after the table name.  The \n same number of values must be supplied in the ","values_expr"," \n and in the same order.  All other columns will default to null.","\n"," ","\n","If a list of column names is not provided, all columns \n will be populated. Each ","values_expr"," \n should contain one value for each column in the target table. Values should \n be in the same natural order as the columns in the target table.","\n"," ","\n","The ","forloop_expr"," \n allows for the insertion of ","values_expr"," \n to be repeated for each cycle of the for loop. The values can reference \n the for loop's declared variable. Multiple for loops can be nested inside \n one another.","\n"," ","\n","SYNTAX","\n","INSERT"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","forloop_expr"," \n ...","]"," ","VALUES"," ","values_expr","[",", \n ","values_expr"," ...","] [","LIMIT"," ","maxinsert","]","\n"," ","\n","tblname"," \n -"," string name of the table to insert into"," ","\n","colN"," -"," \n string name of the column to contain the Nth value from values_expr"," ","\n"," ","\n","EXAMPLES","\n","INSERT INTO \n rectangles (area, perimeter) VALUES (20,18);","\n","int \n length=10,width=5;","\n","INSERT INTO \n rectangles (area, perimeter) VALUES ((length * width), (2 * length + 2 \n * width));","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n clause causes the insertion of the result of a ","projecting-clause"," \n (","select_clause, analyze_clause, prepare_clause, \n execute_clause",") into an existing table.  Each row from \n the result set of the ","select_clause"," \n will result in the insertion of a new record into the target table. Please \n note, multiple tables may be inserted in a single call using the ","UNION"," clause."," ","\n"," ","\n","In order to specify columns in which to insert values, \n provide an ordered list of column names after the table name.  The \n result set from the preceding ","select_ ","must \n have the same number of columns. The columns should be in the same order.  All \n other columns will default to null.","\n"," ","\n","If \n a list of column names is not provided, all columns will be populated. \n Each ","values_expr"," \n should contain one value for each column in the target table. Values should \n be in the same natural order as the columns in the target table.","\n"," ","\n"],["\n","INSERT"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","FROM","]"," "," ","select_clause","\n","INSERT"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", \n ","col2"," \n ...","]",")","] [","FROM","]"," "," ","analyze_clause","\n","INSERT"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", \n ","col2"," \n ...","]",")","] [","FROM","]"," "," ","prepare_clause","\n","INSERT"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", \n ","col2"," \n ...","]",")","] [","FROM","]"," "," ","execute_clause","\n","I","NSERT"," ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","FROM","]","  ","describe_clause","\n","INSERT"," ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","FROM","]","  ","show_clause","\n","INSERT"," ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","FROM","]","  ","call_clause","\n"," ","\n","tblname"," \n -"," string name of the table \n to insert into","\n","colN"," \n -"," string name of the column \n to contain the Nth value from results of select clause","\n"," ","\n"],["\n","INSERT \n INTO employee_summary (age, birthplace) FROM SELECT age, birthplace FROM \n employee","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n clause causes the ","target"," ","table"," to reflect the result of \n a ","projecting-clause"," (","select_clause, \n analyze_clause, prepare_clause, execute_clause","), meaning that rows \n will be ","inserted",", ","deleted"," and ","updated"," accordingly \n on the target table such that the target table will properly mirror the \n result of the ","projecting-clause",". ","\n"," ","\n","In \n otherwords, the two examples will result in the same final state for the \n ","my_target"," table, but from a trigger stand point \n they are significantly different:","\n"," ","\n","//Example 1: using \n a traditional clear-and-rebuild technique:","\n"," ","TRUNCATE \n my_target; INSERT INTO my_target FROM SELECT * from my_source;","\n"," ","\n","//Example 2: using \n the sync method:","\n","       SYNC \n my_target FROM SELECT * from my_source;","\n"," ","\n","In the first \n example, the truncate instruction will cause a ","delete \n trigger"," to be fired for every row originally in the my_target table \n and then the subsequent insert instruction will cause an ","insert \n trigger"," to be fired for every row inserted into the my_target table."," \n "," ","\n"," ","\n","The \n following rules apply for how the target table is mutated:","\n"," ","\n","\n\t","Records in the \n\t ","projecting-clause"," that do not have a matching record in the \n\t ","target"," table are ","inserted"," into the target table","\n\t","Records in the \n\t ","target"," table that do not have a matching record in the ","projecting-clause"," \n\t are ","deleted"," from the target table","\n\t","Records in the \n\t ","target"," table that have a \"perfect\" matching record \n\t in the ","projecting-clause"," remain ","untouched",". (no triggers \n\t fired","\n\t","Records in the \n\t ","target"," table that have a \"non-perfect\" matching record \n\t in the ","projecting-clause"," are ","updated",".","\n","\n"," ","\n","An \n ","ON"," clause can be used to tell the \n sync tool how to determine if a source and target row are considered equivalent.  When \n an equivalent row between the target table and projecting-clause is identified, \n this will result in an update.  Rows that don't have a match \n will result in a delete and/or insert.","\n"," ","\n","Matching \n Rules:","\n"," ","\n","\n\t","If  all \n\t cells between two rows are equivalent, that is considered a \"Perfect \n\t match\"","\n\t","If an ON clause \n\t is specified: Two row are considered a \"non-perfect\" match \n\t if all of the cells specified in the ON clause are a match, but other \n\t cells are not.  (If an ON clause is not specified then there \n\t can not be non-perfect matches)","\n","\n"," ","\n","In \n order to specify columns in which to sync values, provide an ordered list \n of column names after the table name (note that only these columns will \n be considered for the perfect-matching criteria).  The result \n set from the preceding ","select_clause"," \n must have the same number of columns. The columns should be in the same \n order.  All other columns will default to null for inserts and \n will be left unaltered for updates.","\n"," ","\n","If \n a list of column names is not provided, all columns will be populated. \n Each ","values_expr"," \n should contain one value for each column in the target table. Values should \n be in the same natural order as the columns in the target table.","\n"," ","\n"],["\n","SYNC"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","ON(","onCol1",",[,","onCol2","]",")","] [","FROM","]"," \n "," ","select_clause","\n","SYNC"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","ON(","onCol1",",[,","onCol2","]",")","] [","FROM","]"," \n "," ","analyze_clause","\n","SYNC"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","ON(","onCol1",",[,","onCol2","]",")","] [","FROM","]"," \n "," ","prepare_clause","\n","SYNC"," \n ","[","INTO","]"," "," ","tblname"," ","[","(","col1","[",", ","col2"," ...","]",")","] [","ON(","onCol1",",[,","onCol2","]",")","] [","FROM","]"," \n "," ","execute_clause","\n"," ","\n","tblname"," \n -"," string name of the table \n to insert into","\n","colN"," \n -"," string name of the column \n to contain the Nth value from results of select clause","\n","onColN"," \n -"," string name of the column \n to be used in determining if two records are equivalent","\n"," ","\n"],["\n","SYNC accounts USE \n ds=my_datasource EXECUTE select * from Accounts;","\n","SYNC new_employees \n SELECT * FROM old_employees;","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This clause enables the deletion \n of specific rows or all rows from a table.","\n"," ","\n","To \n delete only specific rows, provide a ","WHERE"," \n clause which must evaluate to a Boolean value where true indicates that \n the row should be deleted. Otherwise, to delete all rows, do not provide \n a ","WHERE"," clause.","\n"," ","\n","You \n can specify the maximum number of rows to delete using the ","LIMIT"," \n clause (","maxdelete","). \n Additionally, you may provide a number of rows to skip when deleting (","skipdelete","). \n Note the limit is applied after the  where clause, meaning that \n the skipdelete indicates how many records to skip deleting that would \n otherwise be deleted based on the where clause.","\n"," ","\n","The ","JOIN \n .. ON"," clause \n allows you to use the values from another table to determine which rows \n to delete from the target table. The ","JOIN"," operates similar to the ","SELECT","'s ","JOIN"," clause. Note that ","LEFT \n JOIN"," and \n ","LEFT ONLY"," are also supported. Keep in mind that you can only \n delete rows from the left table."," ","\n"," ","\n"],["\n","D","ELETE FROM"," ","tblname"," ","[","WHERE"," ","where_expr","]"," ","[","LIMIT"," ","[","skipdelete",",","]"," ","maxdelete","]"," \n ","\n","DELETE"," FROM"," ","tblname"," ","[","LEFT"," ","[","ONLY","] ","JOIN"," ","table_expr"," ","ON"," ","expr"," ","]","  [","WHERE"," ","where_expr","]"," ","[","LIMIT"," ","[","skipdelete",",","]"," ","maxdelete","]"," ","\n","DELETE \n FROM"," \n ","tblname"," ","[","LEFT"," ","[","ONLY","]"," ","JOIN"," ","table_expr"," \n ","ON"," ","expr"," ]  ","[","WHERE"," ","where_expr","]"," ","[","LIMIT"," ","[","skipdelete",",]"," ","maxdelete","]"," ","\n"," ","\n","tblname"," \n -"," string name of the table to delete from","\n"," ","\n"],["\n","D","ELETE \n FROM names;"," ","//deletes \n all records from names table","                                                             "," \n ","\n","D","ELETE \n FROM names WHERE first_name == \"Dave\"; ","//","deletes \n all records where name is Dave","\n","D","ELETE \n FROM names WHERE first_name == \"Dave\" LIMIT 2;"," ","//delete 1","st"," \n & 2","nd"," record where name is Dave","\n","D","ELETE \n FROM names WHERE first_name == \"Dave\" LIMIT 2,1;"," ","//deletes 3rd record where name \n is Dave","\n","DELETE FROM names \n JOIN users ON first_name == ","users.name","; ","//deletes \n all","\n","records from names where the first_name has \n a match with the user's table","\n","DELETE FROM names \n LEFT ONLY JOIN users ON first_name == users;"," \n ","//deletes all","\n","records \n from names where the first_name does NOT have a match with the","\n","user's \n table"," ","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n command deletes all rows from a table. You can specify multiple tables, \n separated by commas.","\n"," ","\n"],["\n","TRUNCATE"," ","[","TABLE","]"," "," ","tblname"," ","[",", tblname"," ","...","]"," ","\n"," ","\n","tblname"," - name of the table to delete all rows from","\n"," ","\n"],["\n","TRUNCATE TABLE \n Accounts;","\n","TRUNCATE TABLE \n Orders, Executions, Alerts;","\n"," ","\n"," ","\n"],["\n","\n"],["\n","This \n clause can be used to update specific rows or all rows in a table. Following \n the ","SET"," statement, provide an assignment \n (","target","=","expr",") \n clause for each column to be updated, where target is the name of an existing \n column.","\n"," ","\n","To \n update only specific rows, provide a ","WHERE"," \n clause which evaluates to a Boolean value, where true indicates that the \n row should be updated. Otherwise, to update all rows, do not provide a \n ","WHERE"," clause.","\n"," ","\n","You \n can specify the maximum number of rows to update using the ","LIMIT"," \n clause (","maxupdate","). \n Additionally, you may provide a number of rows to skip when updating (","skipupdate","). \n Note the limit is applied after the  where clause, meaning that \n the skipupdate indicates how many records to skip updating that would \n otherwise be updated based on the where clause.","\n"," ","\n","The \n ","JOIN \n .. ON"," clause allows you \n to use the values from another table to update values in the target table. \n The ","JOIN"," operates \n similar to the ","SELECT","'s \n ","JOIN"," clause. \n Note that ","LEFT JOIN"," and \n ","LEFT \n ONLY"," are also supported. \n Keep in mind that you can only update values on the left table."," \n ","\n"," ","\n"],["\n","UPDATE"," ","tblname"," "," ","SET"," ","col1=","expr"," ","[",","," ","col2","=","expr","...","]"," ","[","WHERE"," ","where_expr","] [","LIMIT"," ","[","skipupdate",",","]"," ","maxupdate","]","\n","UPDATE"," \n ","tblname ","[","LEFT"," ","[","ONLY","]"," ","JOIN"," ","table_expr"," \n ","ON"," ","expr"," ","]"," ","SET"," \n ","col1=","expr"," ","[",", \n ","col2","=","expr","...","]"," ","[","WHERE"," ","where_expr","] [","LIMIT"," ","[","skipupdate",",","]"," ","maxupdate","]","\n"," ","\n","UPDATE"," ","tblname"," ","[","LEFT"," ","[","ONLY","]"," ","JOIN"," ","table_expr"," ","ON"," ","expr"," ","]"," SET \n col1=expr ","[, ","col2=expr...","][","WHERE"," ","where_expr","]"," ","[","LIMIT"," ","[","skipupdate",",]"," ","maxupdate","]"," ","\n","tblname"," \n -"," string name of the table to delete from","\n","colN"," \n -"," string name of the column to assign value from expression","\n"," ","\n"],["\n"," ","\n","UPDATE \n groceries SET price = 10, status=null;"," ","//update \n all records setting price to 10 and status  to null","\n","UPDATE \n groceries SET price = price + 1 WHERE type == \"dairy\""," \n ","//increment price for all records where type is dairy","\n","UPDATE \n groceries SET price = price + 1 WHERE type == \"dairy\" LIMIT \n 10;"," ","//increments the price for the first 10 \n records where type is dairy"," ","\n","UPDATE \n groceries SET price = price + 1 WHERE type == \"dairy\" LIMIT \n 3,2 ;"," ","//increments the price for the 4","th"," \n and 5","th","  record where type is dairy"," ","\n","UPDATE \n flags set a1=a2,a2=a1 where a1<a2;"," \n ","//Swap the values in \n the a1 and a2 columns where a1 is less than a2","\n","U","PDATE groceries JOIN products ON ","groceries.id","==products.grocery_id \n SET","\n","price=products.price \n WHERE type == \"dairy\";"," ","// Sets the price \n from the","\n","products table onto the groceries table where \n the ids match.","\n\n\n","\n    "," ","\n  ","\n\n"]],"3":[["Data Modi","fication"]],"4":[["insert_values_c","lause"],["insert_from_clause"],["sync_ \n clause"],["delete_from_clause"],["truncate_clause"],["update_clause"]],"6":[["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"],["OVERVIEW"],["SYNTAX"],["EXAMPLES"]],"id":"174"})