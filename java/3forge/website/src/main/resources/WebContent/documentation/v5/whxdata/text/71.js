rh._.exports({"0":[["F1 Text Matcher"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n  "],["\n  "],["\n  "," ","\n  ","The simplified text matching finds text entries using a simple pattern.  When included in AMI script, it takes the form:"," ","var ~~ \"my pattern\"","\n  "," ","\n  ","Rule 1, the general case:","The pattern supplied will match any text that contains the pattern, case insensitive.  For example, assuming ","word"," is a variable let's consider the expression: "," ","word ~~ \"AB\"",".  This will return true if word is ","cab"," or ","ABC"," or ","tabs"," but will return false if word is ","apple.","\n  "," ","\n  ","Rule 2, special symbols:","If you need to look for symbols besides letters, numbers or white space, prefix with a back slash.  For example, to look for the word ","P&L",", the expression is"," ","word ~~ \"P\\&L\"",". Note this includes the following list of symbols:"," ","*^$.[]()~|&!?:","\n  "," ","\n  ","Rule 3, Additional syntax:"," ","There are many special symbols that can be used for more advanced searches, for example the star (*) means anything, so "," ","\"f*g\""," ","will match any thing that has an f followed by g, such as  ","3FORGE.  See the following sections for more advanced syntax.","\n  "," ","\n  "],["\n  ","The following syntaxes are used to do \"basic\" matching against expressions with some text.","\n  "," ","\n  ","1. Simple matching"," ","Expression","\n  "," ","\n  ","Matches any text that contains the supplied pattern regardless of case. The following characters are reserved and may be embedded in the expression:","\n  "," ","\n  ","\n    ","\n      ","*"," ","- Anything",".  Can be expanded to include any text.","\n    ","\n    ","\n      ","^"," ","-"," ","Starts With",". Symbolizes the \"start\" of the text. In other words, if an expression starts with ^, then the text must start with the following expression. Please note that carets (","^",") not at the start of the expression will be treated as literals. (When used in conjunction with the tilde (","~","), the hat should follow the tilde.)","\n    ","\n    ","\n      ","$"," ","- ","Ends with",". Symbolizes the \"end\" of the text. In other words, if an expression ends with a dollar sign(","$",") then the text must end with the preceding expression. Please note that dollar signs not at the end of the expression will be treated as literals.","\n    ","\n    ","\n      ","."," ","- ","Any single char."," Will match to one character of any value.","\n    ","\n    ","\n      ","[","charlist","]","  Any of Chars."," ","Match any one of the characters enclosed within the brackets.","\n    ","\n    ","\n      ","~"," ","- Case Sensitive. If the first character, indicates that matching characters should be case sensitive.","\n    ","\n    ","\n      ","Escaped chars",": When referencing the following characters literally, they must be escaped with a back slash (\\): "," ","*^$.[]()~|&!?:"," ","\n    ","\n    ","\n      ","Literals:"," ","These are simply letter-for-letter matches to the expression","\n         ","\n    ","\n  ","\n  ","2. ","'","Exact Expression","'","\n  "," ","\n  ","Matches the exact expression supplied in quotes (other than an escaped quote using \\' ). This would be similar to using an equals ( == )","\n     ","\n  ","3. ","/regex/","<options>","/","\n  ","\n    This will use the java.util.regex package to match against regular expressions (see the java.util.regex.Pattern for details on building regular expressions). The <options> allow you to control behavior of how the regular expression operates. Simply supply the options you would like to apply in a continuous string between the 2","nd"," and last forward slash (/). The following options are supported:","\n  "," ","\n  ","\n    ","\n      ","q - Canonical Equivalence",". ","When this flag is specified, two characters will be considered to match if and only if their full canonical decompositions match. The expression"," ","\"a\\u030A\"",", for example, will match the string"," ","\"?\""," ","when this flag is specified. By default, matching does not take canonical equivalence into account.","\n    ","\n    ","\n      ","f"," - Full Line",". When this flag is specified, the text must fully match the regular expression. If this option is not specified, any portion of the text matching the expression will be considered a match.","\n    ","\n    ","\n      ","i - Case Insensitive",". By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. Unicode-aware case-insensitive matching can be enabled by specifying the ","u"," (Unicode case) flag in conjunction with this flag.","\n    ","\n    ","\n      ","c - Comments"," - ","White space is ignored, and embedded comments starting with"," ","#"," ","are ignored until the end of a line.","\n    ","\n    ","\n      ","l"," - Literal -"," ","White space is ignored, and embedded comments starting with"," ","#"," ","are ignored until the end of a line.","\n    ","\n    ","\n      ","d"," - Disable Dot All",". ","If the disable dot all flag is set then the dot expression"," (",".)"," will"," ","match any character except a line terminator. By default, the dot expression only matches line terminators.","\n    ","\n    ","\n      ","m"," - Multiline",". ","In multiline mode the expressions"," ","^"," ","and"," ","$"," ","match just after or just before, respectively, a line terminator or the end of the input sequence. By default, these expressions only match at the beginning and the end of the entire input sequence.","\n    ","\n    ","\n      ","u"," - unicode Case",". When this flag is specified, case-insensitive matching, enabled by the ","i"," (case insensitive) flag, is done in a manner consistent with the Unicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.","\n    ","\n    ","\n      ","x - Unix Lines",". ","In this mode, only the"," ","'\\n'"," ","line terminator is recognized in the behavior of"," ",".",","," ","^",", and"," ","$",".","\n    ","\n    ","\n      ","v"," - Not Matching",". Reverses the matching result. Expressions that normally would match will not match and expressions that would not normally match will match.","\n    ","\n    ","\n      ","n - No Error -"," If the regular expression is invalid do not throw an exception, instead just always return false, unless the v flag is also set, in which case always return true.","\n    ","\n  ","\n  "," ","\n  ","4. ","<null>","\n    ","Null String - providing null will result in a matcher which matches nothing.","\n  ","\n  "," ","\n  ","5. ","<Empty String>","\n      providing an empty (zero length) string to the Matcher method will result in a matcher which matches only the empty string. ","\n  "," ","\n  "],["\n  ","The following syntaxes allow for more complicated pattern matching. Nested syntaxes may also be conjugated syntaxes. For nested syntaxes which are basic syntaxes open parenthesis [ ( ] and close parenthesis [ ) ] must be escaped with a backslash [ \\ ].","\n  "," ","\n  ","6. ","(","Expression",")"," -"," ","The parenthesis can be used to force order of operations, important when mixing or [ | ]  and and [ & ] clauses.","\n  "," ","\n  ","7. ","Expression1","|","Expression2","\n      If either of the nested expressions match this expression will return true.","\n  ","8. ","Expression1","&","Expression2","\n      If both of the nested expressions match this expression will return true.","\n  ","9. ","!","Expression","\n    Inverts the result of the expression.","\n  ","10. ","(","Expression",") ? (","ExpressionTrue",")"," : ","(","ExpressionFalse",")","\n    If the ","Expression"," matches, return result of ","ExpressionTrue","  Otherwise return result of ","ExpressionFalse",".","\n  "," ","\n  "],["\n  "," ","\n  ","\n    ","\n      ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","\n          ","Expression            ","\n        ","\n        ","\n          ","Examples Match","\n        ","\n        ","\n          ","Examples Mismatch","\n        ","\n        ","\n          ","Comments","\n        ","\n      ","\n      ","\n        ","\n          ","FORG","\n        ","\n        ","\n          ","3Forge","\n        ","\n        ","\n          ","Frg","\n        ","\n        ","\n          ","Partial text, Case insensitive match","\n        ","\n      ","\n      ","\n        ","\n          ","~FORG","\n        ","\n        ","\n          ","FORGE","\n        ","\n        ","\n          ","forge","\n        ","\n        ","\n          ","Partial text, Case sensitive match","\n        ","\n      ","\n      ","\n        ","\n          ","^FORG$","\n        ","\n        ","\n          ","FORG","\n        ","\n        ","\n          ","FORGE","\n        ","\n        ","\n          ","Exact text, Case insensitive match","\n        ","\n      ","\n      ","\n        ","\n          ","~^Forge$","\n        ","\n        ","\n          ","Forge","\n        ","\n        ","\n          ","forge","\n        ","\n        ","\n          ","Exact text, Case sensitive match","\n        ","\n      ","\n      ","\n        ","\n          ","!FORG","\n        ","\n        ","\n          ","3FOR","\n        ","\n        ","\n          ","3FORGE","\n        ","\n        ","Escape partial text, case insensitive","\n      ","\n      ","\n        ","\n          ","!^FORG$","\n        ","\n        ","\n          ","FORGE","\n        ","\n        ","\n          ","FORG","\n        ","\n        ","Escape exact text, case insensitive","\n      ","\n      ","\n        ","\n          ","[RB]ob","\n        ","\n        ","\n          ","Bobby","\n        ","\n        ","\n          ","lob","\n        ","\n        ","\n          ","Using char list","\n        ","\n      ","\n      ","\n        ","\n          ","[A-Z]ob","\n        ","\n        ","\n          ","mob","\n        ","\n        ","\n          ","7ob","\n        ","\n        ","\n          ","Char list range","\n        ","\n      ","\n      ","\n        ","\n          ","3F*ge","\n        ","\n        ","\n          ","3Forge llc","\n        ","\n        ","\n          ","Forge llc","\n        ","\n        ","\n          ","Wild chars","\n        ","\n      ","\n      ","\n        ","\n          ","3f.ge","\n        ","\n        ","\n          ","3Frge","\n        ","\n        ","\n          ","3Forge llc","\n        ","\n        ","\n          ","Match single char","\n        ","\n      ","\n      ","\n        ","\n          ","Acme llc\\.","\n        ","\n        ","\n          ","Acme llc.","\n        ","\n        ","\n          ","Acme llcc","\n        ","\n        ","\n          ","Escaping special chars","\n        ","\n      ","\n      ","\n        ","\n          ","Rob|bob|dan","\n        ","\n        ","\n          ","robert","\n        ","\n        ","\n          ","ted","\n        ","\n        ","\n          ","Or clause partial match","\n        ","\n      ","\n      ","\n        ","\n          ","^Rob$|^Dan$","\n        ","\n        ","\n          ","rob","\n        ","\n        ","\n          ","robert","\n        ","\n        ","\n          ","Or clause, exact match","\n        ","\n      ","\n      ","\n        ","\n          ","bob&rob","\n        ","\n        ","\n          ","robob","\n        ","\n        ","\n          ","bobob","\n        ","\n        ","\n          ","And clause partial","\n        ","\n      ","\n      ","\n        ","\n          ","'Exact'","\n        ","\n        ","\n          ","Exact","\n        ","\n        ","\n          ","exact","\n        ","\n        ","\n          ","Exact case sensitive text match","\n        ","\n      ","\n      ","\n        ","\n          "," ","\n        ","\n        ","\n          "," ","\n        ","\n        ","\n          ","a","\n        ","\n        ","\n          ","Empty string, only matches empty string","\n        ","\n      ","\n      ","\n        ","\n          ","a?bb:s","\n        ","\n        ","\n          ","Abba","\n              test","\n        ","\n        ","\n          ","acca","\n              tent","\n        ","\n        ","\n          ","If contains 'a', must contain 'bb'","\n              If doesn't contain 'a', must contain 's'","\n        ","\n      ","\n      ","\n        ","\n          ","(a|b)&(e|f)","\n        ","\n        ","\n          ","af","\n        ","\n        ","\n          ","ab","\n        ","\n        ","\n          ","Must contain a or b. Also must contain e or f","\n        ","\n      ","\n      ","\n        ","\n          ","'abc'|'def'","\n        ","\n        ","\n          ","def","\n        ","\n        ","\n          ","DEF","\n        ","\n        ","\n          ","Must be exactly 'abc' or 'def'","\n        ","\n      ","\n      ","\n        ","\n          ","/reg/","\n        ","\n        ","\n          ","regular","\n        ","\n        ","\n          ","Regular","\n        ","\n        ","\n          ","By default, regex must be case sensitive","\n        ","\n      ","\n      ","\n        ","\n          ","/reg/i/","\n        ","\n        ","\n          ","Regular","\n        ","\n        ","\n          ","whatever","\n        ","\n        ","\n          ","I option makes case insensitive","\n        ","\n      ","\n      ","\n        ","\n          ","/reg//|3F","\n          "," ","\n        ","\n        ","\n          ","3F","\n              reg","\n        ","\n        ","\n          ","3Forge","\n              Regular","\n        ","\n        ","\n          ","Mixing regex and non regex","\n        ","\n      ","\n    ","\n  ","\n  "," ","\n  "," ","\n  "," ","\n  "],["\n  ","The following snippet of code will print out all of the strings in the textList list that contain the phrase \"my expression\". See the Syntax section below for the various types of expressions that could be applied the someExpression variable."," ","\n  "," ","\n  "," List<String> textList = ","someTextList;","\n  "," String someExpression = \"","my expression\"",";","\n  "," TextMatcher matcher ","SH.m(someExpression);","\n  "," for(String text:textList){","\n  ","   if(matcher.","matches","(text))","\n  ","   System.out.println(text);","\n  "," }","\n  "," ","\n\n","\n    "," ","\n  ","\n\n"]],"2":[["SimplifiedText Matching"]],"3":[["Overview"],["Syntax"],["Conjugated Syntaxes"],["Sample Expressions"],["Sample Usage"]],"id":"71"})