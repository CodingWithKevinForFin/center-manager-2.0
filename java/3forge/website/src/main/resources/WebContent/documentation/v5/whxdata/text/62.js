rh._.exports({"0":[["Standard Operators (in order of significance)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n"],["\n","(evaluates \n to num_var type)","\n","num_expr \n ","*"," \n ","num_expr","       "," ","multiplication"," ","\n","num_expr \n ","/"," \n ","num_expr","       "," ","division"," ","\n","num_expr \n ","%"," \n ","num_expr","       "," ","modulus (remainder)"," ","\n","num_expr \n ","+"," \n ","num_expr","       "," ","addition for numbers"," ","\n","num_expr ","-"," ","num_expr","       "," ","subtraction"," ","\n"," ","\n"],["\n","(evaluates \n to num_int_expr type)","\n","int_expr \n ","~"," \n ","int_expr","       "," ","bitwise NOT","\n","int_expr \n ","<<"," \n ","int_expr","      "," ","signed bit shift left"," ","\n","int_expr \n ",">>"," \n ","int_expr","      "," ","signed bit shift right"," ","\n","int_expr \n ",">>>"," ","int_expr","      ","unsigned \n bit shift right","\n","int_expr \n ","&"," \n ","int_expr","       "," ","bitwise AND"," ","\n","int_expr \n ","^"," \n ","int_expr","       "," ","bitwise XOR","\n","int_expr \n ","|"," \n ","int_expr","       "," ","bitwise OR","\n"," ","\n"],["\n","(evaluates \n to boolean)","\n","!","bool_expr","                "," ","boolean (logical) NOT","\n","expr ","<"," \n ","expr","                ","less \n than (strings are case sensitive)"," ","\n","expr ",">"," \n ","expr","               "," ","greater than (strings are case sensitive)"," ","\n","expr ","<="," \n ","expr","              "," ","less than or equal to (strings are case sensitive)"," ","\n","expr ",">="," \n ","expr","              "," ","greater than or equal to (strings are case sensitive)"," ","\n","expr ","=="," \n ","expr","              "," ","equal to (strings are case sensitive)"," ","\n","expr ","!="," \n ","expr","              "," ","is not"," "," ","equal to (strings \n are case sensitive)"," ","\n","expr ","=~"," \n ","regex","             "," ","matches regular expression (see Java Pattern for details)"," ","\n","expr ","!~"," \n ","regex","             "," ","does not match regular expression (see Java Pattern \n for details)","\n","expr"," ","~~"," ","simple_pattern","     simplified text matching. ","See ","Simplified \n Text Matching section",". ","\n","expr ","instanceof"," type","     ","  ","does expr evaluate to supplied type (eg: would casting \n succeed)","\n","expr ","&&"," \n ","expr","              "," ","logical and. Short circuits if left expr returns false. \n Short circuits if right expr is const and false"," ","\n","expr ","||"," ","expr","              "," ","logical \n or. Short circuits if left expr returns true. Short circuits if right \n expr is const and true","\n"," ","\n"],["\n","(evaluates \n to boolean)","\n","string_expr+"," ","expr","        "," ","String \n concatenation.  Null values equate to empty string (\"\")"," ","\n"," ","\n"],["\n","(expression)                          ","Force \n Order of operations"," ","\n","array_of_type[num_expr]               ","Array index referencing","\n","(type)statement                       ","Explicit cast to type. Note that a failed cast returns \n null. Also, casting is automatic, so it's not necessary","\n","bool_expr ? \n tr_expr : fl_expr         ","If bool_expr returns true, then evaluates to tr_expr, otherwise \n evaluates to fl_expr.","\n"," ","\n"," ","\n","Examples","\n","Long n = (10 + 5) * 2;"," "," ","//n is 30"," ","\n","n \n += 5;","                "," ","//n is 35"," ","\n","n \n = n/2;","               "," ","//n is 17"," ","\n","Boolean \n b = n>10;","      "," ","//b is true (n is still 17)","\n","b \n =! b;","                "," ","//b is false"," ","\n","b \n = (b || true) && true;","//b is true","         ","\n","String test = \n \"hello\" + \"world\";"," \n ","//test is helloworld"," ","\n"," ","\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Standard Operators (in order of \n significance)"]],"3":[["math_expressions"],["binary_expressions"],["boolean_expressions"],["string_expressions"],["special_expressions"]],"id":"62"})