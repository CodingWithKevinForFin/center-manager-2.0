rh._.exports({"0":[["Overview"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n","AMI \n is an extendable platform such that java plugins can be integrated at \n various touch points throughout the product. There are various types of \n plugins, each for supporting a particular purpose. Regardless of type, \n there are certain guidelines to follow when embedding a plugin into AMI:","\n","1.","      "," Write \n a Java class which implements the appropriate interface.","\n","a. The various interfaces are discussed \n in the following sections.","\n","b. Each plugin should have a universally \n unique ID, returned by ","getPluginId()","\n","c. Many plugins operate as \"factories\" \n which create instances of class. For example the Datasource Plugin creates \n Datasource Adapters on demand","\n","d. The compiled class(es) must be \n added to the classpath. This is most easily done by bundling them into \n a jar and placing the jar in the ","lib"," \n directory. All jars in the lib directory are automatically added to the \n class path","\n","2.","      "," Add \n the fully qualified Java class name to the appropriate property.","\n","a.","  ","The \n name of the property coincides with the type of plugin","\n","b. Defaults for a given plugin type \n are found in the ","config/defaults.properties"," file. You should override \n the property in the ","config/local.properties"," file).","\n"," ","\n","In \n all cases, the plugins indirectly implement the ","AmiPlugin"," interface.  Plugins \n are instantiated and initialized during startup, such that the failure \n of a plugin to startup will cause AMI to hard fail on startup. The exact \n reason for failure can be found in the log files.","\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Overview"]],"id":"260"})