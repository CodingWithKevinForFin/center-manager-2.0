rh._.exports({"0":[["Accessing Dashboard Objects"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n"],["\n","When AmiScript is used to change an Object in a dashboard, \n it is considered overriding a default value. This is an important distinction \n from changing an Object using editor mode. This prevents AmiScript from \n changing the permanent definition of a layout. In other words, layouts \n are built using editor mode. They are then temporarily modified using \n AmiScript.","\n"," ","\n","For example, if you were to move a field by dragging it in \n editor mode, that would have a lasting effect on the dashboard (doing \n a diff across history, you would see a change to the layout file). If \n you were to move the field using AmiScript, that would be temporary. In \n this case, rebuilding the  layout would cause the field to snap \n back to the original position.","\n"],["\n","Panels, Datamodels, Relationships within AMI have unique identifiers \n used to identify objects within a layout. The Identifier is assigned when \n creating the object and can be changed in developer mode. These identifiers \n are useful for referencing objects within AmiScript and as a convenient \n labeling system for organizing/searching objects. Note: the unique restriction \n only applies to objects of the same type, for example, a datamodel and \n relationship can have the same ID.","\n"],["\n","A dashboard can be composed of many Layout files, but each \n layout file must also have a unique layout alias. It's possible to have \n a dashboard with two separate layouts both with an object of the same \n type and ID. Uniqueness of an objects' identity is still maintained by \n considering the object's owning layout's alias plus the object's ID, referred \n to as an alias-dot-id notation.","\n"],["\n","Keep in mind that all objects are \"owned\" by a layout \n object and a dashboard can be composed of many layout files. As such, \n objects are accessed using the Layout object. Likewise, all dashboard \n objects have a getLayout() method for accessing the owning layout. See \n ","Layout"," topic for more details","\n","\n\n\n\n","\n    "," ","\n  ","\n\n"]],"2":[["Accessing Dashboard Objects"]],"4":[["Mutating Dashboard Objects via AmiScript"],["Object Identifiers"],["Layout Alias & Alias-Dot-Id"],["Accessing Objects in Multi-Layout Dashboards"]],"id":"32"})