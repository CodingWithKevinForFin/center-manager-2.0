rh._.exports({"0":[["formatDate(unixEpoch,pattern)"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n","\n","\n"],["\n","formatDate(","number unixEpoch, String pattern",")","\n","\n"],["\nFormats the supplied unix epoch time to a legible string date/time based on the supplied pattern. The pattern is constructed by combining words listed below\n","Pattern","\nWords for including number components. (Note: Including fewer repeating characters will result in variable-width formatting while extra repeating chars will pad with unncessary extra zeros):\n","\n","yy"," - 2 Digit Year","\n","yyyy"," - 4 Digit Year","\n","MM"," - Month in year","\n","ww"," - Week in year","\n","WW"," - Week in month","\n","DDD"," - Day in year","\n","dd"," - Day in month","\n","FF"," - Day of week in month","\n","HH"," - Hour in day ranging from 0-23","\n","kk"," - Hour in day ranging from 1-24","\n","KK"," - Hour in AM/PM ranging from 0-11","\n","hh"," - Hour in AM/PM ranging from 1-12","\n","mm"," - Minute in hour","\n","ss"," - Second in minute","\n","SSS"," - Millisecond","\n","rrr"," - Microsecond (Note: See below section on supplying unix epoch time)","\n","RRR"," - Nanosecond (Note: See below section on supplying unix epoch time)","\n","\n","Words for including text components:","\n","\n","M"," - Month in year as 3 letter code. Ex: ","Jan","\n","MMMM"," - Month in year as full name. Ex: ","January","\n","E"," - Day in week as 3 letter code. Ex: ","Mon","\n","EEEE"," - Day in week as full name. Ex: ","Monday","\n","z"," - Time zone code Ex: ","EST","\n","zzzz"," - Time zone full name. Ex: ","Eastern Standard Time","\n","Z"," - Timezone offset from UTC in hours and minutes, of the form [+-]hhmm. Ex: ","-0500","\n","a"," - AM/PM marker. Ex: ","AM","\n","G"," - Era designator. Ex: ","AD","\n","\nSyntax for including literal text:\n","\n","''"," - Single quote. Ex: ","'","\n","'Some Text'"," - Literal text with quotes removed. Ex: ","Some Text","\n","non-letters"," - Interpreted as a literal. Ex: ",":","\n","\n","Supplying unix epoch time","\nWhen passing in the unixEpoch as a UTC or UTCN, the formatter will automatically understand the supplied precision. When Supplying as a number it is normally interpreted in milliseconds, unless the pattern calls for greater precision by using the letters ","r"," or ","R",":\n","\n","Nanoseconds"," -If the pattern contains the letter ","R"," the unix epoch time should be in ","nanoseconds"," since 1/1/1970","\n","Microseconds"," - If the pattern has ","r"," letter but not the letter ","R",", the unix epoch time should be in ","microseconds"," since 1/1/1970","\n","Milliseconds"," - If the pattern does not have the letter ","r"," nor the letter ","R"," the unix epoch time should be in ","millisecconds"," since 1/1/1970","\n","\n","\n","\n"],["\nString legible date/time based on supplied time and format","\n","\n"],["\n","\n","\n","number unixEpoch","\n","Number of milli,micro or nanoseconds since 1/1/1970 in UTC timezone, depending on pattern. If the pattern contains n then nanoseconds, If the pattern contains u then microseconds, otherwise milliseconds.","\n","\n","\n","String pattern","\n","Pattern string. See Letters above for details.","\n","\n","\n","\n","\n"],["\n","String r1 = formatDate(1464215270786L,\"yyyyMMdd-HH:mm:ss.SSS\"); ","// r1 == 20160525-18:27:50.786","\nString r2 = formatDate(1464215270786L,\"MMMM/dd/yyyy-HH:mm:ss zzz\"); ","// r2 == May/25/2016-18:27:50 EDT","\nString r3 = formatDate(1540407446123456L,\"MMMM/dd/yyyy-HH:mm:ss.SSS.rrr zzz\"); ","// r3 == October/24/2018-14:57:26.123.456 EDT","\nString r4 = formatDate(1540407446123456789L,\"MMMM/dd/yyyy-HH:mm:ss.SSS.rrr.RRR zzz\"); ","// r4 == October/24/2018-14:57:26.123.456.789 EDT","\nString r5 = formatDate(113232L,\"HH:mm:ss\"); ","// r5 == 19:01:53","\n","\n\n\n","\n    "," ","\n  ","\n\n"]],"4":[["Definition"],["Description"],["Return Value"],["Parameter Definition"],["Examples"]],"id":"114"})