rh._.exports({"0":[["Capacity Planning"]],"1":[["\n  ","\n    ","\n      ","⚠"," This page has been deprecated. Please visit ","New 3forge Documentation"," for updated content.","\n    ","\n  ","\n  ","\n"],["\n","AMI In-memory database \n Capacity Planning","\n"," ","\n","Below is the formula to use for calculating the \n amount of memory to expect public tables to consume, based on the types \n of data being stored. For total capacity planning of the AMI in memory \n database, one should run this on each table and aggregate the results.","\n"," ","\n","table_size_mb"," ","= row_cnt x (128 + data_size + idx_cnt \n * 100 + null_col_cnt * 1/8 ) / 1,048,576","\n","table_suggested_capacity_mb","= \n ","total_size_mb"," \n * 2","\n","      "," ","table_size_mb"," \n = the total number meg you can expect the table to require","\n","       ","table_suggested_capacity_mb"," \n = 3Forge Recommendation for hardware capacity planning","\n","row_cnt","= \n number of rows","\n","idx_cnt","= \n number of indexes on the table, composite indexes are larger","\n","null_col_cnt","= \n number of non-string columns that allow null","\n","data_size","= sum(column_type_sizes)"," "," See \n column types below","\n"," ","\n","\n\t","\n\t","\n\t","\n\t\t","Column Type","\n\t\t","Data \n\t\t Size (bytes)","\n\t","\n\t","\n\t\t","UTC,UTCN,Double,Long","\n\t\t","8","\n\t","\n\t","\n\t\t","Int,Float","\n\t\t","4","\n\t","\n\t","\n\t\t","Char, Short","\n\t\t","2","\n\t","\n\t","\n\t\t","Byte","\n\t\t","1","\n\t","\n\t","\n\t\t","Boolean","\n\t\t","1/8","\n\t","\n\t","\n\t\t","Enum (legacy)","\n\t\t","4","\n\t","\n\t","\n\t\t","String bitmap under 256 \n\t\t unique values","\n\t\t","1","\n\t","\n\t","\n\t\t","String bitmap 256 to 65536 \n\t\t unique values","\n\t\t","2","\n\t","\n\t","\n\t\t","String bitmap over 65536 \n\t\t unique values","\n\t\t","3","\n\t","\n\t","\n\t\t","String Compact","\n\t\t","String \n\t\t Size * 2 + 6 bytes","\n\t","\n\t","\n\t\t","String Compact Ascii","\n\t\t","String \n\t\t Size * 1 + 5 bytes","\n\t","\n\t","\n\t\t","String","\n\t\t","String Size \n\t\t * 2 + 64 bytes","\n\t","\n\t","\n\t\t","Binary","\n\t\t","Length \n\t\t in Bytes + 56 bytes","\n\t","\n\t","\n\t\t","String OnDisk","\n\t\t","8","\n\t","\n\t","\n\t\t","Binary OnDisk","\n\t\t","8","\n\t","\n\t","\n\t\t","BIGDECIMAL"," \n\t\t ","\n\t\t","68+size of number \n\t\t in bytes"," ","\n\t","\n\t","\n\t\t","BIGINTEGER"," \n\t\t ","\n\t\t","64+size of number \n\t\t in bytes"," ","\n\t","\n\t","\n\t\t","COMPLEX"," \n\t\t ","\n\t\t","68","\n\t","\n\t","\n\t\t","UUID"," \n\t\t ","\n\t\t","64","\n\t","\n","\n"," ","\n","Capacity Planning Example","\n"," ","\n","100,000,000 \n Executions"," ","= \n ~","25 \n GB RAM USED"," \n = Suggested ~","50GB \n of RAM"," \n ","be reserved",".","\n","B","elow, we walk through the math \n given the below table, assuming 10 million executions and 1 index on symbol.","\n","AMIDB> \n show table Execution;","\n","+","-------------------------------------------------+","\n","|","                    "," COLUMNS","                    "," |","\n","+----------+-------+--------+-------+-------------+","\n","|ColumnName|Type","  "," |Position|NoNull \n |Options","     "," |","\n","|String","   "," |String \n |Integer |Boolean|String","    "," ","  ","|","\n","+----------+-------+--------+-------+-------------+","\n","|timenanos \n |UTCN","  "," |0","      "," |false"," "," |nonull","      "," | \n ","//","8"," \n bytes","\n","|price","    "," |Float"," "," |1","      "," |false"," "," |","     "," ","       ","| \n ","//","4"," \n bytes","\n","|qty","      "," |Integer|2","      "," |false"," "," |nonull","      "," | \n ","//","4"," \n bytes","\n","|extype","   "," |String \n |3","      "," |true","  "," |Bitmap","      "," | \n ","//assume \n 20 types, ","1"," byte","\n","|symbol","   "," |String \n |4","      "," |true","  "," |Bitmap nonull| \n ","//assume \n 10,000 symbols, ","2"," \n bytes","\n","|account","  "," |String |5","      "," |true","  "," |Bitmap","      "," | \n ","//assume 100,000 accounts, ","3"," bytes","\n","|orderid","  "," |String |6","      "," |true","  "," |Compact ascii| \n ","//average \n size = 16, ","21"," \n bytes","\n","+----------+-------+--------+-------+-------------+","\n"," ","\n","AMIDB> \n select count(*) from Execution;","\n","+----------+","\n","|Execution \n |","\n","+----------+","\n","|count_","  ","  |","\n","|Long","    ","  |","\n","+----------+","\n","|100000000 \n |","\n","+----------+","\n"," ","\n","AMIDB> \n show indexes where TableName==\"Execution\";","\n","+---------------------------------------------------------------------------+","\n","|","                                 "," INDEXES","                                 "," |","\n","+---------+---------+----------+---------+-------------+----------+---------+","\n","|IndexName|TableName|ColumnName|IndexType|IndexPosition|Constraint|DefinedBy|","\n","|String","  "," |String","  "," |String","   "," |String","  "," |String","      "," |String","   "," |String","  "," |","\n","+---------+---------+----------+---------+-------------+----------+---------+","\n","|sym","     "," |Execution|symbol","   "," |HASH","    "," |0","           "," |NONE","     "," |USER","    "," |","\n","+---------+---------+----------+---------+-------------+----------+---------+","\n"," ","\n","row_cnt = 100,000,000","\n","idx_cnt = 1","\n","null_col_cnt = 1","\n","data_size = 8+4+4+1+2+3+21 = 43","\n"," ","\n","table_size_mb = 100,000,000 * (128 + \n 43 + 1 * 100 + 1 * 1/8) / 1,048,576 = 25,850 mb","\n"," ","\n","table_suggested_capacity_mb \n = 25,850 * 2 = 51,700 =~ 50 gb","\n"," ","\n"," ","\n","100,000,000 \n Executions & Associated Memory Usage","\n"," ","\n","\n"," ","\n","Large Capacity \n Planning Example","\n"," ","\n","Test of 20,000,000,000 (20 billion) cells using 33 \n columns x 607,000,000 rows = ","~171 \n GM RAM"," Used = Suggested ","~ \n 342 GB RAM"," be reserved.","\n","         ","\n","AMIDB> \n show table captest2","\n","+---------------------------------------------------+","\n","|","                     "," COLUMNS","                     "," |","\n","+----------+---------+--------+-------+-------------+","\n","|ColumnName|Type","    "," |Position|NoNull \n |Options","     "," |","\n","|String","   "," |String","  "," |Integer |Boolean|String","      "," |","\n","+----------+---------+--------+-------+-------------+","\n","|i1","       "," |Integer"," "," |0","      "," |true","  "," | ","            ","|","//4 bytes","\n","|i2","       "," |Integer"," "," |1","      "," |true","  "," |","            "," |","//4 bytes","\n","|i3","       "," |Integer"," "," |2","      "," |true","  "," |","            "," |","//4 bytes","\n","|l1","       "," |Long","    "," |3","      "," |true","  "," |","            "," |","//8 bytes","\n","|l2","       "," |Long","    "," |4","      "," |true","  "," |","    "," ","        ","|","//8 bytes","\n","|l3","       "," |Long","    "," |5","      "," |true","  "," |","            "," |","//8 bytes","\n","|f1","       "," |Float","   "," |6","      "," |true","  "," |","            "," |","//4 bytes","\n","|f2","       "," |Float","   "," |7","      "," |true","  "," |","            "," |","//4 bytes","\n","|f3","       "," |Float","   "," |8","      "," |true","  "," |","        "," ","    ","|","//4 bytes","\n","|d1","       "," |Double","  "," |9","      "," |true","  "," |","            "," |","//8 bytes","\n","|d2","       "," |Double","  "," |10","     "," |true","  "," |","            "," |","//8 bytes","\n","|d3","       "," |Double","  "," |11","     "," |true","  "," |","            "," |","//8 bytes","\n","|u1","       "," |UTC","     "," |12","     "," |true","  "," |","            "," |","//8 bytes","\n","|u2","       "," |UTC","     "," |13","     "," |true","  "," |","            "," |","//8 bytes","\n","|u3","       "," |UTC","     "," |14","     "," |true","  "," |","            "," |","//8 bytes","\n","|n1","       "," |UTCN","    "," |15","     "," |true","  "," |","            "," |","//8 bytes","\n","|n2","       "," |UTCN","    "," |16","     "," |true","  "," |","            "," |","//8 bytes","\n","|n3","       "," |UTCN","    "," |17","     "," |true","  "," |","            "," |","//8 bytes","\n","|c1","       "," |Character|18","     "," |true","  "," |","            "," |","//2 bytes","\n","|c2","       "," |Character|19","     "," |true","  "," |","            "," |","//2 bytes","\n","|c3","       "," |Character|20","     "," |true","  "," |","            "," |","//2 bytes","\n","|b1","       "," |Boolean"," "," |21","     "," |true","  "," |","            "," |","//1/8 bytes","\n","|b2","       "," |Boolean"," "," |22","     "," |true","  "," |","            "," |","//1/8 bytes","\n","|b3","       "," |Boolean"," "," |23","     "," |true","  "," |","            "," |","//1/8 bytes","\n","|sc1","      "," |String","  "," |24","     "," |true","  "," |ascii compact|","//average size = \n 6, 8 bytes","\n","|sc2","      "," |String","  "," |25","     "," |true","  "," |ascii compact|","//average size = \n 6, 8 bytes","\n","|sc3","      "," |String","  "," |26","     "," |true","  "," |ascii compact|","//average size = \n 6, 8 bytes","\n","|sb1","      "," |String","  "," |27","     "," |true","  "," |bitmap","      "," |","//20 types, 1 byte","\n","|sb2","      "," |String","  "," |28","     "," |true","  "," |bitmap","      "," |","//20 types, 1 byte","\n","|sb3","      "," |String","  "," |29","     "," |true","  "," |bitmap","      "," |","//20 types, 1 byte","\n","|e1","       "," |Enum","    "," |30","     "," |true","  "," |","            "," |","//4 bytes","\n","|e2","       "," |Enum","    "," |31","     "," |true","  "," |","   "," ","         ","|","//4 bytes","\n","|e3","       "," |Enum","    "," |32","     "," |true","  "," |","            "," |","//4 bytes","\n","+----------+---------+--------+-------+-------------+","\n"," ","\n"," ","\n","row_cnt = 607,000,000","\n","null_col_cnt = 24","\n","data_size = 4+4+4+8+8+8+4+4+4+8+8+8+8+8+8+8+8+8+2+2+2+1/8+1/8+8+8+8+1+1+1+4+4+4 \n = 156 & 3/8","\n"," ","\n","table_size_mb = 1 * (128 + ~157 + 24 \n * 1/8) / 1,048,576 = ","171,143 \n mb","\n"," ","\n","table_suggested_capacity_mb \n = 171,143 * 2 = 342,286 mb =~ ","342 gb","\n"," ","\n","\n\n\n","\n    "," ","\n  ","\n\n"]],"3":[["Capacity Planning"]],"id":"223"})