package com.f1.console.impl;import java.io.File;import java.io.IOException;import com.f1.console.ConsoleConnection;import com.f1.console.ConsoleSession;import com.f1.console.impl.shell.ShellAutoCompletion;import com.f1.utils.IOH;import com.f1.utils.OH;import com.f1.utils.SH;public class RunBatchProcessConsoleService extends AbstractConsoleService {	public RunBatchProcessConsoleService() {		super("RUN", "RUN +(.*)", "RUN file1 [morefiles ...]  - runs the contents of a file");	}	@Override	public void doRequest(ConsoleSession session, String[] options) {		final ConsoleConnection connection = session.getConnection();		for (int i = 1; i < options.length; i++) {			final File file = new File(options[i]);			if (!file.exists()) {				connection.comment(ConsoleConnection.COMMENT_ERROR, "file not found: " + options[1]);			} else				try {					String lines[] = SH.splitLines(IOH.readText(file));					connection.comment(ConsoleConnection.COMMENT_PROGRESS, "Running batch file: " + IOH.getFullPath(file));					for (int j = 0; j < lines.length; j++) {						String line = lines[j];						int startLineNumber = j + 1;						if (SH.isnt(line))							continue;						if (line.startsWith("#")) {							if (!line.startsWith("##")) {								connection.comment(ConsoleConnection.COMMENT_PROGRESS, line.substring(1));							}							continue;						}						while (SH.endsWith(line, '\\'))							line = SH.stripSuffix(line, "\\", true) + SH.NEWLINE + lines[++j];						int endLineNumber = j + 1;						if (endLineNumber != startLineNumber)							connection.comment(ConsoleConnection.COMMENT_PROGRESS, "Running line [" + startLineNumber + "-" + endLineNumber + "]");						else							connection.comment(ConsoleConnection.COMMENT_PROGRESS, "Running line [" + startLineNumber + "]");						connection.processLine(line, false);					}				} catch (IOException e_) {					throw OH.toRuntime(e_);				}		}	}	@Override	public boolean canAutoComplete(String partialText) {		return canProcessRequest(partialText);	}	@Override	public ShellAutoCompletion autoComplete(ConsoleSession session, String partialText) {		BasicTelnetAutoCompletion r = new BasicTelnetAutoCompletion(partialText);		String parts[] = super.parsePattern(partialText);		String filePath = SH.beforeLast(parts[1], "/", ".");		if (filePath.isEmpty())			filePath = "/";		File directory = new File(filePath);		if (!directory.isDirectory())			return r;		String filePattern = SH.afterLast(parts[1], "/", parts[1]);		for (String file : directory.list()) {			if (file.startsWith(filePattern)) {				if (new File(directory, file).isDirectory())					r.add(file.substring(filePattern.length()) + "/");				else					r.add(file.substring(filePattern.length()));			}		}		return r;	}}