package com.f1.console.impl;import java.util.ArrayList;import java.util.Collections;import java.util.List;import com.f1.console.impl.shell.ShellAutoCompletion;import com.f1.utils.SH;import com.f1.utils.structs.Tuple2;public class BasicTelnetAutoCompletion implements ShellAutoCompletion {	final private List<Tuple2<Boolean, String>> autoCompletion = new ArrayList<Tuple2<Boolean, String>>();	final private String prefix;	private String autoComplete = null;	private String text = null;	public BasicTelnetAutoCompletion(String prefix) {		this.prefix = prefix;	}	public void buildAutoComplete() {		final List<String> t = new ArrayList<String>(autoCompletion.size());		for (final Tuple2<Boolean, String> e : autoCompletion)			if (e.getA())				t.add(e.getB());		this.autoComplete = getCommonPrefix(t);		final int startIndex = autoComplete.length();		final StringBuilder sb = new StringBuilder(autoCompletion.size() * 10);		String p = prefix + this.autoComplete;		List<String> parts = new ArrayList<String>();		for (final Tuple2<Boolean, String> s : autoCompletion) {			SH.clear(sb);			final String txt = s.getB();			if (!s.getA())				parts.add(sb.append("  ").append(p).append(txt).append(TelnetConstants.NEWLINE).toString());			else if (txt.length() != startIndex)				parts.add(sb.append("  ").append(p).append(txt, startIndex, txt.length()).append(TelnetConstants.NEWLINE).toString());		}		Collections.sort(parts, SH.COMPARATOR_CASEINSENSITIVE_STRING);		this.text = SH.join("", parts);	}	@Override	public String getAutoCompletion() {		if (text == null)			buildAutoComplete();		return this.autoComplete;	}	@Override	public String getText() {		if (text == null)			buildAutoComplete();		return this.text;	}	public void add(String text) {		for (final Tuple2<Boolean, String> s : autoCompletion)			if (s.getA() && s.getB().equals(text))				return;		autoCompletion.add(new Tuple2<Boolean, String>(true, text));	}	public void addComment(String comment) {		autoCompletion.add(new Tuple2<Boolean, String>(false, comment));	}	public boolean isEmpty() {		return this.autoCompletion.isEmpty();	}	public static String getCommonPrefix(List<String> r) {		if (r.size() == 0)			return "";		String left = r.get(0);		int len = left.length();		for (int i = 1; i < r.size() && len > 0; i++) {			String right = r.get(i);			if (len > right.length())				len = right.length();			for (int j = 0; j < len; j++) {				if (left.charAt(j) != right.charAt(j)) {					len = j;					break;				}			}		}		return r.get(0).substring(0, len);	}}