package com.f1.suite.web.portal.impl.form;import java.util.Map;import com.f1.suite.web.JsFunction;import com.f1.utils.CH;import com.f1.utils.OH;import com.f1.utils.casters.Caster_Boolean;public class FormPortletCheckboxField extends FormPortletField<Boolean> {	public static final int DEFAULT_DIM = 16;	public FormPortletCheckboxField(String title) {		super(Boolean.class, title);		setDefaultValue(Boolean.FALSE);		setWidthPx(DEFAULT_DIM);		setHeightPx(DEFAULT_DIM);	}	public FormPortletCheckboxField(String title, boolean b) {		this(title);		setValue(b);	}	@Override	public String getjsClassName() {		return "CheckboxField";	}	@Override	public FormPortletCheckboxField setValue(Boolean value) {		super.setValue(value);		return this;	}	@Override	public boolean onUserValueChanged(Map<String, String> attributes) {		final Boolean value = CH.getOrThrow(Caster_Boolean.INSTANCE, attributes, "value");		if (OH.eq(this.getValue(), value))			return false;		setValueNoFire(value);		return true;	}	public boolean getBooleanValue() {		Boolean value = getValue();		return value == null ? false : value.booleanValue();	}	public FormPortletCheckboxField setCorrelationData(Object correlationData) {		super.setCorrelationData(correlationData);		return this;	}	@Override	public FormPortletCheckboxField setName(String name) {		super.setName(name);		return this;	}	@Override	public int getDefaultHeight() {		return DEFAULT_DIM;	}	@Override	public int getDefaultWidth() {		return DEFAULT_DIM;	}	@Override	public void updateJs(StringBuilder pendingJs) {		JsFunction jsFunction = new JsFunction(pendingJs);		super.updateJs(pendingJs);		//below checks for Cssstyle change for checkbox field		if (hasChanged(MASK_STYLE)) {			jsFunction.reset(jsObjectName, "setCssStyle").addParamQuoted(this.getCssStyle()).end();		}	}	@Override	protected String getStyle() {		if (style == null) {			StringBuilder temp = new StringBuilder();			// don't mangle cssStyle into field style for checkbox, this is handled separately			//			if (SH.is(this.cssStyle))			//				temp.append(this.cssStyle).append('|');			temp = getFieldStyles(temp);			temp = getBorderStyles(temp);			if (this.getBgColor() != null) {				if (temp.length() > 0)					temp.append("|");				temp.append("_bg=").append(this.getBgColor());			}			this.setStyle(temp.toString());		}		return style;	}}