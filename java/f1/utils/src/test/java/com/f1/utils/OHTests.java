package com.f1.utils;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.math.BigDecimal;import java.math.BigInteger;import java.util.ArrayList;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Random;import java.util.Set;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;import org.junit.Test;import com.f1.base.BasicTypes;import com.f1.base.ValuedEnum;import com.f1.utils.casters.Caster_Array;import com.f1.utils.casters.Caster_Double;import com.f1.utils.casters.Caster_Float;import com.f1.utils.casters.Caster_Integer;import com.f1.utils.casters.Caster_Long;import com.f1.utils.casters.Caster_Short;import com.f1.utils.casters.Caster_String;public class OHTests {	@Test	public void testEq() {		assertTrue(OH.eq(null, null));		for (int i = 0; i < 100000; i++) {			assertTrue(OH.eq(i, i));			assertTrue(OH.eq("" + i, "" + i));			assertTrue(OH.eq((char) i, (char) i));			assertTrue(OH.eq((double) i, (double) i));			assertTrue(OH.eq((long) i, (long) i));			assertTrue(OH.eq((float) i, (float) i));			assertFalse(OH.eq(i, i + 1));			assertFalse(OH.eq(i, "" + i));			assertTrue(OH.eq(i, (double) i));			assertTrue(OH.eq(i, (long) i));			assertTrue(OH.eq(i, (float) i));		}	}	@Test	public void testNe() {		assertFalse(OH.ne(null, null));		for (int i = 0; i < 100000; i++) {			assertFalse(OH.ne(i, i));			assertFalse(OH.ne("" + i, "" + i));			assertFalse(OH.ne((char) i, (char) i));			assertFalse(OH.ne((double) i, (double) i));			assertFalse(OH.ne((long) i, (long) i));			assertFalse(OH.ne((float) i, (float) i));			assertTrue(OH.ne(i, i + 1));			assertTrue(OH.ne(i, "" + i));		}	}	/*		 * Syntax issue?		 */	@Test	public void testForName() throws ClassNotFoundException {		assertEquals(Integer.class, OH.forName("java.lang.Integer"));	}	@Test	public void testAssertDouble() {		OH.assertEq(1d, 1d);		OH.assertEq(Double.NaN, Double.NaN);		OH.assertEq(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);		OH.assertEq(1f, 1f);		OH.assertEq(Float.NaN, Float.NaN);		OH.assertEq(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);	}	@Test	public void testAssertDoubleNe() {		OH.assertNe(1d, 2d);		OH.assertNe(Double.NaN, 1);		OH.assertNe(Double.NEGATIVE_INFINITY, 10);		OH.assertNe(1f, 2f);		OH.assertNe(Float.NaN, 1);		OH.assertNe(Float.NEGATIVE_INFINITY, 10);	}	@Test	public void testCompare() {		for (int i = 0; i < 1000000; i++) {			assertEquals(0, OH.compare(i, i));			assertEquals(1, OH.compare(i, i - 1));			assertEquals(-1, OH.compare(i, i + 1));		}		assertEquals(0, OH.compare(null, null));	}	@Test	public void testCompareBoolean() {		for (int i = 0; i < 1000000; i++) {			assertEquals(0, OH.compare(i, i, true));			assertEquals(1, OH.compare(i, i - 1, true));			assertEquals(-1, OH.compare(i, i + 1, true));			assertEquals(1, OH.compare(i, null, true));			assertEquals(-1, OH.compare(i, null, false));			assertEquals(-1, OH.compare(null, i, true));			assertEquals(1, OH.compare(null, i, false));		}		assertEquals(0, OH.compare(null, null, false));	}	/*		 * Problem here: Actual value never is equal to Expected value		 */	@Test	public void testCompareComparator() {		Comparator c = CH.COMPARATOR;		for (int i = -1000; i < 1000; i += 100) {			assertEquals(1, OH.compare(i, (i - 1), true, c));			assertEquals(-1, OH.compare(i, (i + 1), true, c));		}	}	@Test	public void testIsAssignable() {		assertTrue(OH.isAssignableFrom(Number.class, int.class));		assertTrue(OH.isAssignableFrom(Number.class, Integer.class));		assertTrue(OH.isAssignableFrom(String.class, String.class));		assertTrue(OH.isAssignableFrom(Object.class, String.class));		assertFalse(OH.isAssignableFrom(String.class, Object.class));		assertTrue(OH.isAssignableFrom(Map.class, HashMap.class));		assertTrue(Number.class.isAssignableFrom(Integer.class));		assertFalse(Number.class.isAssignableFrom(int.class));	}	@Test	public void testIsCoercable() {		assertTrue(OH.isCoercable(Object.class, String.class));		assertFalse(OH.isCoercable(String.class, Object.class));		assertTrue(OH.isCoercable(String.class, String.class));		assertTrue(OH.isCoercable(Map.class, HashMap.class));		assertTrue(OH.isCoercable(Integer.class, Integer.class));		assertTrue(OH.isCoercable(int.class, Integer.class));		assertTrue(OH.isCoercable(Integer.class, int.class));		assertTrue(OH.isCoercable(int.class, int.class));		for (OH.Prim c : OH.getPrims()) {			assertTrue(OH.isCoercable(c.boxedClass, c.boxedClass));			assertTrue(OH.isCoercable(c.boxedClass, c.primitiveClass));			assertTrue(OH.isCoercable(c.primitiveClass, c.boxedClass));			assertTrue(OH.isCoercable(c.primitiveClass, c.primitiveClass));		}		assertTrue(OH.isCoercable(Object.class, int.class));		assertTrue(OH.isCoercable(Object.class, Integer.class));		assertTrue(OH.isCoercable(Double.class, Double.class));		assertTrue(OH.isCoercable(Double.class, Float.class));		assertTrue(OH.isCoercable(Double.class, Long.class));		assertTrue(OH.isCoercable(Double.class, Integer.class));		assertTrue(OH.isCoercable(Double.class, Short.class));		assertTrue(OH.isCoercable(Double.class, Byte.class));		assertTrue(OH.isCoercable(Double.class, Character.class));		assertFalse(OH.isCoercable(Double.class, Boolean.class));		assertFalse(OH.isCoercable(Float.class, Double.class));		assertTrue(OH.isCoercable(Float.class, Float.class));		assertTrue(OH.isCoercable(Float.class, Long.class));		assertTrue(OH.isCoercable(Float.class, Integer.class));		assertTrue(OH.isCoercable(Float.class, Short.class));		assertTrue(OH.isCoercable(Float.class, Byte.class));		assertTrue(OH.isCoercable(Float.class, Character.class));		assertFalse(OH.isCoercable(Float.class, Boolean.class));		assertFalse(OH.isCoercable(Long.class, Double.class));		assertFalse(OH.isCoercable(Long.class, Float.class));		assertTrue(OH.isCoercable(Long.class, Long.class));		assertTrue(OH.isCoercable(Long.class, Integer.class));		assertTrue(OH.isCoercable(Long.class, Short.class));		assertTrue(OH.isCoercable(Long.class, Byte.class));		assertTrue(OH.isCoercable(Long.class, Character.class));		assertFalse(OH.isCoercable(Long.class, Boolean.class));		assertFalse(OH.isCoercable(Integer.class, Double.class));		assertFalse(OH.isCoercable(Integer.class, Float.class));		assertFalse(OH.isCoercable(Integer.class, Long.class));		assertTrue(OH.isCoercable(Integer.class, Integer.class));		assertTrue(OH.isCoercable(Integer.class, Short.class));		assertTrue(OH.isCoercable(Integer.class, Byte.class));		assertTrue(OH.isCoercable(Integer.class, Character.class));		assertFalse(OH.isCoercable(Integer.class, Boolean.class));		assertFalse(OH.isCoercable(Short.class, Double.class));		assertFalse(OH.isCoercable(Short.class, Float.class));		assertFalse(OH.isCoercable(Short.class, Long.class));		assertFalse(OH.isCoercable(Short.class, Integer.class));		assertTrue(OH.isCoercable(Short.class, Short.class));		assertTrue(OH.isCoercable(Short.class, Byte.class));		assertFalse(OH.isCoercable(Short.class, Character.class));		assertFalse(OH.isCoercable(Short.class, Boolean.class));		assertFalse(OH.isCoercable(Byte.class, Double.class));		assertFalse(OH.isCoercable(Byte.class, Float.class));		assertFalse(OH.isCoercable(Byte.class, Long.class));		assertFalse(OH.isCoercable(Byte.class, Integer.class));		assertFalse(OH.isCoercable(Byte.class, Short.class));		assertTrue(OH.isCoercable(Byte.class, Byte.class));		assertFalse(OH.isCoercable(Byte.class, Character.class));		assertFalse(OH.isCoercable(Byte.class, Boolean.class));		assertFalse(OH.isCoercable(Character.class, Double.class));		assertFalse(OH.isCoercable(Character.class, Float.class));		assertFalse(OH.isCoercable(Character.class, Long.class));		assertFalse(OH.isCoercable(Character.class, Integer.class));		assertFalse(OH.isCoercable(Character.class, Short.class));		assertFalse(OH.isCoercable(Character.class, Byte.class));		assertTrue(OH.isCoercable(Character.class, Character.class));		assertFalse(OH.isCoercable(Character.class, Boolean.class));		assertFalse(OH.isCoercable(Boolean.class, Double.class));		assertFalse(OH.isCoercable(Boolean.class, Float.class));		assertFalse(OH.isCoercable(Boolean.class, Long.class));		assertFalse(OH.isCoercable(Boolean.class, Integer.class));		assertFalse(OH.isCoercable(Boolean.class, Short.class));		assertFalse(OH.isCoercable(Boolean.class, Byte.class));		assertFalse(OH.isCoercable(Boolean.class, Character.class));		assertTrue(OH.isCoercable(Boolean.class, Boolean.class));		assertFalse(OH.isCoercable(int.class, Double.class));		assertFalse(OH.isCoercable(int.class, Float.class));		assertFalse(OH.isCoercable(int.class, Long.class));		assertTrue(OH.isCoercable(int.class, Integer.class));		assertTrue(OH.isCoercable(int.class, Short.class));		assertTrue(OH.isCoercable(int.class, Byte.class));		assertTrue(OH.isCoercable(int.class, Character.class));		assertFalse(OH.isCoercable(int.class, Boolean.class));		assertFalse(OH.isCoercable(Integer.class, double.class));		assertFalse(OH.isCoercable(Integer.class, float.class));		assertFalse(OH.isCoercable(Integer.class, long.class));		assertTrue(OH.isCoercable(Integer.class, int.class));		assertTrue(OH.isCoercable(Integer.class, short.class));		assertTrue(OH.isCoercable(Integer.class, byte.class));		assertTrue(OH.isCoercable(Integer.class, char.class));		assertFalse(OH.isCoercable(Integer.class, boolean.class));	}	@Test	public void testGetWidest() {		assertEquals(Object.class, OH.getWidest(CH.l(Character.class, Byte.class)));		assertEquals(Character.class, OH.getWidest(CH.l(Character.class, char.class)));		assertEquals(float.class, OH.getWidest(CH.l(int.class, float.class)));		assertEquals(Float.class, OH.getWidest(CH.l(int.class, Float.class)));		assertEquals(Byte.class, OH.getWidest(CH.l(Byte.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Byte.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Byte.class, Boolean.class)));		assertEquals(Short.class, OH.getWidest(CH.l(Byte.class, Short.class)));		assertEquals(Integer.class, OH.getWidest(CH.l(Byte.class, Integer.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Byte.class, Long.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Byte.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Byte.class, Double.class)));		assertEquals(Short.class, OH.getWidest(CH.l(Short.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Short.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Short.class, Boolean.class)));		assertEquals(Short.class, OH.getWidest(CH.l(Short.class, Short.class)));		assertEquals(Integer.class, OH.getWidest(CH.l(Short.class, Integer.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Short.class, Long.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Short.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Short.class, Double.class)));		assertEquals(Integer.class, OH.getWidest(CH.l(Integer.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Integer.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Integer.class, Boolean.class)));		assertEquals(Integer.class, OH.getWidest(CH.l(Integer.class, Short.class)));		assertEquals(Integer.class, OH.getWidest(CH.l(Integer.class, Integer.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Integer.class, Long.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Integer.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Integer.class, Double.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Long.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Long.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Long.class, Boolean.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Long.class, Short.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Long.class, Integer.class)));		assertEquals(Long.class, OH.getWidest(CH.l(Long.class, Long.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Long.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Long.class, Double.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Float.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Float.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Float.class, Boolean.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Float.class, Short.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Float.class, Integer.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Float.class, Long.class)));		assertEquals(Float.class, OH.getWidest(CH.l(Float.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Float.class, Double.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Byte.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Double.class, Character.class)));		assertEquals(Object.class, OH.getWidest(CH.l(Double.class, Boolean.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Short.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Integer.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Long.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Float.class)));		assertEquals(Double.class, OH.getWidest(CH.l(Double.class, Double.class)));		assertEquals(String.class, OH.getWidest(CH.l(String.class, String.class)));		assertEquals(String.class, OH.getWidest(CH.l(String.class, Double.class)));		assertEquals(String.class, OH.getWidest(CH.l(String.class, Object.class)));	}	@Test	public void testIsBoxed() {		assertFalse(OH.isBoxed(null));		assertFalse(OH.isBoxed(Object.class));		assertFalse(OH.isBoxed(String.class));		assertFalse(OH.isBoxed(Map.class));		assertTrue(OH.isBoxed(Character.class));		assertTrue(OH.isBoxed(Short.class));		assertTrue(OH.isBoxed(Integer.class));		assertTrue(OH.isBoxed(Float.class));		assertTrue(OH.isBoxed(Double.class));		assertTrue(OH.isBoxed(Long.class));		assertTrue(OH.isBoxed(Byte.class));		assertTrue(OH.isBoxed(Boolean.class));	}	@Test	public void testGetBoxed() {		assertEquals(null, OH.getBoxed(null));		assertEquals(String.class, OH.getBoxed(String.class));		assertEquals(Object.class, OH.getBoxed(Object.class));		assertEquals(Character.class, OH.getBoxed(char.class));		assertEquals(Short.class, OH.getBoxed(short.class));		assertEquals(Integer.class, OH.getBoxed(int.class));		assertEquals(Float.class, OH.getBoxed(float.class));		assertEquals(Double.class, OH.getBoxed(double.class));		assertEquals(Long.class, OH.getBoxed(long.class));		assertEquals(Byte.class, OH.getBoxed(byte.class));		assertEquals(Boolean.class, OH.getBoxed(boolean.class));	}	@Test	public void testGetBasicType() {		assertEquals((byte) 10, OH.getBasicType(boolean.class));		assertEquals((byte) 11, OH.getBasicType(byte.class));		assertEquals((byte) 12, OH.getBasicType(short.class));		assertEquals((byte) 13, OH.getBasicType(char.class));		assertEquals((byte) 14, OH.getBasicType(int.class));		assertEquals((byte) 15, OH.getBasicType(float.class));		assertEquals((byte) 16, OH.getBasicType(long.class));		assertEquals((byte) 17, OH.getBasicType(double.class));		assertEquals((byte) 10, OH.getBasicType(Boolean.class));		assertEquals((byte) 11, OH.getBasicType(Byte.class));		assertEquals((byte) 12, OH.getBasicType(Short.class));		assertEquals((byte) 13, OH.getBasicType(Character.class));		assertEquals((byte) 14, OH.getBasicType(Integer.class));		assertEquals((byte) 15, OH.getBasicType(Float.class));		assertEquals((byte) 16, OH.getBasicType(Long.class));		assertEquals((byte) 17, OH.getBasicType(Double.class));		assertEquals((byte) 20, OH.getBasicType(String.class));		assertEquals((byte) 21, OH.getBasicType(List.class));		assertEquals((byte) 22, OH.getBasicType(Set.class));		assertEquals((byte) 23, OH.getBasicType(Map.class));		assertEquals((byte) 21, OH.getBasicType(ArrayList.class));		assertEquals((byte) 22, OH.getBasicType(HashSet.class));		assertEquals((byte) 23, OH.getBasicType(HashMap.class));		assertEquals((byte) 44, OH.getBasicType(FixPoint.class));		assertEquals((byte) 45, OH.getBasicType(BigDecimal.class));		assertEquals((byte) 46, OH.getBasicType(BigInteger.class));		assertEquals((byte) 47, OH.getBasicType(ValuedEnum.class));		assertEquals((byte) 60, OH.getBasicType(Object.class));		assertEquals((byte) 60, OH.getBasicType(OH.class));		assertEquals(BasicTypes.NULL, OH.getBasicType(null));	}	@Test	public void testCast() {		assertEquals(null, Caster_Integer.INSTANCE.cast(null));		for (int i = 0; i < 1000000; i++) {			assertEquals("" + i, Caster_String.INSTANCE.cast(i));			assertEquals(i, (int) Caster_Integer.PRIMITIVE.cast("" + i));		}	}	@Test	public void testCastArray() {		ArrayList<Integer> t = (ArrayList<Integer>) CH.l(1, 2, 3, 4);		long[] t2 = Caster_Array.LONG_PRIMITIVE.cast(t);		assertEquals(1L, t2[0]);		assertEquals(2L, t2[1]);		assertEquals(3L, t2[2]);		assertEquals(4L, t2[3]);	}	@Test	public void testCastArray2() {		ArrayList<Integer> t = (ArrayList<Integer>) CH.l(1, 2, 3, 4);		Long[] t2 = Caster_Array.LONG.cast(t);		assertEquals((Long) 1L, t2[0]);		assertEquals((Long) 2L, t2[1]);		assertEquals((Long) 3L, t2[2]);		assertEquals((Long) 4L, t2[3]);	}	@Test	public void testCastArray3() {		Long[] t2 = Caster_Array.LONG.cast(new int[] { 1, 2, 3, 4 });		assertEquals((Long) 1L, t2[0]);		assertEquals((Long) 2L, t2[1]);		assertEquals((Long) 3L, t2[2]);		assertEquals((Long) 4L, t2[3]);	}	@Test	public void testCastRequired() {		assertEquals(null, Caster_Integer.INSTANCE.cast(null, false));		for (int i = 0; i < 1000000; i++) {			assertEquals("" + i, Caster_String.INSTANCE.cast(i));			assertEquals((long) i, (long) Caster_Long.INSTANCE.cast(i));		}	}	@Test(expected = NullPointerException.class)	public void testCastRequiredFail() {		assertEquals(null, Caster_Integer.INSTANCE.cast(null, true));	}	@Test	public void testHashCode() {		assertEquals(0, OH.hashCode(null));		char x;		Character newChar;		byte y;		Byte newByte;		for (int i = 0; i < 10000; i++) {			assertEquals(new Integer(i).hashCode(), OH.hashCode(i));			assertEquals(new Double(i).hashCode(), OH.hashCode((double) i));			assertEquals(new Long(i).hashCode(), OH.hashCode((long) i));			assertEquals(new Float(i).hashCode(), OH.hashCode((float) i));			assertEquals(new String("" + i).hashCode(), OH.hashCode("" + i));			x = (char) i;			newChar = x;			assertEquals(newChar.hashCode(), OH.hashCode((char) i));			y = (byte) i;			newByte = y;			assertEquals(newByte.hashCode(), OH.hashCode((byte) i));		}	}	@Test	public void testGetClass() {		assertEquals(null, OH.getClass(null));		assertEquals(Integer.class, OH.getClass(1));		assertEquals(Byte.class, OH.getClass((byte) 1));		assertEquals(Short.class, OH.getClass((short) 1));		assertEquals(Character.class, OH.getClass((char) 1));		assertEquals(Character.class, OH.getClass('1'));		assertEquals(String.class, OH.getClass("" + 1));		assertEquals(Object.class, OH.getClass(new Object()));	}	@Test	public void testToString() {		assertEquals(null, OH.toString(null));		for (int i = 0; i < 128; i++) {			assertEquals("" + i, OH.toString(i));			assertEquals("" + i, OH.toString((byte) i));			assertEquals("" + i, OH.toString((short) i));			assertEquals("" + i, OH.toString("" + i));		}	}	@Test	public void testNoNull() {		for (int i = 0; i < 1000000; i++) {			assertEquals(i, OH.noNull(i, "fail"));			assertEquals("fail", OH.noNull(null, "fail"));		}	}	@Test	public void testSleepRand() {		for (int i = 0; i < 1; i++) {			assertTrue(OH.sleepRand(10, 100));		}	}	@Test	public void testSleep() {		for (int i = 0; i < 1; i++) {			assertTrue(OH.sleep(TimeUnit.SECONDS, 1));		}	}	@Test	public void testSleepMillis() {		for (int i = 0; i < 1; i++) {			assertTrue(OH.sleep(100));		}	}	@Test	public void testAssertTrue() {		assertTrue(OH.assertTrue(true));	}	@Test(expected = AssertionException.class)	public void testAssertTrueFail() {		OH.assertTrue(false);	}	public void testAssertFalse() {		assertTrue(OH.assertFalse(false));	}	@Test(expected = AssertionException.class)	public void testAssertFalseFail() {		OH.assertFalse(true);	}	@Test	public void testAssertEq() {		for (int i = 0; i < 128; i++) {			assertEquals((long) i, OH.assertEq(i, (long) i));			assertEquals((int) i, OH.assertEq((byte) i, (char) i));		}	}	@Test(expected = AssertionException.class)	public void testAssertEqFail() {		for (int i = 0; i < 128; i++) {			OH.assertEq(i + 1, (long) i);			OH.assertEq("" + i, (char) i);		}	}	/*		 * OH.assertEq(int,long,String) seems incompatible here for an unknown reason		 */	public void testAssertEqMessage() {		for (int i = 0; i < 128; i++) {			assertEquals(i, (int) OH.assertEq(i, (long) i, "Assertion Error"));			assertEquals((byte) i, (int) OH.assertEq((byte) i, (char) i, "Assertion Error"));		}	}	@Test(expected = AssertionException.class)	public void testAssertEqMessageFail() {		for (int i = 0; i < 128; i++) {			OH.assertEq(i + 1, (long) i, "Assertion Error");			OH.assertEq("" + i, (char) i, "Assertion Error");		}	}	@Test	public void testAssertBetweenInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertBetween(i, -1, Integer.MAX_VALUE));		}	}	@Test(expected = AssertionException.class)	public void testAssertBetweenIntFail() {		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertBetween(i, Integer.MIN_VALUE, 0));		}	}	@Test	public void testAssertBetweenDouble() {		for (double i = 0.0; i < 100000.0; i++) {			assertEquals(i, OH.assertBetween(i, -1.0, Integer.MAX_VALUE), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertBetweenDoubleFail() {		for (double i = 0; i < 100000; i++) {			assertEquals(i, OH.assertBetween(i, Integer.MIN_VALUE, 0.0), 0);		}	}	@Test	public void testAssertBetweenLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i, OH.assertBetween(i, -1L, Integer.MAX_VALUE));		}	}	@Test(expected = AssertionException.class)	public void testAssertBetweenLongFail() {		for (long i = 0; i < 100000; i++) {			assertEquals(i, OH.assertBetween(i, Integer.MIN_VALUE, 0L));		}	}	@Test	public void testIsBetweenChar() {		for (char i = 0; i < 128; i++) {			assertTrue(OH.isBetween(i, 0, 128));		}	}	@Test	public void testIsBetweenInt() {		for (int i = 0; i < Integer.MAX_VALUE - 100; i += 100) {			assertTrue(OH.isBetween(i, 0, Integer.MAX_VALUE));		}	}	@Test	public void testIsBetweenDouble() {		double max = Integer.MAX_VALUE;		for (double i = 0; i < max / 2; i += 1000.5) {			assertTrue(OH.isBetween(i, 0.0, max));		}	}	@Test	public void testIsBetweenLong() {		long max = Integer.MAX_VALUE;		for (long i = 0; i < max; i += 1000) {			assertTrue(OH.isBetween(i, 0, max));		}	}	@Test	public void testIsImmutable() {		assertTrue(OH.isImmutable(null));		for (int i = 0; i < 100000; i++) {			assertTrue(OH.isImmutable(new Integer(i)));			assertTrue(OH.isImmutable(new BigDecimal("" + i)));			assertTrue(OH.isImmutable(new String("" + i)));			assertFalse(OH.isImmutable(new Date()));		}	}	@Test	public void testIsImmutableClass() {		assertTrue(OH.isImmutableClass(Integer.class));		assertTrue(OH.isImmutableClass(Double.class));		assertTrue(OH.isImmutableClass(Long.class));		assertTrue(OH.isImmutableClass(Character.class));		assertTrue(OH.isImmutableClass(Boolean.class));		assertTrue(OH.isImmutableClass(BigDecimal.class));		assertTrue(OH.isImmutableClass(String.class));		assertFalse(OH.isImmutableClass(Date.class));		assertFalse(OH.isImmutableClass(Map.class));		assertFalse(OH.isImmutableClass(HashMap.class));		assertFalse(OH.isImmutableClass(HashSet.class));		assertFalse(OH.isImmutableClass(List.class));		assertFalse(OH.isImmutableClass(ArrayList.class));	}	@Test(expected = NullPointerException.class)	public void testIsImmutableClassFail() {		OH.isImmutableClass(null);	}	@Test	public void testGetDefaultValue() {		assertEquals(0, OH.getDefaultValue(int.class));		assertEquals(0.0, OH.getDefaultValue(double.class));		assertEquals((short) 0, OH.getDefaultValue(short.class));		assertEquals((byte) 0, OH.getDefaultValue(byte.class));		assertEquals(0L, OH.getDefaultValue(long.class));		assertEquals(false, OH.getDefaultValue(boolean.class));		assertEquals((char) 0, OH.getDefaultValue(char.class));		assertEquals(null, OH.getDefaultValue(Integer.class));		assertEquals(null, OH.getDefaultValue(Double.class));		assertEquals(null, OH.getDefaultValue(Short.class));		assertEquals(null, OH.getDefaultValue(Byte.class));		assertEquals(null, OH.getDefaultValue(Long.class));		assertEquals(null, OH.getDefaultValue(Boolean.class));		assertEquals(null, OH.getDefaultValue(Character.class));		assertEquals(null, OH.getDefaultValue(String.class));		assertEquals(null, OH.getDefaultValue(Map.class));		assertEquals(null, OH.getDefaultValue(Set.class));		assertEquals(null, OH.getDefaultValue(List.class));	}	@Test	public void testGetDefaultValueString() {		assertEquals("0", OH.getDefaultValueString(int.class));		assertEquals("0.0D", OH.getDefaultValueString(double.class));		assertEquals("(short)0", OH.getDefaultValueString(short.class));		assertEquals("(byte)0", OH.getDefaultValueString(byte.class));		assertEquals("0L", OH.getDefaultValueString(long.class));		assertEquals("false", OH.getDefaultValueString(boolean.class));		assertEquals("(char)0", OH.getDefaultValueString(char.class));		assertEquals("null", OH.getDefaultValueString(Integer.class));		assertEquals("null", OH.getDefaultValueString(Double.class));		assertEquals("null", OH.getDefaultValueString(Short.class));		assertEquals("null", OH.getDefaultValueString(Byte.class));		assertEquals("null", OH.getDefaultValueString(Long.class));		assertEquals("null", OH.getDefaultValueString(Boolean.class));		assertEquals("null", OH.getDefaultValueString(Character.class));		assertEquals("null", OH.getDefaultValueString(String.class));		assertEquals("null", OH.getDefaultValueString(Map.class));		assertEquals("null", OH.getDefaultValueString(Set.class));		assertEquals("null", OH.getDefaultValueString(List.class));	}	@Test	public void testGetValuedEnum() {	}	@Test	public void testToByteLong() {		for (int i = 0; i < 128; i++) {			assertEquals((byte) i, OH.toByte(i));		}	}	@Test(expected = AssertionException.class)	public void testToByteLongFail() {		for (long i = 128; i < 1000; i++) {			OH.toByte(i);		}	}	@Test	public void testToShortLong() {		for (short i = 0; i < 10000; i++) {			assertEquals(i, OH.toShort(i));		}	}	@Test(expected = AssertionException.class)	public void testToShortLongFail() {		for (long i = Short.MAX_VALUE; i < (Short.MAX_VALUE + 10000); i++) {			OH.toShort(i);		}	}	@Test	public void testToIntLong() {		for (int i = 0; i < 10000; i++) {			assertEquals(i, OH.toInt(i));		}	}	@Test(expected = AssertionException.class)	public void testToIntLongFail() {		long max = (long) Integer.MAX_VALUE + 10000;		for (long i = Integer.MAX_VALUE; i < max; i++) {			OH.toInt(i);		}	}	@Test	public void testToByteDouble() {		for (int i = 0; i < 128; i++) {			assertEquals((byte) i, OH.toByte((double) i));		}	}	@Test(expected = AssertionException.class)	public void testToByteDoubleFail() {		for (double i = 128; i < 1000; i++) {			OH.toByte(i);		}		for (double i = 0.5; i < 1000; i++) {			OH.toByte(i);		}	}	@Test	public void testToShortDouble() {		for (short i = 0; i < 10000; i++) {			assertEquals(i, OH.toShort((double) i));		}	}	@Test(expected = AssertionException.class)	public void testToShortDoubleFail() {		for (double i = Short.MAX_VALUE; i < (Short.MAX_VALUE + 10000); i++) {			OH.toShort(i);		}		double start = Short.MAX_VALUE + 0.5;		for (double i = start; i < (start + 10000); i++) {			OH.toShort(i);		}	}	@Test	public void testToIntDouble() {		for (int i = 0; i < 10000; i++) {			assertEquals(i, OH.toInt((double) i));		}	}	@Test(expected = AssertionException.class)	public void testToIntDoubleFail() {		double max = (double) Integer.MAX_VALUE + 10000;		double start = Integer.MAX_VALUE + 0.5;		for (double i = start; i < max; i++) {			OH.toInt(i);		}	}	@Test	public void testToLongDouble() {		for (long i = 0; i < 10000; i++) {			assertEquals(i, OH.toLong(i));		}	}	@Test(expected = AssertionException.class)	public void testToLongDoubleFail() {		double max = (double) Long.MAX_VALUE + 100000;		double start = Long.MAX_VALUE + 0.5;		for (double i = start; i < max; i += 10000) {			OH.toLong(i);		}	}	/*		 * Not sure if implementation here is correct		 */	@Test	public void testToRuntime() {		OH.toRuntime(new AssertionException());		OH.toRuntime(new NullPointerException());		OH.toRuntime(new IndexOutOfBoundsException());		OH.toRuntime(new Throwable());	}	@Test	public void testNW() {		Class[] classs = { int.class };		Class[] classss = { String.class };		Object[] obj = { 0 };		for (int i = 0; i < 100000; i++) {			obj[0] = i;			assertEquals((Object) i, OH.nw(Integer.class, classs, obj));			obj[0] = "" + i;			assertEquals("" + i, OH.nw(String.class, classss, obj));		}	}	@Test	public void testAssertGeInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGe(i + 1, i));			assertEquals(i, OH.assertGe(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertGeIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);		}	}	@Test	public void testAssertGtInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGt(i + 1, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertGtIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);			OH.assertGe(i, i);		}	}	@Test	public void testAssertLeInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLe(i, i + 1));			assertEquals(i, OH.assertLe(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertLeIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);		}	}	@Test	public void testAssertLtInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLt(i, i + 1));		}	}	@Test(expected = AssertionException.class)	public void testAssertLtIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);			OH.assertLe(i, i);		}	}	@Test	public void testAssertEqInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertEq(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertEqIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertEq(i, i + 1);			OH.assertEq(i + 1, i);		}	}	@Test	public void testAssertNeInt() {		for (int i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertNe(i + 1, i));			assertEquals(i, OH.assertNe(i, i + 1));		}	}	@Test(expected = AssertionException.class)	public void testAssertNeIntFail() {		for (int i = 0; i < 100000; i++) {			OH.assertNe(i, i);		}	}	@Test	public void testAssertGeLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGe(i + 1, i));			assertEquals(i, OH.assertGe(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertGeLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);		}	}	@Test	public void testAssertGtLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGt(i + 1, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertGtLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);			OH.assertGe(i, i);		}	}	@Test	public void testAssertLeLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLe(i, i + 1));			assertEquals(i, OH.assertLe(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertLeLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);		}	}	@Test	public void testAssertLtLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLt(i, i + 1));		}	}	@Test(expected = AssertionException.class)	public void testAssertLtLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);			OH.assertLe(i, i);		}	}	@Test	public void testAssertEqLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i, OH.assertEq(i, i));		}	}	@Test(expected = AssertionException.class)	public void testAssertEqLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertEq(i, i + 1);			OH.assertEq(i + 1, i);		}	}	@Test	public void testAssertNeLong() {		for (long i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertNe(i + 1, i));			assertEquals(i, OH.assertNe(i, i + 1));		}	}	@Test(expected = AssertionException.class)	public void testAssertNeLongFail() {		for (long i = 0; i < 100000; i++) {			OH.assertNe(i, i);		}	}	@Test	public void testAssertGeDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGe(i + 1, i), 0);			assertEquals(i, OH.assertGe(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertGeDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);		}	}	@Test	public void testAssertGtDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGt(i + 1, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertGtDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);			OH.assertGe(i, i);		}	}	@Test	public void testAssertLeDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLe(i, i + 1), 0);			assertEquals(i, OH.assertLe(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertLeDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);		}	}	@Test	public void testAssertLtDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLt(i, i + 1), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertLtDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);			OH.assertLe(i, i);		}	}	@Test	public void testAssertEqDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i, OH.assertEq(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertEqDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertEq(i, i + 1);			OH.assertEq(i + 1, i);		}	}	@Test	public void testAssertNeDouble() {		for (double i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertNe(i + 1, i), 0);			assertEquals(i, OH.assertNe(i, i + 1), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertNeDoubleFail() {		for (double i = 0; i < 100000; i++) {			OH.assertNe(i, i);		}	}	@Test	public void testAssertGeFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGe(i + 1, i), 0);			assertEquals(i, OH.assertGe(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertGeFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);		}	}	@Test	public void testAssertGtFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertGt(i + 1, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertGtFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertGe(i, i + 1);			OH.assertGe(i, i);		}	}	@Test	public void testAssertLeFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLe(i, i + 1), 0);			assertEquals(i, OH.assertLe(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertLeFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);		}	}	@Test	public void testAssertLtFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i, OH.assertLt(i, i + 1), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertLtFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertLe(i + 1, i);			OH.assertLe(i, i);		}	}	@Test	public void testAssertEqFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i, OH.assertEq(i, i), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertEqFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertEq(i, i + 1);			OH.assertEq(i + 1, i);		}	}	@Test	public void testAssertNeFloat() {		for (float i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertNe(i + 1, i), 0);			assertEquals(i, OH.assertNe(i, i + 1), 0);		}	}	@Test(expected = AssertionException.class)	public void testAssertNeFloatFail() {		for (float i = 0; i < 100000; i++) {			OH.assertNe(i, i);		}	}	@Test	public void testAssertNeObject() {		for (int i = 0; i < 100000; i++) {			assertEquals(i + 1, OH.assertNe((Object) (i + 1), (Object) i));			assertEquals(i, OH.assertNe((Object) i, (Object) (i + 1)));			assertEquals("" + i, OH.assertNe("" + i, " " + i));		}	}	@Test(expected = AssertionException.class)	public void testAssertNeObjectFail() {		for (int i = 0; i < 100000; i++) {			OH.assertNe((Object) i, (Object) i);		}	}	@Test	public void testAssertNotNull() {		assertEquals("", OH.assertNotNull(""));		for (int i = 0; i < 100000; i++) {			assertEquals(i, OH.assertNotNull((Object) i));			assertEquals("" + i, OH.assertNotNull("" + i));		}	}	@Test(expected = AssertionException.class)	public void testAssertNotNullFail() {		OH.assertNotNull(null);	}	@Test	public void testAssertNull() {		assertEquals(null, OH.assertNull(null));	}	@Test(expected = AssertionException.class)	public void testAssertNullFail() {		for (int i = 0; i < 100000; i++) {			OH.assertNull(i);			OH.assertNull("" + i);		}	}	@Test	public void testWaitTime() {		Object obj;		for (int i = 0; i < 10; i++) {			obj = new Integer(i);			synchronized (obj) {				assertTrue(OH.wait(obj, 100));			}		}	}	@Test	public void testWaitFromStart() {		EH.currentTimeMillis();		Object obj;		for (int i = 0; i < 10; i++) {			obj = new Integer(i);			synchronized (obj) {				assertTrue(OH.waitFromStart(obj, new Date().getTime(), 150));			}		}	}	@Test	public void testGT() {		testCompare(1, 2);		testCompare(2, 1);		testCompare(1, 1);		testCompare(2, 2);		Random r = new Random();		for (int i = 0; i < 1000; i++)			testCompare(r.nextInt(), r.nextInt());	}	public void testCompare(int left, int right) {		assertEquals(left > right, OH.gt(left, right));		assertEquals(left < right, OH.lt(left, right));		assertEquals(left >= right, OH.ge(left, right));		assertEquals(left <= right, OH.le(left, right));		assertEquals(left == right, OH.eq(left, right));		assertEquals(left != right, OH.ne(left, right));	}	@Test	public void testCastStringNull() {		assertEquals(null, Caster_String.INSTANCE.cast(null));	}	@Test	public void testValueOfs() {		for (int i = -1000 * 1000; i < 1000 * 1000; i++) {			assertEquals(OH.valueOf((int) i), Integer.valueOf((int) i));			assertEquals(OH.valueOf((long) i), Long.valueOf((long) i));			assertEquals(OH.valueOf((short) i), Short.valueOf((short) i));			assertEquals(OH.valueOf((byte) i), Byte.valueOf((byte) i));			assertEquals(OH.valueOf((char) i), Character.valueOf((char) i));		}	}	public static final int VALUE_OF_SKIP = 100;	@Test	public void testValueOfDouble() throws InterruptedException {		final AtomicInteger n = new AtomicInteger(123);		ArrayList<Thread> threads = new ArrayList<Thread>();		for (int j = 0; j < 3; j++) {			Thread t = new Thread() {				@Override				public void run() {					Random r = new Random(n.getAndAdd(123));					for (int i = 0; i < 1000 * 1000 * 2000; i += r.nextInt(VALUE_OF_SKIP)) {						double f = Double.longBitsToDouble(r.nextLong());						Double f1 = OH.valueOf(f);						Double f2 = f;						OH.assertEq(f1, f2);					}				}			};			t.start();			threads.add(t);		}		for (Thread t : threads)			t.join();	}	@Test	public void testValueOfFloat2() throws InterruptedException {		Random r = new Random();		for (long n = Integer.MIN_VALUE; n <= Integer.MAX_VALUE; n += r.nextInt(VALUE_OF_SKIP)) {			float f = Float.intBitsToFloat((int) n);			Float f1 = OH.valueOf(f);			Float f2 = f;			OH.assertEq(f1, f2);		}	}	@Test	public void testValueOfInteger() throws InterruptedException {		Random r = new Random();		for (long n = Integer.MIN_VALUE; n <= Integer.MAX_VALUE; n += r.nextInt(VALUE_OF_SKIP)) {			Integer f1 = OH.valueOf((int) n);			Integer f2 = (int) n;			OH.assertEq(f1, f2);		}	}	@Test	public void testValueOfLong() throws InterruptedException {		Random r = new Random();		for (long n = Integer.MIN_VALUE; n <= Integer.MAX_VALUE; n += r.nextInt(VALUE_OF_SKIP)) {			Long f1 = OH.valueOf((long) n);			Long f2 = (long) n;			OH.assertEq(f1, f2);		}	}	@Test	public void testCastNumberNoThrow() {		assertEquals(123L, (long) Double.parseDouble("+123"));		assertEquals(null, Caster_Long.INSTANCE.cast("what", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("123.4", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("123.432", false, false));		assertEquals((Long) (-123L), Caster_Long.INSTANCE.cast("-123.432", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("123.4L", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("123.432L", false, false));		assertEquals((Long) (-123L), Caster_Long.INSTANCE.cast("-123.432L", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("+123.4L", false, false));		assertEquals((Long) 123L, Caster_Long.INSTANCE.cast("+123.432L", false, false));		assertEquals((Long) null, Caster_Long.INSTANCE.cast("+123+.4L", false, false));		assertEquals((Long) null, Caster_Long.INSTANCE.cast("+123+.432L", false, false));		assertEquals((Integer) 123, Caster_Integer.INSTANCE.cast("+123.4", false, false));		assertEquals((Integer) 123, Caster_Integer.INSTANCE.cast("+123.432", false, false));		assertEquals((Integer) null, Caster_Integer.INSTANCE.cast("+123+.4", false, false));		assertEquals((Integer) null, Caster_Integer.INSTANCE.cast("+123+.432", false, false));		Random rand = new Random(123456);		for (int i = 0; i < 10000; i++) {			int j = rand.nextInt();			assertEquals((Integer) j, Caster_Integer.INSTANCE.cast(Integer.toString(j), false, false));		}		assertEquals((Integer) Integer.MIN_VALUE, Caster_Integer.INSTANCE.cast(Integer.toString(Integer.MIN_VALUE), false, false));		assertEquals((Integer) Integer.MAX_VALUE, Caster_Integer.INSTANCE.cast(Integer.toString(Integer.MAX_VALUE), false, false));		assertEquals((Integer) 0, Caster_Integer.INSTANCE.cast(Integer.toString(0), false, false));		assertEquals((Integer) (-1), Caster_Integer.INSTANCE.cast(Integer.toString(-1), false, false));		assertEquals((Integer) 1, Caster_Integer.INSTANCE.cast(Integer.toString(1), false, false));		for (int i = 0; i < 10000; i++) {			long j = rand.nextLong();			assertEquals((Long) j, Caster_Long.INSTANCE.cast(Long.toString(j), false, false));		}		assertEquals((Long) Long.MIN_VALUE, Caster_Long.INSTANCE.cast(Long.toString(Long.MIN_VALUE), false, false));		assertEquals((Long) Long.MAX_VALUE, Caster_Long.INSTANCE.cast(Long.toString(Long.MAX_VALUE), false, false));		assertEquals((Long) 0L, Caster_Long.INSTANCE.cast(Long.toString(0), false, false));		assertEquals((Long) (-1L), Caster_Long.INSTANCE.cast(Long.toString(-1), false, false));		assertEquals((Long) 1L, Caster_Long.INSTANCE.cast(Long.toString(1), false, false));		for (int i = 0; i < 10000; i++) {			double j = rand.nextDouble() / rand.nextDouble();			if (rand.nextBoolean())				j *= -1d;			assertEquals((Double) j, Caster_Double.INSTANCE.cast(Double.toString(j), false, false), .00001);			assertEquals((Integer) (int) j, Caster_Integer.INSTANCE.cast(Double.toString(j), false, false), .00001);		}		assertEquals((Double) Double.MIN_VALUE, Caster_Double.INSTANCE.cast(Double.toString(Double.MIN_VALUE), false, false), .00001);		assertEquals((Double) Double.MAX_VALUE, Caster_Double.INSTANCE.cast(Double.toString(Double.MAX_VALUE), false, false), .00001);		assertEquals((Double) 0d, Caster_Double.INSTANCE.cast(Double.toString(0), false, false), .00001);		assertEquals((Double) (-1d), Caster_Double.INSTANCE.cast(Double.toString(-1), false, false), .00001);		assertEquals((Double) 1d, Caster_Double.INSTANCE.cast(Double.toString(1), false, false), .00001);	}	@Test	public void testCast2() {		assertEquals(new Float(123f), Caster_Float.INSTANCE.cast("123f", false, false));		assertEquals(new Double(123f), Caster_Double.INSTANCE.cast("123f", false, false));		assertEquals(new Integer(123), Caster_Integer.INSTANCE.cast("123f", false, false));		assertEquals(new Long(123), Caster_Long.INSTANCE.cast("123f", false, false));		assertEquals(new Float(-123f), Caster_Float.INSTANCE.cast("-123f", false, false));		assertEquals(new Double(-123f), Caster_Double.INSTANCE.cast("-123f", false, false));		assertEquals(new Integer(-123), Caster_Integer.INSTANCE.cast("-123f", false, false));		assertEquals(new Long(-123), Caster_Long.INSTANCE.cast("-123f", false, false));		assertEquals(new Float(-123f), Caster_Float.INSTANCE.cast("-123d", false, false));		assertEquals(new Double(-123f), Caster_Double.INSTANCE.cast("-123d", false, false));		assertEquals(new Integer(-123), Caster_Integer.INSTANCE.cast("-123d", false, false));		assertEquals(new Long(-123), Caster_Long.INSTANCE.cast("-123d", false, false));		assertEquals(new Float(-123.02f), Caster_Float.INSTANCE.cast("-123.02d", false, false), .00001d);		assertEquals(new Double(-123.02f), Caster_Double.INSTANCE.cast("-123.02d", false, false), .00001d);		assertEquals(new Integer(-123), Caster_Integer.INSTANCE.cast("-123d", false, false));		assertEquals(new Long(-123), Caster_Long.INSTANCE.cast("-123d", false, false));		assertEquals(new Float(1000000), Caster_Float.INSTANCE.cast("1000000L", false, false), .00001d);		assertEquals(new Double(1000000), Caster_Double.INSTANCE.cast("1000000L", false, false), .00001d);		assertEquals(new Integer(1000000), Caster_Integer.INSTANCE.cast("1000000L", false, false));		assertEquals(new Long(1000000), Caster_Long.INSTANCE.cast("1000000L", false, false));		assertEquals(new Float(1000000), Caster_Float.INSTANCE.cast("1000000I", false, false), .00001d);		assertEquals(new Double(1000000), Caster_Double.INSTANCE.cast("1000000I", false, false), .00001d);		assertEquals(new Integer(1000000), Caster_Integer.INSTANCE.cast("1000000I", false, false));		assertEquals(new Long(1000000), Caster_Long.INSTANCE.cast("1000000I", false, false));		assertEquals(new Float(-0x1000), Caster_Float.INSTANCE.cast("-0x1000", false, false), .00001d);		assertEquals(new Double(-0x1000), Caster_Double.INSTANCE.cast("-0x1000", false, false), .00001d);		assertEquals(new Integer(-0x1000), Caster_Integer.INSTANCE.cast("-0x1000", false, false));		assertEquals(new Long(-0x1000), Caster_Long.INSTANCE.cast("-0x1000", false, false));		assertEquals(new Float(0x1000), Caster_Float.INSTANCE.cast("0x1000", false, false), .00001d);		assertEquals(new Double(0x1000), Caster_Double.INSTANCE.cast("0x1000", false, false), .00001d);		assertEquals(new Integer(0x1000), Caster_Integer.INSTANCE.cast("0x1000", false, false));		assertEquals(new Long(0x1000), Caster_Long.INSTANCE.cast("0x1000", false, false));		assertEquals(new Float(0x1000), Caster_Float.INSTANCE.cast("+0x1000", false, false), .00001d);		assertEquals(new Double(0x1000), Caster_Double.INSTANCE.cast("+0x1000", false, false), .00001d);		assertEquals(new Integer(0x1000), Caster_Integer.INSTANCE.cast("+0x1000", false, false));		assertEquals(new Long(0x1000), Caster_Long.INSTANCE.cast("+0x1000", false, false));		assertEquals(new Float(0x1000f), Caster_Float.INSTANCE.cast("+0x1000f", false, false), .00001d);		assertEquals(new Double(0x1000f), Caster_Double.INSTANCE.cast("+0x1000f", false, false), .00001d);		assertEquals(new Integer(0x1000f), Caster_Integer.INSTANCE.cast("+0x1000f", false, false));		assertEquals(new Long(0x1000f), Caster_Long.INSTANCE.cast("+0x1000f", false, false));		assertEquals(new Float(0x1000fd), Caster_Float.INSTANCE.cast("+0x1000fd", false, false), .00001d);		assertEquals(new Double(0x1000fd), Caster_Double.INSTANCE.cast("+0x1000fd", false, false), .00001d);		assertEquals(new Integer(0x1000fd), Caster_Integer.INSTANCE.cast("+0x1000fd", false, false));		assertEquals(new Long(0x1000fd), Caster_Long.INSTANCE.cast("+0x1000fd", false, false));		assertEquals(new Float(0x1000fdl), Caster_Float.INSTANCE.cast("+0x1000fdl", false, false), .00001d);		assertEquals(new Double(0x1000fdl), Caster_Double.INSTANCE.cast("+0x1000fdl", false, false), .00001d);		assertEquals(new Integer(0x1000fd), Caster_Integer.INSTANCE.cast("+0x1000fdl", false, false));		assertEquals(new Long(0x1000fdl), Caster_Long.INSTANCE.cast("+0x1000fdl", false, false));		assertEquals(new Float(0x1000fdl), Caster_Float.INSTANCE.cast("+0x1000fdI", false, false), .00001d);		assertEquals(new Double(0x1000fdl), Caster_Double.INSTANCE.cast("+0x1000fdI", false, false), .00001d);		assertEquals(new Integer(0x1000fd), Caster_Integer.INSTANCE.cast("+0x1000fdI", false, false));		assertEquals(new Long(0x1000fdl), Caster_Long.INSTANCE.cast("+0x1000fdI", false, false));		assertEquals(Float.POSITIVE_INFINITY, Caster_Float.INSTANCE.cast("+infinity", false, false), .00001d);		assertEquals(Double.POSITIVE_INFINITY, Caster_Double.INSTANCE.cast("+infinity", false, false), .00001d);		assertEquals(Float.POSITIVE_INFINITY, Caster_Float.INSTANCE.cast("infinity", false, false), .00001d);		assertEquals(Double.POSITIVE_INFINITY, Caster_Double.INSTANCE.cast("infinity", false, false), .00001d);		assertEquals(Float.NEGATIVE_INFINITY, Caster_Float.INSTANCE.cast("-infinity", false, false), .00001d);		assertEquals(Double.NEGATIVE_INFINITY, Caster_Double.INSTANCE.cast("-infinity", false, false), .00001d);		assertEquals(Float.NaN, Caster_Float.INSTANCE.cast("nan", false, false), .00001d);		assertEquals(Double.NaN, Caster_Double.INSTANCE.cast("nan", false, false), .00001d);		assertEquals((Integer) Integer.MAX_VALUE, Caster_Integer.INSTANCE.cast("+infinity", false, false));		assertEquals((Integer) Integer.MAX_VALUE, Caster_Integer.INSTANCE.cast("INFINITY", false, false));		assertEquals((Integer) Integer.MIN_VALUE, Caster_Integer.INSTANCE.cast("-infinity", false, false));		assertEquals((Integer) 0, Caster_Integer.INSTANCE.cast("nan", false, false));		assertEquals((Long) 0L, Caster_Long.INSTANCE.cast("nan", false, false));		assertEquals((Long) 0L, Caster_Long.INSTANCE.cast(Double.NaN, false, false));	}	@Test	public void testCast3() {		Random r = new Random(123);		for (int i = 0; i < 100000; i++) {			double n = r.nextDouble() - .5;			Double d = new Double(n * 1000000);			String s = d.toString();			assertEquals(d.doubleValue(), Caster_Double.INSTANCE.cast(s, false, false), .00001d);			assertEquals(d.intValue(), Caster_Integer.INSTANCE.cast(s, false, false), .00001d);			assertEquals(d.shortValue(), Caster_Short.INSTANCE.cast(s, false, false), .00001d);			assertEquals(d.longValue(), Caster_Long.INSTANCE.cast(s, false, false), .00001d);			assertEquals(d.floatValue(), Caster_Float.INSTANCE.cast(s, false, false), .00001d);		}	}}