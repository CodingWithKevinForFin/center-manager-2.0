package com.f1.utils;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.awt.Color;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Random;import java.util.Set;import org.junit.Test;import com.f1.utils.casters.Caster_Integer;import com.f1.utils.casters.Caster_String;import com.f1.utils.structs.ComparableComparator;import com.f1.utils.structs.TopMap;import com.f1.utils.structs.Tuple2;public class CHTests {	@Test	public void testMin1() {		assertEquals(1, CH.minIndex(CH.l(14, 7, 25)));	}	@Test	public void testMin2() {		assertEquals(-1, CH.minIndex(Collections.EMPTY_LIST));	}	@Test	public void testMax1() {		assertEquals(2, CH.maxIndex(CH.l(14, 7, 25)));	}	@Test	public void testMax2() {		assertEquals(-1, CH.maxIndex(Collections.EMPTY_LIST));	}	@Test	public void testIsSorted1() {		assertTrue(CH.isSorted(Collections.EMPTY_LIST));	}	@Test	public void testIsSorted2() {		assertTrue(CH.isSorted(CH.l(1)));	}	@Test	public void testIsSorted3() {		assertTrue(CH.isSorted(CH.l(1, 1)));	}	@Test	public void testIsSorted4() {		assertTrue(CH.isSorted(CH.l(1, 2, 3, 4)));	}	@Test	public void testIsSorted5() {		assertTrue(CH.isSorted(CH.l(1, 2, 2, 3, 4)));	}	@Test	public void testIsSorted6() {		assertFalse(CH.isSorted(CH.l(1, 2, 1, 3, 4)));	}	@Test	public void testIsSorted7() {		assertFalse(CH.isSorted(CH.l(2, 1)));	}	@Test	public void testInsert1() {		List<Integer> list = new ArrayList<Integer>();		for (int i = 0; i < 100; i++)			CH.insertSorted(list, i);		assertTrue(CH.isSorted(list));	}	@Test	public void testInsert2() {		List<Integer> list = new ArrayList<Integer>();		Random r = new Random(123);		for (int i = 0; i < 100; i++) {			CH.insertSorted(list, r.nextInt());		}		assertTrue(CH.isSorted(list));	}	@Test	public void testReverseComparator1() {		assertEquals(1, CH.REVERSE_COMPARATOR.compare(1, 2));	}	@Test	public void testReverseComparator2() {		assertEquals(-1, CH.REVERSE_COMPARATOR.compare(1, null));	}	@Test	public void testReverseComparator3() {		assertEquals(-1, CH.REVERSE_COMPARATOR.compare(-1, null));	}	@Test	public void testComparator1() {		assertEquals(-1, CH.COMPARATOR.compare(1, 2));	}	@Test	public void testComparator2() {		assertEquals(1, CH.COMPARATOR.compare(1, null));	}	@Test	public void testComparator3() {		assertEquals(1, CH.COMPARATOR.compare(-1, null));	}	@Test	public void testL1() {		List<Object> test = new ArrayList<Object>();		for (int i = 1; i < 4; i++)			test.add(i);		assertEquals(test, CH.l(1, 2, 3));	}	@Test	public void testL2() {		assertEquals(CH.l(1, 2, 3, 4), CH.l(1, 2, 3, 4));	}	@Test	public void testL3() {		List<Object> test = new ArrayList<Object>();		for (int i = 1; i < 4; i++)			test.add(i);		test.add("x");		assertEquals(test, CH.l(1, 2, 3, "x"));	}	@Test	public void testM1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals(map, CH.m(new HashMap<Object, Object>(), 1, 10, 2, 20));	}	@Test	public void testM2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals(map, CH.m(1, 10, 2, 20));	}	@Test	public void testM3() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(map, CH.m(new HashMap<Object, Object>(), 1, 10, 2, 20, "x", 30));	}	@Test	public void testM4() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(map, CH.m(1, 10, 2, 20, "x", 30));	}	@Test(expected = IndexOutOfBoundsException.class)	public void testMFail1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		CH.m(new HashMap<Object, Object>(), 1, 10, 2, 20, 3);	}	@Test(expected = IndexOutOfBoundsException.class)	public void testMFail2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		CH.m(1, 10, 2, 20, 3);	}	@Test	public void testS1() {		Set<Integer> set = new HashSet<Integer>();		set.add(1);		set.add(2);		set.add(3);		assertEquals(set, CH.s(1, 2, 3));	}	@Test	public void testS2() {		Set<Integer> set = new HashSet<Integer>();		set.add(1);		set.add(2);		set.add(3);		assertEquals(set, CH.s(new HashSet<Integer>(), 1, 2, 3));	}	@Test	public void testComm1() {		Set<Integer> set1 = new HashSet<Integer>();		Set<Integer> set2 = new HashSet<Integer>();		for (int i = 1; i < 4; i++) {			set1.add(i);			set2.add(i);		}		set1.add(4);		set2.add(5);		assertEquals(set1, CH.comm(set1, set2, true, false, true));	}	@Test	public void testComm2() {		Set<Integer> set1 = new HashSet<Integer>();		Set<Integer> set2 = new HashSet<Integer>();		for (int i = 1; i < 4; i++) {			set1.add(i);			set2.add(i);		}		set1.add(4);		set2.add(5);		assertEquals(set2, CH.comm(set1, set2, false, true, true));	}	@Test	public void testComm3() {		Set<Integer> set1 = new HashSet<Integer>();		Set<Integer> set2 = new HashSet<Integer>();		for (int i = 1; i < 4; i++) {			set1.add(i);			set2.add(i);		}		set1.add(4);		set2.add(5);		Set<Integer> set3 = new HashSet<Integer>();		set3.add(4);		assertEquals(set3, CH.comm(set1, set2, true, false, false));	}	@Test	public void testComm4() {		Set<Integer> set1 = new HashSet<Integer>();		Set<Integer> set2 = new HashSet<Integer>();		for (int i = 1; i < 4; i++) {			set1.add(i);			set2.add(i);		}		set1.add(4);		set2.add(5);		Set<Integer> set3 = new HashSet<Integer>();		set3.add(4);		assertEquals(set1, CH.comm(set1, set2, false, false, true, set3));	}	@Test	public void testGetClass1() {		List<Object> list = new ArrayList<Object>();		for (int i = 1; i < 6; i++)			list.add(i);		assertEquals(Integer.class, CH.getClassIfSame(list));	}	@Test	public void testGetClass2() {		List<Object> list = new ArrayList<Object>();		for (int i = 1; i < 6; i++)			list.add(i);		list.add("x");		assertEquals(null, CH.getClassIfSame(list));	}	@Test	public void testGetOrThrow1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(10, CH.getOrThrow(map, 1));	}	@Test	public void testGetOrThrow2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(30, CH.getOrThrow(map, "x"));	}	@Test	public void testGetOrThrow3() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals("20", CH.getOrThrow(Caster_String.INSTANCE, map, 2));	}	@Test	public void testGetOrThrow4() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(10, CH.getOrThrow(map, 1, "description"));	}	@Test	public void testGetOrThrow5() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals(30, CH.getOrThrow(map, "x", "description"));	}	@Test	public void testGetOrThrow6() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put("x", 30);		assertEquals("20", CH.getOrThrow(Caster_String.INSTANCE, map, 2, "description"));	}	@Test(expected = RuntimeException.class)	public void testGetOrThrowFail1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put(3, "x");		CH.getOrThrow(map, 4);	}	@Test(expected = RuntimeException.class)	public void testGetOrThrowFail() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		map.put(3, "x");		CH.getOrThrow(Caster_Integer.INSTANCE, map, 3, "description");	}	@Test	public void testGetOr1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals("10", CH.getOr(Caster_String.INSTANCE, map, 1, "-1"));	}	@Test	public void testGetOr2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals(10, CH.getOr(map, 1, -1));	}	@Test	public void testGetOr3() {		List<Object> list = new ArrayList<Object>();		for (int i = 1; i < 4; i++)			list.add(i);		assertEquals(2, CH.getOr(list, 1, -1));	}	@Test	public void testGetOr4() {		List<Object> list = new ArrayList<Object>();		for (int i = 1; i < 4; i++)			list.add(i);		assertEquals(-1, CH.getOr(list, 3, -1));	}	@Test(expected = RuntimeException.class)	public void testGetOrFail() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, "x");		assertEquals("x", CH.getOr(Caster_Integer.INSTANCE, map, 1, -1));	}	@Test	public void testRemoveOrThrow1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals(20, CH.removeOrThrow(map, 2));	}	@Test	public void testRemoveOrThrow2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertEquals(10, CH.removeOrThrow(map, 1, "description"));	}	@Test(expected = RuntimeException.class)	public void testRemoveOrThrowFail1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		CH.removeOrThrow(map, 4);	}	@Test(expected = RuntimeException.class)	public void testRemoveOrThrowFail2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		CH.removeOrThrow(map, 4, "description");	}	@Test	public void testPutOrThrow1() {		Map<Object, Object> map = new HashMap<Object, Object>();		assertTrue(CH.putOrThrow(map, 1, 10));	}	@Test	public void testPutOrThrow2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		assertFalse(CH.putOrThrow(map, 1, 10));	}	@Test	public void testPutOrThrow3() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		assertTrue(CH.putOrThrow(map, 2, 20));	}	@Test	public void testPutOrThrow4() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		map.put(2, 20);		assertTrue(CH.putOrThrow(map, 3, "x"));	}	@Test(expected = RuntimeException.class)	public void testPutOrThrowFail1() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 2);		CH.putOrThrow(map, 1, 3);	}	@Test(expected = RuntimeException.class)	public void testPutOrThrowFail2() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 2);		CH.putOrThrow(map, 1, 3);	}	@Test	public void testEmpty1() {		List collection = null;		assertTrue(CH.isEmpty(collection));	}	@Test	public void testEmpty2() {		List collection = null;		assertFalse(CH.isntEmpty(collection));	}	@Test	public void testEmpty3() {		List list = new ArrayList() {			{				add(1);			}		};		assertFalse(CH.isEmpty(list));	}	@Test	public void testEmpty4() {		List list = new ArrayList() {			{				add(1);			}		};		assertTrue(CH.isntEmpty(list));	}	@Test	public void testEmpty5() {		assertTrue(CH.isEmpty(new HashMap<Object, Object>()));	}	@Test	public void testEmpty6() {		assertFalse(CH.isntEmpty(new HashMap<Object, Object>()));	}	@Test	public void testEmpty7() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		assertTrue(CH.isntEmpty(map));	}	@Test	public void testEmpty8() {		Map<Object, Object> map = new HashMap<Object, Object>();		map.put(1, 10);		assertFalse(CH.isEmpty(map));	}	@Test	public void testBatch() {		for (int j = 1; j < 10000; j = j * 2 + 1) {			for (int n = 0; n < 10000; n = n * 2 + 1) {				try {					List<Object> data = new ArrayList<Object>(n);					List<Object> data2 = new ArrayList<Object>(n);					for (int i = 0; i < n; i++)						data.add(i);					List<List<Object>> parts = CH.batchSublists(data, j, true);					for (List<Object> i : parts) {						data2.addAll(i);					}					OH.assertEq(data, data2);				} catch (Exception e) {					throw new RuntimeException("n: " + n + ", j:" + j, e);				}			}		}	}	@Test	public void testJoin1() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3, 4, 4);		Map<Integer, String> r = CH.m(1, "1", 2, "2", 3, "3", 4, "4");		Map join = CH.join(l, r);		assertEquals(4, join.size());		assertEquals(new Tuple2(4, "4"), join.get(4));	}	@Test	public void testJoin2() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3, 4, 4);		Map<Integer, String> r = new HashMap<Integer, String>();		Map join = CH.join(l, r);		assertEquals(4, join.size());		assertEquals(new Tuple2(4, null), join.get(4));	}	@Test	public void testJoin3() {		Map<Integer, Integer> l = new HashMap<Integer, Integer>();		Map<Integer, String> r = CH.m(1, "1", 2, "2", 3, "3", 4, "4");		Map join = CH.join(l, r);		assertEquals(4, join.size());		assertEquals(new Tuple2(null, "4"), join.get(4));	}	@Test	public void testJoin4() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3, 4, 4);		Map<Integer, String> r = CH.m(1, "1", 2, "2", 3, "3");		Map join = CH.join(l, r);		assertEquals(4, join.size());		assertEquals(new Tuple2(3, "3"), join.get(3));		assertEquals(new Tuple2(4, null), join.get(4));	}	@Test	public void testJoin5() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3);		Map<Integer, String> r = CH.m(1, "1", 2, "2", 3, "3", 4, "4");		Map join = CH.join(l, r);		assertEquals(4, join.size());		assertEquals(new Tuple2(3, "3"), join.get(3));		assertEquals(new Tuple2(null, "4"), join.get(4));	}	@Test	public void testJoin6() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3, 5, 5);		Map<Integer, String> r = CH.m(1, "1", 2, "2", 3, "3", 4, "4");		Map join = CH.join(l, r);		assertEquals(5, join.size());		assertEquals(new Tuple2(3, "3"), join.get(3));		assertEquals(new Tuple2(null, "4"), join.get(4));		assertEquals(new Tuple2(5, null), join.get(5));	}	@Test	public void testJoin7() {		Map<Integer, Integer> l = CH.m(1, 1, 2, 2, 3, 3);		Map<Integer, String> r = CH.m(3, "3", 4, "4", 5, "5");		Map join = CH.join(l, r);		assertEquals(5, join.size());		assertEquals(new Tuple2(1, null), join.get(1));		assertEquals(new Tuple2(2, null), join.get(2));		assertEquals(new Tuple2(3, "3"), join.get(3));		assertEquals(new Tuple2(null, "4"), join.get(4));		assertEquals(new Tuple2(null, "5"), join.get(5));	}	@Test	public void testRemoveAll() {		for (int l = 0; l < 9; l++) {			for (int s = 0; s < 9 - l; s++) {				List<String> list = CH.l("a", "b", "c", "d", "e", "f", "g", "h", "i");				List<String> list2 = removeAll(list, s, l);				CH.removeAll(list, s, l);				assertEquals(list2, list);				System.out.println(list);			}		}	}	static private <T> List<T> removeAll(List<T> list, int i, int j) {		ArrayList<T> r = new ArrayList<T>();		r.addAll(list.subList(0, i));		r.addAll(list.subList(i + j, list.size()));		return r;	}	@Test	public void testSingleIterable1() {		SingletonIterable<String> si = new SingletonIterable<String>("test");		Iterator<String> i = si.iterator();		assertTrue(i.hasNext());	}	@Test	public void testSingleIterable2() {		SingletonIterable<String> si = new SingletonIterable<String>("test");		Iterator<String> i = si.iterator();		assertEquals("test", i.next());	}	@Test	public void testSingleIterable3() {		SingletonIterable<String> si = new SingletonIterable<String>("test");		Iterator<String> i = si.iterator();		i.next();		assertFalse(i.hasNext());	}	@Test	public void testUniq1() {		assertEquals(CH.l("a", "b", "c"), CH.uniqInplace(CH.l("a", "b", "c")));	}	@Test	public void testUniq2() {		assertEquals(CH.l(), CH.uniqInplace(CH.l()));	}	@Test	public void testUniq3() {		assertEquals(CH.l("a", "b", "c"), CH.uniqInplace(CH.l("a", "b", "b", "c")));	}	@Test	public void testUniq4() {		assertEquals(CH.l("a"), CH.uniqInplace(CH.l("a", "a", "a", "a")));	}	@Test	public void testUniq5() {		assertEquals(CH.l("a", "e"), CH.uniqInplace(CH.l("a", "a", "a", "a", "e", "e", "e")));	}	@Test	public void testUniq6() {		assertEquals(CH.l("a", "e", "f"), CH.uniqInplace(CH.l("a", "a", "a", "a", "e", "e", "e", "f")));	}	@Test	public void testUniq7() {		assertEquals(CH.l("e", "a", "e", "f"), CH.uniqInplace(CH.l("e", "a", "a", "a", "a", "e", "e", "e", "f")));	}	@Test	public void testColorHelper() {		Random rn = new Random(13);		StringBuilder sink = new StringBuilder();		for (int i = 0; i < 1000; i++) {			int r = rn.nextInt(256);			int g = rn.nextInt(256);			int b = rn.nextInt(256);			Color c = new Color(r, g, b);			int color = ColorHelper.toRgba(r, g, b, 255);			assertEquals(255, ColorHelper.getA(color));			assertEquals(r, ColorHelper.getR(color));			assertEquals(g, ColorHelper.getG(color));			assertEquals(b, ColorHelper.getB(color));			sink.setLength(0);			ColorHelper.toRgbString(color, sink);			assertEquals(color, ColorHelper.parseRgb(sink));		}	}	@Test	public void testTopTree() {		Random r = new Random(123);		boolean perf = false;		Duration d = new Duration();		for (int z = 2; z < 256; z = z * 4) {			for (int y = 2; y < 256; y = y * 4) {				for (int x = 8; x < 100000; x = x * 4) {					TopMap<Integer> tm = new TopMap<Integer>(z, (Comparator<Integer>) ComparableComparator.INSTANCE);					ArrayList<Integer> t2 = new ArrayList<Integer>();					for (int i = 0; i < x; i++) {						int j = r.nextInt(y);						tm.add(j);						if (!perf)							t2.add(j);					}					if (!perf) {						List<Integer> t3 = CH.sort(t2);						List<Integer> sl = t3.subList(0, Math.min(z, t3.size()));						for (int i = 0; i < Math.min(z, x); i++) {							assertEquals(sl.get(i), tm.get(i));						}					}				}			}		}		d.stampStdout();	}	@Test	public void testRemoveMany1() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 3, 0));	}	@Test	public void testRemoveMany2() {		assertEquals(CH.l(0, 1, 2, 4, 5, 6), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 3, 1));	}	@Test	public void testRemoveMany3() {		assertEquals(CH.l(0, 1, 2, 5, 6), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 3, 2));	}	@Test	public void testRemoveMany4() {		assertEquals(CH.l(0, 1, 2, 6), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 3, 3));	}	@Test	public void testRemoveMany5() {		assertEquals(CH.l(0, 1, 2), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 3, 4));	}	@Test	public void testRemoveMany6() {		assertEquals(CH.l(6), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 0, 6));	}	@Test	public void testRemoveMany7() {		assertEquals(CH.l(), CH.removeMany(CH.l(0, 1, 2, 3, 4, 5, 6), 0, 7));	}	@Test	public void testInsertMany1() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 0, 9));	}	@Test	public void testInsertMany2() {		assertEquals(CH.l(0, 1, 2, 3, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 1, 9));	}	@Test	public void testInsertMany3() {		assertEquals(CH.l(0, 1, 2, 3, 9, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 2, 9));	}	@Test	public void testInsertMany4() {		assertEquals(CH.l(0, 1, 2, 3, 9, 9, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 3, 9));	}	@Test	public void testInsertMany5() {		assertEquals(CH.l(0, 1, 2, 3, 9, 9, 9, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 4, 9));	}	@Test	public void testInsertMany6() {		assertEquals(CH.l(0, 1, 2, 3, 9, 9, 9, 9, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 5, 9));	}	@Test	public void testInsertMany7() {		assertEquals(CH.l(0, 1, 2, 3, 9, 9, 9, 9, 9, 9, 4, 5, 6), CH.insertMany(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 6, 9));	}	@Test	public void testInsertMany8() {		assertEquals(CH.l(), CH.insertMany(CH.l(), 0, 0, 9));	}	@Test	public void testInsertMany9() {		assertEquals(CH.l(9), CH.insertMany(CH.l(), 0, 1, 9));	}	@Test	public void testInsertMany10() {		assertEquals(CH.l(9, 9), CH.insertMany(CH.l(), 0, 2, 9));	}	@Test	public void testInsertMany11() {		assertEquals(CH.l(9, 9, 9), CH.insertMany(CH.l(), 0, 3, 9));	}	@Test	public void testInsertMany12() {		assertEquals(CH.l(0), CH.insertMany(CH.l(0), 0, 0, 9));	}	@Test	public void testInsertMany13() {		assertEquals(CH.l(9, 0), CH.insertMany(CH.l(0), 0, 1, 9));	}	@Test	public void testInsertMany14() {		assertEquals(CH.l(9, 9, 0), CH.insertMany(CH.l(0), 0, 2, 9));	}	@Test	public void testInsertMany15() {		assertEquals(CH.l(9, 9, 9, 0), CH.insertMany(CH.l(0), 0, 3, 9));	}	@Test	public void testInsertMany16() {		assertEquals(CH.l(0), CH.insertMany(CH.l(0), 1, 0, 9));	}	@Test	public void testInsertMany17() {		assertEquals(CH.l(0, 9), CH.insertMany(CH.l(0), 1, 1, 9));	}	@Test	public void testInsertMany18() {		assertEquals(CH.l(0, 9, 9), CH.insertMany(CH.l(0), 1, 2, 9));	}	@Test	public void testInsertMany19() {		assertEquals(CH.l(0, 9, 9, 9), CH.insertMany(CH.l(0), 1, 3, 9));	}	@Test	public void testSpliceMany1() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 0, (List) CH.l()));	}	@Test	public void testSpliceMany2() {		assertEquals(CH.l(0, 1, 2, 3, 7, 4, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 0, (List) CH.l(7)));	}	@Test	public void testSpliceMany3() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 4, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 0, (List) CH.l(7, 8)));	}	@Test	public void testSpliceMany4() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 9, 4, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 0, (List) CH.l(7, 8, 9)));	}	@Test	public void testSpliceMany5() {		assertEquals(CH.l(0, 1, 2, 3, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 1, (List) CH.l()));	}	@Test	public void testSpliceMany6() {		assertEquals(CH.l(0, 1, 2, 3, 7, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 1, (List) CH.l(7)));	}	@Test	public void testSpliceMany7() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 1, (List) CH.l(7, 8)));	}	@Test	public void testSpliceMany8() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 9, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 1, (List) CH.l(7, 8, 9)));	}	@Test	public void testSpliceMany9() {		assertEquals(CH.l(0, 1, 2, 3, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 2, (List) CH.l()));	}	@Test	public void testSpliceMany10() {		assertEquals(CH.l(0, 1, 2, 3, 7, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 2, (List) CH.l(7)));	}	@Test	public void testSpliceMany11() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 2, (List) CH.l(7, 8)));	}	@Test	public void testSpliceMany12() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 9, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 2, (List) CH.l(7, 8, 9)));	}	@Test	public void testSpliceMany13() {		assertEquals(CH.l(0, 1, 2, 3), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 3, (List) CH.l()));	}	@Test	public void testSpliceMany14() {		assertEquals(CH.l(0, 1, 2, 3, 7), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 3, (List) CH.l(7)));	}	@Test	public void testSpliceMany15() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 3, (List) CH.l(7, 8)));	}	@Test	public void testSpliceMany16() {		assertEquals(CH.l(0, 1, 2, 3, 7, 8, 9), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 4, 3, (List) CH.l(7, 8, 9)));	}	@Test	public void testSpliceMany17() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 7, 0, (List) CH.l()));	}	@Test	public void testSpliceMany18() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6, 7), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 7, 0, (List) CH.l(7)));	}	@Test	public void testSpliceMany19() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6, 7, 8), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 7, 0, (List) CH.l(7, 8)));	}	@Test	public void testSpliceMany20() {		assertEquals(CH.l(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), CH.splice(CH.l(0, 1, 2, 3, 4, 5, 6), 7, 0, (List) CH.l(7, 8, 9)));	}	@Test	public void testFirstDup() {		assertEquals(null, CH.firstDup(CH.l(1, 2, 3, 4, 5)));		assertEquals((Integer) 2, CH.firstDup(CH.l(2, 2, 3, 4, 5)));		assertEquals((Integer) 3, CH.firstDup(CH.l(3, 2, 3, 4, 5)));		assertEquals((Integer) 4, CH.firstDup(CH.l(4, 2, 3, 4, 5)));		assertEquals((Integer) 5, CH.firstDup(CH.l(5, 2, 3, 4, 5)));		assertEquals((Integer) 5, CH.firstDup(CH.l(1, 2, 5, 4, 5)));		assertEquals((Integer) 1, CH.firstDup(CH.l(1, 1)));		assertEquals(null, CH.firstDup(CH.l(1, 2)));		assertEquals(null, CH.firstDup(CH.l(1)));		assertEquals(null, CH.firstDup(CH.l()));		assertEquals(null, CH.firstDup(CH.l(1, 2, 3, 4, 5, 6, 7, 8)));		assertEquals((Integer) 7, CH.firstDup(CH.l(1, 7, 3, 4, 5, 6, 7, 8)));	}}