package com.f1.utils.impl;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.List;import java.util.regex.Pattern;import org.junit.Test;import com.f1.utils.SH;import com.f1.utils.TextMatcher;public class TextMatcherTests {	private static final long COUNT = 1;	@Test	public void test0() {		assertTrue(TextMatcherFactory.DEFAULT.toMatcher("h:t").matches("h:t"));	}	@Test	public void test1() {		TextMatcher t = SH.m("test|me|you");		assertTrue(SH.m("'\\t'").matches("\t"));		assertFalse(SH.m("'\\t'").matches("\\t"));		assertFalse(SH.m("\\n").matches("\\n"));		assertFalse(SH.m("\\t").matches("\\t"));		assertTrue(SH.m("\\n").matches("\n"));		assertTrue(SH.m("\\t").matches("\t"));		assertTrue(SH.m("\t").matches("\t"));		assertTrue(SH.m("$").matches(""));		assertTrue(SH.m("$$").matches("$"));		assertTrue(SH.m("$^").matches("$^"));		assertTrue(SH.m("$^").matches("$^."));		assertTrue(SH.m("^^").matches("^"));		assertTrue(SH.m("..test..").matches("atatesttab"));		assertTrue(SH.m("'whatnow'").matches("whatnow"));		assertTrue(SH.m("'what\\'now'").matches("what'now"));		assertTrue(SH.m("what\\'now").matches("what'now"));		assertTrue(SH.m("~t[abce]st").matches("test"));		assertTrue(SH.m("~co$").matches("co"));		assertTrue(SH.m("~co$").matches("cokeco"));		assertTrue(SH.m("test").matches("TEST TEST TEST"));		assertTrue(SH.m("123*456").matches("123456789"));		assertTrue(SH.m("last.name").matches("last.name=rob"));		assertTrue(SH.m("st*a").matches("first.name=rob"));		assertTrue(SH.m(".test").matches("ttest"));		assertTrue(SH.m("..test").matches("tatest"));		assertTrue(SH.m("test..").matches("testta"));		assertTrue(SH.m("..test..").matches("tatestta"));		assertTrue(SH.m("..test..").matches("tatesttab"));		assertTrue(SH.m(".....test").matches("test test"));		assertFalse(SH.m(".....test.....").matches("test tt test"));		assertTrue(SH.m("~test.....$").matches("test test test"));		assertTrue(SH.m("test..").matches("test test"));		assertFalse(SH.m(".test.$").matches("test test test"));		assertTrue(SH.m(".").matches("test test test"));		assertTrue(SH.m(".$").matches("test test test"));		assertTrue(SH.m("*").matches("test test test"));		assertTrue(SH.m("^*").matches("test test test"));		assertTrue(SH.m("^*$").matches("test test test"));		assertTrue(SH.m("*$").matches("test test test"));		assertTrue(SH.m("*.$").matches("test test test"));		assertTrue(SH.m(". * *$").matches("test test test"));		assertTrue(SH.m(". * *.$").matches("test test test"));		List<String> list = new ArrayList<String>();		list.add("Hello from New York");		list.add("first.name=rob");		list.add("last.name=cooke");		list.add("age=33");		list.add("123456789");		list.add("test test test");		list.add("test tt test");		list.add("asdftest tt test test");		list.add("asdfkasjdfkjkdljsfklaj");		list.add("asdkfhhfdskjladklfjasldfj");		list.add("asdfkjsadkfjaskdfjskadjfkdj");		list.add("asdfaskfjlasdjfhhfsldkjfklasjdfhlaskdjfklj");		list.add("The quick brown fox jumped over the lazy dog");		list.add("The quick brown f\\\\ox jumped over the lazy dog");		list.add("test.");		list.add("test..");		list.add("test...");		list.add("test....");		list.add("test\\.");		list.add("test.\\.");		list.add("test.\\..");		list.add("..\\\\..");		list.add("test.\\.\\..");		list.add("a");		list.add("aa");		list.add("aaa");		list.add("a");		list.add("b");		list.add("c");		list.add("aa");		list.add("ab");		list.add("ac");		list.add("aad");		list.add("abd");		list.add("acd");		for (int i = 0; i < 1; i++) {			long[] results = new long[5];			testGrep("test", list, results);			testGrep("hello", list, results);			testGrep("age", list, results);			testGrep("last.name", list, results);			testGrep("123*456", list, results);			testGrep("age", list, results);			testGrep("=", list, results);			testGrep("st*a", list, results);			testGrep("age=33", list, results);			testGrep("ag", list, results);			testGrep("when", list, results);			testGrep("from", list, results);			testGrep("test", list, results);			testGrep(".....test.....", list, results);			testGrep("test..\\.", list, results);			testGrep("test.\\.\\.\\$", list, results);			testGrep("test..\\\\.", list, results);			testGrep(".\\\\.", list, results);			testGrep("test.....", list, results);			testGrep(".....test", list, results);			testGrep(".test", list, results);			testGrep(".test.", list, results);			testGrep(".te*st.", list, results);			testGrep("1*3*4*5", list, results);			testGrep("1*3**4*5", list, results);			testGrep("1*3.**4*5", list, results);			testGrep("1*3.**7", list, results);			testGrep(" * * * * *", list, results);			testGrep(" * *  * * *", list, results);			testGrep(" quick fox", list, results);			testGrep(" qu\\\\ick fox", list, results);			testGrep(" quick* f\\\\ox", list, results);			testGrep(" quick ..*.. fox", list, results);			testGrep(" quick .*.*.*. fox", list, results);			testGrep("a*s*f*ja", list, results);			testGrep("a*.s*f*.j.a", list, results);			testGrep("a*.s*f*.**j.*a", list, results);			testGrep("a[asdf]a", list, results);			testGrep("a\\[asdf]a", list, results);			testGrep(" * ........*  * ......* *", list, results);			testGrep(".", list, results);			testGrep("..", list, results);			testGrep("...", list, results);			testGrep("[a]", list, results);			testGrep("[a]b", list, results);			testGrep("[ab]", list, results);			testGrep("[abe]", list, results);			testGrep("[abe].[bc]", list, results);			testGrep("from", list, results);			System.out.println("total count: " + results[0]);			System.out.println("      regex: " + results[1]);			System.out.println("       grep: " + results[2]);			System.out.println(" regex full: " + results[3]);			System.out.println("  grep full: " + results[4]);		}	}	public void testGrep(String pattern1, List<String> text, long[] results) {		for (int i = 0; i < 2; i++) {			String p = SH.repeat('.', i);			String pattern = p + pattern1 + p;			for (String t : text)				testGrep(pattern, t, results);			for (String t : text)				testGrep("^" + pattern, t, results);			for (String t : text)				testGrep(pattern + "$", t, results);			for (String t : text)				testGrep("^" + pattern + "$", t, results);		}	}	public void testGrep(String pattern, String text, long[] results) {		String pattern2 = "";		if (!pattern.startsWith("^"))			pattern2 += ".*";		pattern2 += SH.replaceAll(pattern, "*", ".*");		if (!pattern.endsWith("$"))			pattern2 += ".*";		TextMatcher grep = SH.m("~" + pattern);		Pattern regex = Pattern.compile(pattern2, 0);		TextMatcher grep2 = SH.m(pattern);		Pattern regex2 = Pattern.compile(pattern2, Pattern.CASE_INSENSITIVE);		String upper = text.toUpperCase(), lower = text.toLowerCase();		String desc = pattern + " (vs) " + pattern2 + " ==> " + text;		assertEquals("(cs as-is) " + desc, regex.matcher(text).matches(), grep.matches(text));		assertEquals("(ci as-is) " + desc, regex2.matcher(text).matches(), grep2.matches(text));		assertEquals("(cs upper) " + desc, regex.matcher(upper).matches(), grep.matches(upper));		assertEquals("(ci upper) " + desc, regex2.matcher(upper).matches(), grep2.matches(upper));		assertEquals("(cs lower) " + desc, regex.matcher(lower).matches(), grep.matches(lower));		assertEquals("(ci lower) " + desc, regex2.matcher(lower).matches(), grep2.matches(lower));		{			long start = System.currentTimeMillis();			for (int i = 0; i < COUNT; i++) {				regex.matcher(text).matches();			}			long end = System.currentTimeMillis();			results[1] += end - start;		}		{			long start = System.currentTimeMillis();			for (int i = 0; i < COUNT; i++) {				grep.matches(text);			}			long end = System.currentTimeMillis();			results[2] += end - start;		}		{			long start = System.currentTimeMillis();			for (int i = 0; i < COUNT; i++) {				regex = Pattern.compile(pattern2, 0);				regex.matcher(text).matches();			}			long end = System.currentTimeMillis();			results[3] += end - start;		}		{			long start = System.currentTimeMillis();			for (int i = 0; i < COUNT; i++) {				grep = GrepTextMatcher.valueOf("~" + pattern, false);				grep.matches(text);			}			long end = System.currentTimeMillis();			results[4] += end - start;		}		results[0] += COUNT;	}	private List<String> data = new ArrayList<String>();	public TextMatcherTests() {		init();	}	private void init() {		data.clear();		data.add("This is a test");		data.add("a");		data.add("b");		data.add("c");		data.add("aa");		data.add("ab");		data.add("ac");		data.add("aad");		data.add("aadaad");		data.add("abd");		data.add("acd");		data.add("hello henry");		data.add("Where is the cat?");		data.add("Where is the cat\\.");	}	public String grep(String text) {		StringBuilder sb = new StringBuilder();		TextMatcher matcher = TextMatcherFactory.DEFAULT.toMatcher(text);		for (String s : data)			if (matcher.matches(s))				sb.append(s).append(SH.NEWLINE);		return sb.toString();	}	public String grep(String text, String input) {		StringBuilder sb = new StringBuilder();		TextMatcher matcher = TextMatcherFactory.DEFAULT.toMatcher(text);		if (matcher.matches(input))			sb.append(input).append(SH.NEWLINE);		return sb.toString();	}	@Test	public void test() {		TextMatcher m = SH.m("h\\..sh");		assertTrue(m.matches("h.ash"));		assertFalse(m.matches("haash"));		assertTrue(m.matches("h..sh"));		assertFalse(m.matches("ha.sh"));	}	@Test	public void testOr() {		TextMatcher m = SH.m("(abc)|(def)");		assertTrue(m.matches("abc"));		assertTrue(m.matches("def"));		assertFalse(m.matches("ghi"));		assertTrue(SH.m("(abc)|(abc)").matches("abcabc"));	}	@Test	public void test5() {		TextMatcher m = SH.m("(*this)|(\\~*)");		assertTrue(m.matches("~"));		assertFalse(m.matches("a"));		assertTrue(SH.m("*").matches("test"));		assertTrue(SH.m("es").matches("test"));		assertTrue(SH.m("*es*").matches("test"));		assertTrue(SH.m("").matches(""));		assertFalse(SH.m("").matches("this"));		assertFalse(SH.m("~").matches("~"));		assertTrue(SH.m("~~").matches("~"));		assertTrue(SH.m("\\~").matches("~abc"));		assertTrue(SH.m("\\~abc").matches("~abc"));	}	@Test	public void test2() {		TextMatcher m = SH.m("GOOG");		StringBuilder text = new StringBuilder("\t100\t$5.000\t10:28:12\tNASD\t00000046PS\t\tBuyTGI\t");		assertFalse(m.matches(text));	}	@Test	public void test3() {		TextMatcher m = TextMatcherFactory.DEFAULT.toMatcher("(GOOG)|()");		assertTrue(m.matches("GOOG"));		assertTrue(m.matches("GOOGLE"));		assertTrue(m.matches(""));	}	@Test	public void test4() {		assertTrue(SH.m("(AMAZON)&(VIDEO)").matches("AMAZON VIDEO"));		assertFalse(SH.m("(AMAZON)&!(VIDEO)").matches("AMAZON VIDEO"));		assertTrue(SH.m("(~AMAZON)&(~VIDEO)").matches("AMAZON VIDEO"));		assertFalse(SH.m("(~AMAZON)&!(~VIDEO)").matches("AMAZON VIDEO"));		assertFalse(SH.m("(~AMAZON)&(~VIDEO)").matches("AMAZOn VIDEo"));		assertFalse(SH.m("(~AMAZON)&!(~VIDEO)").matches("AMAZOn VIDEo"));	}	@Test	public void testRegex() {		assertTrue(SH.m("/test/").matches("test"));		assertFalse(SH.m("/test/").matches("Test"));		assertTrue(SH.m("/test/i/").matches("Test"));		assertTrue(SH.m("/test/i/?*:asdf").matches("Test"));		assertFalse(SH.m("/test//?*:asdf").matches("Test"));		assertTrue(SH.m("me|my|mo").matches("me"));		assertTrue(SH.m("me|my|mo").matches("my"));		assertTrue(SH.m("me|my|mo").matches("mo"));		assertFalse(SH.m("me|my|mo").matches("ma"));		assertTrue(SH.m("(me|my|mo)").matches("me"));		assertTrue(SH.m("(me|my|mo)").matches("my"));		assertTrue(SH.m("(me|my|mo)").matches("mo"));		assertFalse(SH.m("(me|my|mo)").matches("ma"));		assertTrue(SH.m("((me)|(my)|(mo))").matches("me"));		assertTrue(SH.m("((me)|(my)|(mo))").matches("my"));		assertTrue(SH.m("((me)|(my)|(mo))").matches("mo"));		assertFalse(SH.m("((me)|(my)|(mo))").matches("ma"));		assertTrue(SH.m("((me)|(my)|(*a))").matches("ma"));		assertTrue(SH.m("me|(my&yes)|mo").matches("me"));		assertFalse(SH.m("me|(my&yes)|mo").matches("my"));		assertTrue(SH.m("me|(my&yes)|mo").matches("myes"));		assertFalse(SH.m("'me|(my&yes)|mo'").matches("myes"));		assertTrue(SH.m("'me|(my&yes)|mo'|myes").matches("myes"));	}	@Test	public void testBigOr() {		StringBuilder sb = new StringBuilder();		for (int i = 0; i < 4000; i += 2) {			if (i > 0)				sb.append('|');			sb.append(i);		}		sb.append("|Rob|Steve|Erin*|Cooke");		{			TextMatcher m = TextMatcherFactory.FULL_CASE_INSENSETIVE.toMatcher(sb.toString());			for (int i = 0; i < 4000; i++) {				String s = SH.toString(i);				assertEquals(s, i % 2 == 0, m.matches(s));			}			assertTrue(m.matches("Rob"));			assertTrue(m.matches("Steve"));			assertTrue(m.matches("ROB"));			assertTrue(m.matches("STEVE"));			assertFalse(m.matches("Eric"));			assertFalse(m.matches("ERIC"));			assertTrue(m.matches("ERINBLAH"));		}		{			TextMatcher m = TextMatcherFactory.FULL_CASE_SENSETIVE.toMatcher(sb.toString());			for (int i = 0; i < 4000; i++) {				String s = SH.toString(i);				assertEquals(s, i % 2 == 0, m.matches(s));			}			assertTrue(m.matches("Rob"));			assertTrue(m.matches("Steve"));			assertFalse(m.matches("ROB"));			assertFalse(m.matches("STEVE"));			assertFalse(m.matches("Eric"));			assertFalse(m.matches("ERIC"));			assertFalse(m.matches("ERINBLAH"));		}		{			long start = System.currentTimeMillis();			TextMatcher m = TextMatcherFactory.FULL_CASE_SENSETIVE.toMatcher(sb.toString());			for (int i = 0; i < 500000; i++) {				String s = SH.toString(i);				m.matches(s);			}			long end = System.currentTimeMillis();			assertTrue(end - start < 2000);		}	}	@Test	public void testBigOr2() {		StringBuilder sb = new StringBuilder();		sb.append("|Rob|Steve|Erin|Jason|Test*This");		TextMatcher m = TextMatcherFactory.FULL_CASE_INSENSETIVE.toMatcher(sb.toString());		assertTrue(m.matches("Rob"));		assertTrue(m.matches("Steve"));		assertFalse(m.matches("ERIC"));		assertTrue(m.matches("TestAllOfThis"));		assertTrue(m.matches(new StringBuilder("TestAllOfThis")));		assertTrue(m.matches(new StringBuilder("Rob")));		assertFalse(m.matches("TestThat"));	}}