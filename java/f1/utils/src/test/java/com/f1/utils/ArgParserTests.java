package com.f1.utils;import static org.junit.Assert.assertEquals;import org.junit.Test;import com.f1.utils.string.JavaExpressionParser;import com.f1.utils.structs.table.derived.BasicDerivedCellParser;import com.f1.utils.structs.table.stack.CalcFrameStack;import com.f1.utils.structs.table.stack.EmptyCalcFrameStack;public class ArgParserTests {	@Test	public void test1() {		ArgParser ap = new ArgParser('=', "-", "--", "Test Argument Parser");		ap.addSwitchRequired("f", "file", "true", "file name");		System.out.println(ap.toLegibleString());		try {			System.out.println(ap.parse("-f=file -d=/asdf/ -c=123  some other options -c=234 are present -c='blah blah' 'asdf=123' -p"));		} catch (Exception e) {			System.out.println(SH.printStackTrace(e));		}	}	@Test	public void test2() {		BasicDerivedCellParser INSTANCE = new BasicDerivedCellParser(new JavaExpressionParser());		CalcFrameStack context = EmptyCalcFrameStack.INSTANCE;		assertEquals(Boolean.FALSE, INSTANCE.toCalc("!true", context).get(EmptyCalcFrameStack.INSTANCE));		assertEquals(68, INSTANCE.toCalc("2*32+4", context).get(EmptyCalcFrameStack.INSTANCE));		assertEquals(Boolean.TRUE, INSTANCE.toCalc("\"test\" =~ \"test\"", context).get(EmptyCalcFrameStack.INSTANCE));		assertEquals(Boolean.TRUE, INSTANCE.toCalc("\"test\" !~ \"testa\" && \"test\" !~ \"testa\" ", context).get(EmptyCalcFrameStack.INSTANCE));		assertEquals(Boolean.TRUE, INSTANCE.toCalc("\"test\" !~ \"testa\" || \"test\" !~ \"testa\" ", context).get(EmptyCalcFrameStack.INSTANCE));	}}