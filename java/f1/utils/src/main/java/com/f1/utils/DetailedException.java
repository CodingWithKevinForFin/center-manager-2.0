package com.f1.utils;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.Set;import com.f1.base.Legible;import com.f1.base.Valued;import com.f1.utils.assist.RootAssister;import com.f1.utils.impl.BasicLabeler;import com.f1.utils.structs.PrimitiveArrayIterator;public class DetailedException extends RuntimeException implements Legible {	private static final int MAX_LENGTH = 1024 * 1024;	private String message;	public DetailedException() {		init();	}	public DetailedException(String message, Throwable cause) {		super(message, cause);		this.message = message;		init();	}	public DetailedException(String message) {		super(message);		this.message = message;		init();	}	public DetailedException(Throwable cause) {		super(cause);		this.message = null;		init();	}	private void init() {		if (message != null)			items.addItem("exception_text", message, true);	}	public DetailedException set(String label, Object value) {		int maxDebugStringLength = F1GlobalProperties.getMaxDebugStringLength();		int maxLoop = F1GlobalProperties.getMaxCollectionToDelineate();		try {			appendItem(label, value == null ? "null" : value, maxDebugStringLength, maxLoop, items);		} catch (Throwable t) {			appendItem(label, "CRITICAL ERROR COULD NOT STORE VALUE DUE TO EXCEPTION WHILE CONVERTING TO STRING: " + t, maxDebugStringLength, maxLoop, items);		}		return this;	}	protected void appendItem(String label, Object value, int maxDebugStringLength, int maxLoop, Labeler items) {		if (value != null && value.getClass().isArray()) {			boolean empty = true;			int cnt = 0;			for (Object o : new PrimitiveArrayIterator(value)) {				if (cnt++ >= maxLoop) {					appendItem(label, "...", maxDebugStringLength, maxLoop, items);					break;				}				empty = false;				appendItem(label, o, maxDebugStringLength, maxLoop, items);			}			if (empty)				items.addItem(label, "<empty list>", true);		} else if (value instanceof Valued) {			items.addItem(label, SH.ddd(convertToString(value), maxDebugStringLength), true);		} else if (value instanceof Iterable) {			try {				int cnt = 0;				for (Object o : ((Iterable<Object>) value)) {					if (++cnt > maxLoop) {						items.addItem(label, "<skipping remaining>", true);						break;					}					appendItem(label, o, maxDebugStringLength, maxLoop, items);				}				if (cnt == 0)					items.addItem(label, "<empty list>", true);			} catch (Exception e) {				items.addItem(label, SH.ddd(convertToString(value), maxDebugStringLength), true);			}		} else			items.addItem(label, SH.ddd(convertToString(value), maxDebugStringLength), true);	}	protected String convertToString(Object value) {		try {			return RootAssister.INSTANCE.toLegibleString(value, MAX_LENGTH);		} catch (Exception e) {			return OH.toString(value);		}	}	public DetailedException set(String label, Object[] values) {		for (Object value : values)			set(label, value);		return this;	}	public DetailedException addKeyValues(String label, List<String> values) {		items.addItems(label, values);		return this;	}	private transient Labeler items = new BasicLabeler();	@Override	public String toLegibleString() {		return items.toString();	}	public DetailedException setIfPresent(String label, Object value) {		if (value == null)			return this;		if (value instanceof Collection && ((Collection) value).size() == 0)			return this;		if (value instanceof Map && ((Map) value).size() == 0)			return this;		return set(label, value);	}	@Override	public String getMessage() {		return super.getMessage();	}	public String getExceptionMessage() {		return super.getMessage();	}	public Set<String> getKeys() {		return items.getLabels();	}	public List<String> getValues(String key) {		return items.getItems(key);	}	public DetailedException setWithType(String label, Object object) {		set(label, object);		if (object != null)			set(label + " class", object.getClass().getName());		return this;	}}