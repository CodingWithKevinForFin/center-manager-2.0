package com.f1.utils.string;import java.util.Map;import com.f1.base.Pointer;import com.f1.utils.BasicPointer;import com.f1.utils.CH;import com.f1.utils.SH;public class TestParse {	static public String test = "ok";	static public String lib;	public static final Map<Character, Integer> P = CH.m('+', 0, '-', 0, '*', 1, '/', 1, '^', 2);	public static void main(String a[]) {		test("a*b+c*d");		test("a+b*c+d");		test("a+b+c+d");	}	private static void test(String t) {		System.out.println(t);		char[] c = t.toCharArray();		N h = handle2(c, new BasicPointer<Integer>(0));		System.out.println();		System.out.println(h);		System.out.println();	}	private static N handle2(char[] c, Pointer<Integer> i) {		N l = readVariable(c, i);// new N(read(c, i));		if (i.get() == c.length)			return l;		char v = read(c, i);		if (v == ')')			return l;		l = new N(l, v, readVariable(c, i));		return new N(handle2(l, c, i));	}	private static N handle2(N root, char[] c, Pointer<Integer> i) {		if (i.get() == c.length)			return root;		Character op = read(c, i);		if (op == ')')			return root;		N t = root;		N v = readVariable(c, i);		while (t.r != null) {			if (CH.getOrThrow(P, t.o) >= CH.getOrThrow(P, op)) {				t.l = new N(t.l, t.o, t.r);				t.o = op;				t.r = v;				return handle2(root, c, i);			}			t = t.r;		}		t.o = op;		t.r = v;		t.l = new N(t.v);		t.v = null;		return handle2(root, c, i);	}	private static N readVariable(char[] c, Pointer<Integer> i) {		char variable = read(c, i);		if (variable == '(')			return handle2(c, i);		return new N(variable);	}	private static char read(char[] c, Pointer<Integer> i) {		char r = c[i.get()];		i.put(i.get() + 1);		return r;	}	public static class N {		N l, r;		Object v;		Character o;		public N(Object v) {			this.v = v;		}		public N(N l, char o, N r) {			this.l = l;			this.r = r;			this.o = o;		}		@Override		public String toString() {			return v != null ? v.toString() : "(" + SH.s(l) + o + SH.s(r) + ")";		}	}}// EOF