package com.f1.utils.flogger.impl;import com.f1.utils.flogger.Flogger;import com.f1.utils.flogger.FloggerAdapter;import com.f1.utils.flogger.FloggerFormatter;public class PassthroughFlogger implements Flogger {	public static final PassthroughFlogger INSTANCE = new PassthroughFlogger();	private PassthroughFlogger() {	}	private BasicFloggerManager manager = new BasicFloggerManager();	@Override	public void all(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, ALL, message, extra);	}	@Override	public void trace(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, TRACE, message, extra);	}	@Override	public void finest(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, FINEST, message, extra);	}	@Override	public void finer(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, FINER, message, extra);	}	@Override	public void fine(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, FINE, message, extra);	}	@Override	public void debug(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, DEBUG, message, extra);	}	@Override	public void config(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, CONFIG, message, extra);	}	@Override	public void info(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, INFO, message, extra);	}	@Override	public void warning(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, WARNING, message, extra);	}	@Override	public void error(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, ERROR, message, extra);	}	@Override	public void severe(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, SEVERE, message, extra);	}	@Override	public void fatal(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, FATAL, message, extra);	}	@Override	public void off(Object innerLogger, boolean passThroughToInner, Object message, Object extra) {		log(innerLogger, passThroughToInner, OFF, message, extra);	}	@Override	public void all(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, ALL, message, null);	}	@Override	public void trace(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, TRACE, message, null);	}	@Override	public void finest(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, FINEST, message, null);	}	@Override	public void finer(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, FINER, message, null);	}	@Override	public void fine(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, FINE, message, null);	}	@Override	public void debug(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, DEBUG, message, null);	}	@Override	public void config(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, CONFIG, message, null);	}	@Override	public void info(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, INFO, message, null);	}	@Override	public void warning(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, WARNING, message, null);	}	@Override	public void error(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, ERROR, message, null);	}	@Override	public void severe(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, SEVERE, message, null);	}	@Override	public void fatal(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, FATAL, message, null);	}	@Override	public void off(Object innerLogger, boolean passThroughToInner, Object message) {		log(innerLogger, passThroughToInner, OFF, message, null);	}	@Override	public String getTransactionId() {		return "PASSTHROUGH FLOGGER";	}	@Override	public void log(Object innerLogger_, boolean passThroughToInner_, int level_, Object message_, Object extra_) {		FloggerAdapter<Object> adapter = manager.getAdapter(innerLogger_);	}	@Override	public boolean hasAtleast(int floggerLevel_) {		return true;	}	@Override	public String toDetailedString() {		return "";	}	@Override	public StringBuilder toDetailedString(FloggerFormatter formatter_, StringBuilder sink_) {		return sink_;	}	@Override	public String toSummaryString() {		return "";	}	@Override	public String toSummaryString(int maxLength_) {		return toSummaryString();	}}