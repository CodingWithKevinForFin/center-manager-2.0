package com.f1.utils;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.Set;import com.f1.base.Legible;import com.f1.utils.assist.RootAssister;import com.f1.utils.impl.BasicLabeler;public class DetailedCheckedException extends Exception implements Legible {	private static final int MAX_LENGTH = 1024 * 1024;	private String message;	public DetailedCheckedException() {		init();	}	public DetailedCheckedException(String message, Throwable cause) {		super(message, cause);		this.message = message;		init();	}	public DetailedCheckedException(String message) {		super(message);		this.message = message;		init();	}	public DetailedCheckedException(Throwable cause) {		super(cause);		this.message = null;		init();	}	private void init() {		items.addItem("exception_text", message, true);	}	public DetailedCheckedException set(String label, Object value) {		int maxDebugStringLength = F1GlobalProperties.getMaxDebugStringLength();		appendItem(label, value, maxDebugStringLength, items);		return this;	}	protected void appendItem(String label, Object value, int maxDebugStringLength, Labeler items) {		if (value != null && value.getClass().isArray()) {			boolean empty = true;			for (Object o : (Object[]) value) {				empty = false;				appendItem(label, o, maxDebugStringLength, items);			}			if (empty)				items.addItem(label, "<empty list>", true);		} else if (value instanceof Iterable) {			boolean empty = true;			for (Object o : ((Iterable<Object>) value)) {				empty = false;				appendItem(label, o, maxDebugStringLength, items);			}			if (empty)				items.addItem(label, "<empty list>", true);		} else			items.addItem(label, SH.ddd(convertToString(value, MAX_LENGTH), maxDebugStringLength), true);	}	protected String convertToString(Object value, int maxlength) {		return RootAssister.INSTANCE.toLegibleString(value, maxlength);	}	public DetailedCheckedException set(String label, Object[] values) {		for (Object value : values)			set(label, value);		return this;	}	private transient Labeler items = new BasicLabeler();	@Override	public String toLegibleString() {		return items.toString();	}	public DetailedCheckedException setIfPresent(String label, Object value) {		if (value == null)			return this;		if (value instanceof Collection && ((Collection) value).size() == 0)			return this;		if (value instanceof Map && ((Map) value).size() == 0)			return this;		return set(label, value);	}	@Override	public String getMessage() {		return super.getMessage();	}	public String getExceptionMessage() {		return super.getMessage();	}	public Set<String> getKeys() {		return items.getLabels();	}	public List<String> getValues(String key) {		return items.getItems(key);	}}