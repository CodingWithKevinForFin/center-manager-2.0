package com.f1.utils.mutable;import com.f1.base.ToStringable;import com.f1.utils.OH;import com.f1.utils.SH;public class Mutable {	public static class Int implements ToStringable, Comparable<Int> {		public Int() {		}		public Int(int value) {			this.value = value;		}		public int value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Int o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Int && compareTo((Int) obj) == 0;		}	}	public static class Long implements ToStringable, Comparable<Long> {		public Long() {		}		public Long(long value) {			this.value = value;		}		public long value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Long o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Long && compareTo((Long) obj) == 0;		}	}	public static class Short implements ToStringable, Comparable<Short> {		public Short() {		}		public Short(short value) {			this.value = value;		}		public short value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Short o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Short && compareTo((Short) obj) == 0;		}	}	public static class Byte implements ToStringable, Comparable<Byte> {		public Byte() {		}		public Byte(byte value) {			this.value = value;		}		public byte value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Byte o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Byte && compareTo((Byte) obj) == 0;		}	}	public static class Float implements ToStringable, Comparable<Float> {		public Float() {		}		public Float(float value) {			this.value = value;		}		public float value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Float o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Float && compareTo((Float) obj) == 0;		}	}	public static class Double implements ToStringable, Comparable<Double> {		public Double() {		}		public Double(double value) {			this.value = value;		}		public double value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Double o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Double && compareTo((Double) obj) == 0;		}	}	public static class Char implements ToStringable, Comparable<Char> {		public Char() {		}		public Char(char value) {			this.value = value;		}		public char value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Char o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Char && compareTo((Char) obj) == 0;		}	}	public static class Boolean implements ToStringable, Comparable<Boolean> {		public Boolean() {		}		public Boolean(boolean value) {			this.value = value;		}		public boolean value;		@Override		public String toString() {			return SH.toString(value);		}		@Override		public StringBuilder toString(StringBuilder sink) {			return sink.append(value);		}		@Override		public int compareTo(Boolean o) {			return OH.compare(this.value, o.value);		}		@Override		public boolean equals(Object obj) {			return obj instanceof Boolean && compareTo((Boolean) obj) == 0;		}	}}