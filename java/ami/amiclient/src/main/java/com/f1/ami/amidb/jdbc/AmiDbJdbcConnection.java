package com.f1.ami.amidb.jdbc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.logging.Logger;

import com.f1.ami.center.ds.FastJdbcConnection;
import com.f1.base.Table;
import com.f1.utils.LH;
import com.f1.utils.ToDoException;

public class AmiDbJdbcConnection implements FastJdbcConnection {

	private AmiDbJdbcClient client;
	private static final Logger log = LH.get();
	private static boolean __firstAutocommitLog = false;

	public AmiDbJdbcConnection(AmiDbJdbcClient client) {
		this.client = client;
	}

	@Override
	public Statement createStatement() throws SQLException {
		return new AmiDbJdbcStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new AmiDbJdbcPreparedStatement(this, sql);
	}

	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		throw unsupported("prepareCall");
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return createStatement();
	}
	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return createStatement();
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return prepareCall(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return prepareStatement(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return prepareStatement(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return prepareStatement(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return prepareStatement(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return prepareStatement(sql);
	}

	@Override
	public void close() throws SQLException {
		client.close();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return client.isClosed();
	}
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw unsupported("unwrap");
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}
	@Override
	public boolean isReadOnly() throws SQLException {
		return false;
	}
	@Override
	public void rollback() throws SQLException {
		if (!this.client.ignoreRollback())
			throw unsupported("rollback2");
	}

	@Override
	public void setCatalog(String catalog) throws SQLException {
	}

	@Override
	public String getCatalog() throws SQLException {
		return null;
	}

	@Override
	public void setTransactionIsolation(int level) throws SQLException {
		if (level != getTransactionIsolation())
			throw unsupported("setTransactionIsolation");

	}

	@Override
	public int getTransactionIsolation() throws SQLException {
		return TRANSACTION_NONE;
	}

	@Override
	public void setReadOnly(boolean readOnly) throws SQLException {
		if (readOnly != isReadOnly())
			throw unsupported("setReadOnly");
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		throw unsupported("prepareCall");
	}

	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		throw unsupported("getTypeMap");
	}

	@Override
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		throw unsupported("setTypeMap");
	}

	@Override
	public void setHoldability(int holdability) throws SQLException {
		throw unsupported("setHoldability");
	}

	@Override
	public int getHoldability() throws SQLException {
		throw unsupported("getHoldability");
	}

	@Override
	public Savepoint setSavepoint() throws SQLException {
		throw unsupported("savePoint");
	}

	@Override
	public Savepoint setSavepoint(String name) throws SQLException {
		throw unsupported("savePoint2");
	}

	@Override
	public void rollback(Savepoint savepoint) throws SQLException {
		if (!this.client.ignoreRollback())
			throw unsupported("rollback");
	}

	@Override
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw unsupported("releaseSavepoint");
	}

	@Override
	public Clob createClob() throws SQLException {
		throw unsupported("createClob");
	}

	@Override
	public Blob createBlob() throws SQLException {
		throw unsupported("createBlob");
	}

	@Override
	public NClob createNClob() throws SQLException {
		throw unsupported("createNClob");
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
		throw unsupported("createSQLXML");
	}

	@Override
	public boolean isValid(int timeout) throws SQLException {
		return true;
	}

	@Override
	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		throw unsupported("setClientInfo2");
	}

	@Override
	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		throw unsupported("setClientInfo");
	}

	@Override
	public String getClientInfo(String name) throws SQLException {
		throw unsupported("getClientInfo2");
	}

	@Override
	public Properties getClientInfo() throws SQLException {
		throw unsupported("getClientInfo");
	}

	@Override
	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		throw unsupported("createArrayOf");
	}

	@Override
	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		throw unsupported("createStruct");
	}

	private UnsupportedOperationException unsupported(String msg) {
		LH.info(log, getClass().getSimpleName() + ":Going to throw unsupported operation exception: " + msg);
		return new UnsupportedOperationException(msg);
	}

	@Override
	public String nativeSQL(String sql) throws SQLException {
		return sql;
	}

	@Override
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		if (autoCommit != getAutoCommit()) {
			if (__firstAutocommitLog) {
				LH.warning(log, "AMIJDBC Driver does not support autocommit=" + autoCommit + " (suppressing further warnings on this)");
				__firstAutocommitLog = false;
			}
		}
	}
	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return new AmiDbJdbcDatabaseMetaData(this, client.getUrl(), client.getUsername());
	}
	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {
	}

	@Override
	public boolean getAutoCommit() throws SQLException {
		return true;
	}

	@Override
	public void commit() throws SQLException {
	}

	public AmiDbJdbcClient getAmiClient() {
		return this.client;
	}

	public void abort(Executor arg0) throws SQLException {
		throw new ToDoException();
	}

	public int getNetworkTimeout() throws SQLException {
		throw new ToDoException();
	}

	public String getSchema() throws SQLException {
		return "AMI";
	}

	public void setNetworkTimeout(Executor arg0, int arg1) throws SQLException {
		throw new ToDoException();
	}

	public void setSchema(String arg0) throws SQLException {
		throw new ToDoException();
	}

	@Override
	public boolean supportFastInsert() {
		return this.client.supportFastInsert();
	}

	@Override
	public void fastInsert(String tablename, List<String> columns, Table data, long timeoutMillis) throws SQLException {
		try {
			this.client.insert(tablename, columns, data, timeoutMillis);
		} catch (SQLException e) {
			throw e;
		} catch (Exception e) {
			throw new SQLException("Error inserting to table '" + tablename + "'", e);
		}
	}
}
