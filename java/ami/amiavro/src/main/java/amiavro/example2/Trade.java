/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package amiavro.example2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6062735837207557218L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"amiavro.example2\",\"fields\":[{\"name\":\"sym\",\"type\":\"string\"},{\"name\":\"time\",\"type\":[\"long\",\"null\"]},{\"name\":\"px\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<Trade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trade> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trade to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trade from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trade instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence sym;
   private java.lang.Long time;
   private java.lang.Double px;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param sym The new value for sym
   * @param time The new value for time
   * @param px The new value for px
   */
  public Trade(java.lang.CharSequence sym, java.lang.Long time, java.lang.Double px) {
    this.sym = sym;
    this.time = time;
    this.px = px;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sym;
    case 1: return time;
    case 2: return px;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sym = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.Long)value$; break;
    case 2: px = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sym' field.
   * @return The value of the 'sym' field.
   */
  public java.lang.CharSequence getSym() {
    return sym;
  }


  /**
   * Sets the value of the 'sym' field.
   * @param value the value to set.
   */
  public void setSym(java.lang.CharSequence value) {
    this.sym = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'px' field.
   * @return The value of the 'px' field.
   */
  public java.lang.Double getPx() {
    return px;
  }


  /**
   * Sets the value of the 'px' field.
   * @param value the value to set.
   */
  public void setPx(java.lang.Double value) {
    this.px = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static amiavro.example2.Trade.Builder newBuilder() {
    return new amiavro.example2.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static amiavro.example2.Trade.Builder newBuilder(amiavro.example2.Trade.Builder other) {
    if (other == null) {
      return new amiavro.example2.Trade.Builder();
    } else {
      return new amiavro.example2.Trade.Builder(other);
    }
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static amiavro.example2.Trade.Builder newBuilder(amiavro.example2.Trade other) {
    if (other == null) {
      return new amiavro.example2.Trade.Builder();
    } else {
      return new amiavro.example2.Trade.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trade instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private java.lang.CharSequence sym;
    private java.lang.Long time;
    private java.lang.Double px;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(amiavro.example2.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sym)) {
        this.sym = data().deepCopy(fields()[0].schema(), other.sym);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.px)) {
        this.px = data().deepCopy(fields()[2].schema(), other.px);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(amiavro.example2.Trade other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sym)) {
        this.sym = data().deepCopy(fields()[0].schema(), other.sym);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.px)) {
        this.px = data().deepCopy(fields()[2].schema(), other.px);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'sym' field.
      * @return The value.
      */
    public java.lang.CharSequence getSym() {
      return sym;
    }


    /**
      * Sets the value of the 'sym' field.
      * @param value The value of 'sym'.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder setSym(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sym = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sym' field has been set.
      * @return True if the 'sym' field has been set, false otherwise.
      */
    public boolean hasSym() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sym' field.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder clearSym() {
      sym = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder setTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'px' field.
      * @return The value.
      */
    public java.lang.Double getPx() {
      return px;
    }


    /**
      * Sets the value of the 'px' field.
      * @param value The value of 'px'.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder setPx(java.lang.Double value) {
      validate(fields()[2], value);
      this.px = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'px' field has been set.
      * @return True if the 'px' field has been set, false otherwise.
      */
    public boolean hasPx() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'px' field.
      * @return This builder.
      */
    public amiavro.example2.Trade.Builder clearPx() {
      px = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.sym = fieldSetFlags()[0] ? this.sym : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.Long) defaultValue(fields()[1]);
        record.px = fieldSetFlags()[2] ? this.px : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sym);

    if (this.time == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.time);
    }

    if (this.px == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.px);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sym = in.readString(this.sym instanceof Utf8 ? (Utf8)this.sym : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.time = null;
      } else {
        this.time = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.px = null;
      } else {
        this.px = in.readDouble();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sym = in.readString(this.sym instanceof Utf8 ? (Utf8)this.sym : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.time = null;
          } else {
            this.time = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.px = null;
          } else {
            this.px = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










