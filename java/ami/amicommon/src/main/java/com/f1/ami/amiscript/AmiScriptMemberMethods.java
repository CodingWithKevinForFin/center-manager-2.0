package com.f1.ami.amiscript;import java.util.List;import com.f1.utils.CH;import com.f1.utils.structs.table.derived.BasicMethodFactory;public class AmiScriptMemberMethods {	private static List<? extends AmiScriptBaseMemberMethods> METHODS_LIST;	static {		METHODS_LIST = CH.l(//				AmiScriptMemberMethods_Row.INSTANCE //				, AmiScriptMemberMethods_List.INSTANCE //				, AmiScriptMemberMethods_Map.INSTANCE //				, AmiScriptMemberMethods_Set.INSTANCE //				, AmiScriptMemberMethods_Iterator.INSTANCE //				, AmiScriptMemberMethods_Random.INSTANCE //				, AmiScriptMemberMethods_Collection.INSTANCE //				, AmiScriptMemberMethods_Table.INSTANCE //				, AmiScriptMemberMethods_TableSet.INSTANCE //				, AmiScriptMemberMethods_Error.INSTANCE //				, AmiScriptMemberMethods_Image.INSTANCE //				, AmiScriptMemberMethods_ColorGradient.INSTANCE //				, AmiScriptMemberMethods_Rectangle.INSTANCE//				, AmiScriptMemberMethods_Point.INSTANCE//				, AmiScriptMemberMethods_Complex.INSTANCE//				, AmiScriptMemberMethods_UUID.INSTANCE//				, AmiScriptMemberMethods_BigInteger.INSTANCE//				, AmiScriptMemberMethods_BigDecimal.INSTANCE //				, AmiScriptMemberMethods_ZipBuilder.INSTANCE //				, AmiScriptMemberMethods_Iterable.INSTANCE//				, AmiScriptMemberMethods_Object.INSTANCE//				, AmiScriptMemberMethods_Short.INSTANCE//				, AmiScriptMemberMethods_Long.INSTANCE//				, AmiScriptMemberMethods_Double.INSTANCE//				, AmiScriptMemberMethods_Byte.INSTANCE//				, AmiScriptMemberMethods_Float.INSTANCE//				, AmiScriptMemberMethods_String.INSTANCE//				, AmiScriptMemberMethods_Binary.INSTANCE//				, AmiScriptMemberMethods_StringBuilder.INSTANCE//				, AmiScriptMemberMethods_Integer.INSTANCE//				, AmiScriptMemberMethods_UTC.INSTANCE//				, AmiScriptMemberMethods_UTCN.INSTANCE//				, AmiScriptMemberMethods_Password.INSTANCE//				, AmiScriptMemberMethods_XmlElement.INSTANCE//				, AmiScriptMemberMethods_XmlParser.INSTANCE//				, AmiScriptMemberMethods_XmlText.INSTANCE//				, AmiScriptMemberMethods_XMLBuilder.INSTANCE//				, AmiScriptMemberMethods_ICalendar.INSTANCE//		);	}	static public void registerMethods(AmiDebugManager debugManager, BasicMethodFactory mFactory) {		Class<?> dfltImpl = null;		String description = null;		String varTypeName;		for (AmiScriptBaseMemberMethods<?> outer : METHODS_LIST) {			mFactory.addClassDebugInspector(outer);			dfltImpl = outer.getVarDefaultImpl();			varTypeName = outer.getVarTypeName();			if (dfltImpl == null)				mFactory.addVarType(varTypeName, outer.getVarType());			else				mFactory.addVarType(varTypeName, outer.getVarType(), dfltImpl);			description = outer.getVarTypeDescription();			if (description != null)				mFactory.addVarTypeDescription(varTypeName, description);			for (AmiAbstractMemberMethod<?> inner : outer.getMethods())				mFactory.addMemberMethod(inner);		}	}}