package com.f1.ami.web;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.logging.Logger;import com.f1.ami.amicommon.AmiConsts;import com.f1.ami.amicommon.AmiUtils;import com.f1.suite.web.menu.WebMenu;import com.f1.suite.web.menu.impl.BasicWebMenu;import com.f1.suite.web.menu.impl.BasicWebMenuDivider;import com.f1.suite.web.menu.impl.BasicWebMenuLink;import com.f1.suite.web.peripheral.KeyEvent;import com.f1.suite.web.portal.PortletConfig;import com.f1.suite.web.portal.impl.ColorPickerListener;import com.f1.suite.web.portal.impl.ColorPickerPortlet;import com.f1.suite.web.portal.impl.ConfirmDialog;import com.f1.suite.web.portal.impl.ConfirmDialogListener;import com.f1.suite.web.portal.impl.ConfirmDialogPortlet;import com.f1.suite.web.portal.impl.GridPortlet;import com.f1.suite.web.portal.impl.RootPortlet;import com.f1.suite.web.portal.impl.form.BasicFormPortletExportImportManager;import com.f1.suite.web.portal.impl.form.FormPortlet;import com.f1.suite.web.portal.impl.form.FormPortletButton;import com.f1.suite.web.portal.impl.form.FormPortletCheckboxField;import com.f1.suite.web.portal.impl.form.FormPortletContextMenuFactory;import com.f1.suite.web.portal.impl.form.FormPortletContextMenuListener;import com.f1.suite.web.portal.impl.form.FormPortletField;import com.f1.suite.web.portal.impl.form.FormPortletListener;import com.f1.suite.web.portal.impl.form.FormPortletNumericRangeField;import com.f1.suite.web.portal.impl.form.FormPortletSelectField;import com.f1.suite.web.portal.impl.form.FormPortletTextAreaField;import com.f1.suite.web.portal.impl.form.FormPortletTextField;import com.f1.suite.web.portal.impl.form.FormPortletTitleField;import com.f1.suite.web.portal.impl.form.FormPortletToggleButtonsField;import com.f1.suite.web.table.WebColumn;import com.f1.suite.web.table.fast.FastWebTable;import com.f1.utils.CH;import com.f1.utils.LH;import com.f1.utils.MH;import com.f1.utils.OH;import com.f1.utils.SH;import com.f1.utils.casters.Caster_Integer;public class AmiWebAddObjectColumnFormPortlet extends GridPortlet		implements FormPortletListener, FormPortletContextMenuFactory, FormPortletContextMenuListener, ColorPickerListener, ConfirmDialogListener {	static final private Logger log = LH.get();	private FormPortlet fm;	private FormPortletTextField titleField;	private FormPortletTextAreaField helpField;	private FormPortletTextField formulaField;	private FormPortletTextField sortField;	private FormPortletTextField colorFormulaField;	private FormPortletTextField backgroundFormulaField;	private FormPortletSelectField<Byte> formatField;	private AmiWebService service;	private FormPortletNumericRangeField decimalsField;	private FormPortletTextField tooltipField;	private FormPortletTextField styleField;	private FormPortletTextField headerStyleField;	private FormPortletSelectField<Integer> positionField;	private FormPortletTextField columnIdField;	private boolean isAggregate = false;	private FormPortletTitleField formulaTitle;	private AmiWebAbstractTablePortlet amiPortlet;	private AmiWebCustomColumn columnToCopy;	private boolean isCopy = false;	private FormPortletButton updateButton;	private FormPortletButton importerExporter;	private FormPortletTextField editIdField;	private FormPortletSelectField<Byte> editTypeField;	private FormPortletTextField editSelectOptionsField;	private FormPortletCheckboxField disableFutureDatesField;	private FormPortletTextField enableLastNDaysField;	private FormPortletToggleButtonsField<String> clickable;	private FormPortletToggleButtonsField<String> oneClickField;	private FormPortletCheckboxField fixedWidthField;	private boolean changed = false;	private FormPortletButton cancelButton;	public void init() {		if (columnToCopy != null) {			formatField.setValue(columnToCopy.getType().getValue());			formulaField.setValue(columnToCopy.getDisplayFormula().getFormula(false));			sortField.setValue(columnToCopy.getSortFormula().getFormula(false));			colorFormulaField.setValue(columnToCopy.getColorFormula().getFormula(false));			backgroundFormulaField.setValue(columnToCopy.getBackgroundColorFormula().getFormula(false));			styleField.setValue(columnToCopy.getStyleFormula().getFormula(false));			headerStyleField.setValue(columnToCopy.getHeaderStyle(false));			titleField.setValue(columnToCopy.getTitle(false));			String newColumnId = columnToCopy.getColumnId();			if (isCopy)				newColumnId = SH.getNextId(newColumnId, this.amiPortlet.getCustomDisplayColumnIds());			columnIdField.setValue(newColumnId);			helpField.setValue(columnToCopy.getDescription());			this.clickable.setValue(columnToCopy.getClickable(false));			this.oneClickField.setValue(columnToCopy.getOneClick());			this.fixedWidthField.setValue(columnToCopy.isFixedWidth());			this.updateButton = fm.addButton(new FormPortletButton(isCopy ? "Copy Column" : "Update Column"));			fm.removeField(this.positionField);			updateFormatFields(this.formatField);			this.decimalsField.setValue(columnToCopy.getPrecision().getValue() == AmiConsts.DEFAULT ? null : ((Double) (double) columnToCopy.getPrecision().getValue()));			this.tooltipField.setValue(columnToCopy.getTooltipFormula().getFormula(false));		} else {			this.updateButton = fm.addButton(new FormPortletButton("Add Column"));		}		this.importerExporter = this.fm.addButton(new FormPortletButton("Export/Import"));		this.cancelButton = this.fm.addButton(new FormPortletButton("Cancel"));	}	private boolean isAggregate(AmiWebAbstractTablePortlet p) {		return p instanceof AmiWebAggregateObjectTablePortlet;	}	public AmiWebAddObjectColumnFormPortlet(PortletConfig config, AmiWebAbstractTablePortlet portlet, int columnPosition, AmiWebCustomColumn col) {		super(config);		setTitle(col == null ? "Add Column" : "Edit Column");		this.amiPortlet = portlet;		this.service = (AmiWebService) getManager().getService(AmiWebService.ID);		RootPortlet root = (RootPortlet) this.service.getPortletManager().getRoot();		int width = MH.min(AmiWebDesktopPortlet.MAX_WIDTH, (int) (root.getWidth() * 0.4));		int height = MH.min(AmiWebDesktopPortlet.MAX_HEIGHT, (int) (root.getHeight() * 0.8));		fm = new FormPortlet(generateConfig());		this.formulaTitle = fm.addField(new FormPortletTitleField("Cell Contents"));		formulaField = fm.addField(new FormPortletTextField("Display:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true).setName(AmiWebCustomColumn.KEY_DISPLAY);		formulaField.setCssStyle("_fm=courier");		sortField = fm.addField(new FormPortletTextField("Sorting:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true).setName(AmiWebCustomColumn.KEY_SORTING);		sortField.setCssStyle("_fm=courier");		fm.getFormPortletStyle().setLabelsWidth(125);		fm.setMenuFactory(this);		fm.addMenuListener(this);		formatField = fm.addField(new FormPortletSelectField<Byte>(Byte.class, "Format:")).setName(AmiWebCustomColumn.KEY_FORMAT);		for (Entry<Byte, String> e : AmiWebUtils.CUSTOM_COL_DESCRIPTIONS.entrySet())			formatField.addOption(e.getKey(), e.getValue());		this.decimalsField = new FormPortletNumericRangeField("Decimal Override:").setRange(0, 8).setValue(0).setDecimals(0).setNullable(true);		this.tooltipField = fm.addField(new FormPortletTextField("Tooltip:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true)				.setName(AmiWebCustomColumn.KEY_DISPLAY);		this.tooltipField.setCssStyle("_fm=courier");		fm.addField(new FormPortletTitleField("Column Header"));		titleField = fm.addField(new FormPortletTextField("Title:")).setWidth(300).setName(AmiWebCustomColumn.KEY_TITLE);		columnIdField = fm.addField(new FormPortletTextField("Column Id:")).setWidth(300);		headerStyleField = fm.addField(new FormPortletTextField("Header Style:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true)				.setName(AmiWebCustomColumn.KEY_HEADER_SYTLE);		helpField = fm.addField(new FormPortletTextAreaField("Description:")).setName(AmiWebCustomColumn.KEY_DESCRIPTION);		helpField.setHeight(45);		helpField.setCssStyle("_fm=arial");		positionField = fm.addField(new FormPortletSelectField<Integer>(Integer.class, "Column Position:")).setName(AmiWebCustomColumn.KEY_POSITION);		if (amiPortlet instanceof AmiWebAbstractTablePortlet) {			FastWebTable table = ((AmiWebAbstractTablePortlet) amiPortlet).getTable();			int cnt = table.getVisibleColumnsCount();			positionField.addOption(0, "1) Left Most");			for (int i = 1; i < cnt; i++) {				positionField.addOption(i, (i + 1) + ") Between '" + table.getVisibleColumn(i - 1).getColumnName() + "' and '" + table.getVisibleColumn(i).getColumnName() + "'");			}			if (cnt != 0)				positionField.addOption(cnt, (cnt + 1) + ") Right Most");			positionField.addOption(-1, "<Hidden Column>");			positionField.setValue(columnPosition);		} else			fm.removeField(positionField);		fm.addField(new FormPortletTitleField("Formatting (optional)"));		styleField = fm.addField(new FormPortletTextField("Style:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true).setName(AmiWebCustomColumn.KEY_STYLE);		colorFormulaField = fm.addField(new FormPortletTextField("Foreground Color:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true)				.setName(AmiWebCustomColumn.KEY_FG_CL);		backgroundFormulaField = fm.addField(new FormPortletTextField("Background Color:")).setWidth(FormPortletTextField.WIDTH_STRETCH).setHasButton(true)				.setName(AmiWebCustomColumn.KEY_BG_CL);		boolean isEdit = portlet.getEditMode() != AmiWebAbstractTablePortlet.EDIT_OFF;		this.editTypeField = new FormPortletSelectField<Byte>(Byte.class, "Edit:");		this.editTypeField.setWidth(300);		this.editIdField = new FormPortletTextField("Edit Id:");		this.editTypeField.setWidth(300);		editTypeField.addOption(AmiWebCustomColumn.EDIT_DISABLED, "Disabled (Don't include in message to backend)");		editTypeField.addOption(AmiWebCustomColumn.EDIT_READONLY, "Readonly (Include in message to backend)");		editTypeField.addOption(AmiWebCustomColumn.EDIT_TEXTFIELD, "Text Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_NUMERIC, "Numeric Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_SELECT, "Select Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_COMBOBOX, "ComboBox Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_DATE_FIELD, "Date Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_DATERANGE_FIELD, "DateRange Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_CHECKBOX, "Checkbox Field");		editTypeField.addOption(AmiWebCustomColumn.EDIT_MASKED, "Masked Field");		this.editSelectOptionsField = new FormPortletTextField("Options:<BR>(comma delimited)").setHasButton(true).setWidth(FormPortletTextField.WIDTH_STRETCH);		this.disableFutureDatesField = new FormPortletCheckboxField("Disable Future Days: ", false);		this.enableLastNDaysField = new FormPortletTextField("Enable Last N Days: ");		this.fixedWidthField = fm.addField(new FormPortletCheckboxField("Fix Width:", false));		if (col != null) {			this.editIdField.setValue(col.getEditId(false));			this.editSelectOptionsField.setValue(SH.noNull(col.getEditOptionFormula()));			this.editTypeField.setValue(col.getEditType(false));			this.disableFutureDatesField.setValue(col.getDisableFutureDays());			this.enableLastNDaysField.setValue(SH.toString(col.getEnableLastNDays()));			fixedWidthField.setValue(col.isFixedWidth());		} else			this.editTypeField.setValue(AmiWebCustomColumn.EDIT_DISABLED);		if (isEdit) {			fm.addField(new FormPortletTitleField("Cell Editing"));			fm.addField(this.editTypeField);		}		this.clickable = fm.addField(new FormPortletToggleButtonsField<String>(String.class, "Clickable:"));		this.clickable.addOption(null, "Off");		this.clickable.addOption("m", "On");		this.oneClickField = fm.addField(new FormPortletToggleButtonsField<String>(String.class, "One Click:"));		this.oneClickField.addOption(null, "Off");		this.oneClickField.addOption("m", "On");		fm.addFormPortletListener(this);		addChild(fm, 0, 0);		setSuggestedSize(width, height);		this.columnToCopy = col;		if (isEdit)			this.updateFormatFields(this.editTypeField);		init();	}	@Override	public void onButtonPressed(FormPortlet portlet, FormPortletButton button) {		if (button == this.updateButton) {			onUpdate(true);		} else if (button == this.importerExporter) {			getManager().showDialog("Export/Import",					new FormExportPortlet(this.fm, new BasicFormPortletExportImportManager((Map) CH.m(AmiWebCustomColumn.KEY_POSITION, null)), false));		} else if (button == this.cancelButton) {			close();		}	}	private boolean isEditTypeAllowedForNumericFormat(Byte editType) {		switch (editType) {			case AmiWebCustomColumn.EDIT_NUMERIC:			case AmiWebCustomColumn.EDIT_READONLY:			case AmiWebCustomColumn.EDIT_TEXTFIELD:				return true;			default:				return false;		}	}	public boolean onUpdate(boolean warnOnInvalidFormulas) {		if (this.columnToCopy != null && this.columnToCopy.isTransient() == true) {			getManager().showAlert("Can not edit transient columns through wizard");			return false;		}		this.changed = false;		String title = titleField.getValue();		String help = helpField.getValue();		Integer precision = this.decimalsField.getIntValue();		byte type = this.formatField.getValue();		String headerStyle = this.headerStyleField.getValue();		String colorFormula = this.colorFormulaField.getValue();		String backgroundColorFormula = this.backgroundFormulaField.getValue();		String styleFormula = this.styleField.getValue();		String formula = formulaField.getValue();		String sort = sortField.getValue();		String tooltip = this.tooltipField.getValue();		String editOptionsFormula = this.editSelectOptionsField.getValue();		boolean disableFutureDays = this.disableFutureDatesField.getBooleanValue();		int enableLastNDays;		try {			String value = this.enableLastNDaysField.getValue();			if (SH.isnt(value))				enableLastNDays = 0;			else				enableLastNDays = SH.parseInt(value);		} catch (Exception e) {			getManager().showAlert("Enable Last N Days is invalid (must be blank or integer)");			return false;		}		String oneClick = this.oneClickField.getValue();		boolean isFixedWidth = this.fixedWidthField.getValue();		int location = this.positionField.getValue();		StringBuilder errorSink = new StringBuilder();		if (SH.isnt(formula)) {			getManager().showAlert(formulaTitle.getValue() + " required");			return false;		}		String editId = SH.trim(this.editIdField.getValue());		byte editType = this.editTypeField.getValue();		if (editType != AmiWebCustomColumn.EDIT_DISABLED && !AmiUtils.isValidVariableName(editId, false, false)) {			getManager().showAlert("Edit Id is not a valid variable name: " + editId);			return false;		}		if (editType == AmiWebCustomColumn.EDIT_SELECT && (editOptionsFormula == null)) {			getManager().showAlert("Select Options must not be empty");			return false;		}		if (editType == AmiWebCustomColumn.EDIT_COMBOBOX && (editOptionsFormula == null)) {			getManager().showAlert("Select Options must not be empty");			return false;		}		// below check seems unnecessary, value is always not null		//		if ((editType == AmiWebCustomColumn.EDIT_DATERANGE_FIELD || editType == AmiWebCustomColumn.EDIT_DATE_FIELD) && disableFutureDays == null) {		//			getManager().showAlert("Disable Future Date must not be empty");		//			return false;		//		}		if (editType != AmiWebCustomColumn.EDIT_DISABLED) {			// masked type			if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_MASKED && this.formatField.getValue() != AmiWebUtils.CUSTOM_COL_TYPE_MASKED) {				getManager().showAlert("Format must be Masked for the selected edit type");				return false;			} else if (this.formatField.getValue() == AmiWebUtils.CUSTOM_COL_TYPE_MASKED && this.editTypeField.getValue() != AmiWebCustomColumn.EDIT_MASKED) {				getManager().showAlert("Edit type must be Masked Field for the selected format");				return false;			}			// checkbox			if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_CHECKBOX && this.formatField.getValue() != AmiWebUtils.CUSTOM_COL_TYPE_CHECKBOX) {				getManager().showAlert("Format must be Checkbox for the selected edit type");				return false;			} else if (this.formatField.getValue() == AmiWebUtils.CUSTOM_COL_TYPE_CHECKBOX && this.editTypeField.getValue() != AmiWebCustomColumn.EDIT_CHECKBOX) {				getManager().showAlert("Edit type must be Checkbox Field for the selected format");				return false;			}			// Numeric type			if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_NUMERIC && this.formatField.getValue() != AmiWebUtils.CUSTOM_COL_TYPE_NUMERIC) {				getManager().showAlert("Format must be Numeric for the selected edit type");				return false;			} else if (this.formatField.getValue() == AmiWebUtils.CUSTOM_COL_TYPE_NUMERIC && !isEditTypeAllowedForNumericFormat(this.editTypeField.getValue())) {				getManager().showAlert("Edit type must be Numeric or Text Field for the selected format");				return false;			}		}		try {			if ((editType == AmiWebCustomColumn.EDIT_DATERANGE_FIELD || editType == AmiWebCustomColumn.EDIT_DATE_FIELD) && SH.is(enableLastNDays)					&& Caster_Integer.PRIMITIVE.cast(enableLastNDays) < 0) {				getManager().showAlert("Enable Last N Days cannot be a negative number");				return false;			}		} catch (Exception e) {			getManager().showAlert("Enable Last N Days must be of type number");			return false;		}		if (SH.isnt(title)) {			if (formula.length() == 1) {				title = this.amiPortlet.getColumnTitleFor(formula);				if (OH.eq(title, formula))//didn't change...					title = SH.ddd(SH.replaceAll(formula, '`', ""), 40);			} else				title = SH.ddd(SH.replaceAll(formula, '`', ""), 40);		}		String columnId = SH.trim(this.columnIdField.getValue());		if (SH.is(columnId)) {			if (amiPortlet.getCustomDisplayColumnIds().contains(columnId)) {				if (isCopy || columnToCopy == null || OH.ne(columnId, columnToCopy.getColumnId())) {					getManager().showAlert("Column Id already exists: " + columnId);					return false;				}			}		} else if (columnToCopy != null) {			getManager().showAlert("Column id required");			return false;		} else {			columnId = SH.getNextId(AmiWebUtils.toPrettyVarName(title, "col_"), amiPortlet.getCustomDisplayColumnIds());		}		boolean isPortletAggregate = isAggregate(this.amiPortlet);		//Create columnConfig map		HashMap<String, Object> columnConfig = new HashMap<String, Object>();		//		columnConfig.put(AmiWebCustomColumn.CONFIG_ID, columnId);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_TITLE, title);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_TYPE, type);		int prc = precision == null ? AmiConsts.DEFAULT : precision;		//		columnConfig.put(AmiWebCustomColumn.CONFIG_PRECISION, prc);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_FORMULA, formula);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_COLOR_FORMULA, colorFormula);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_BACKGROUND_FORMULA, backgroundColorFormula);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_STYLE_FORMULA, styleFormula);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_CLICKABLE, this.clickable.getValue());		//		columnConfig.put(AmiWebCustomColumn.CONFIG_HEADER_STYLE, headerStyle);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_SORT, sort);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_EDIT_ID, editId);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_EDIT_TYPE, editType);		columnConfig.put(AmiWebCustomColumn.CONFIG_DESCRIPTION, help);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_EDIT_OPTIONS_FORMULA, editOptionsFormula);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_DISABLE_FUTURE_DATES, disableFutureDays);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_ENABLE_LAST_N_DAYS, enableLastNDays);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_ONECLICK, oneClick);		//		columnConfig.put(AmiWebCustomColumn.CONFIG_TOOLTIP, tooltip);		List<String> editOptions = this.columnToCopy == null ? null : this.columnToCopy.getEditSelectOptions();		if (this.columnToCopy != null)			columnConfig.put(AmiWebCustomColumn.CONFIG_EDIT_OPTIONS, editOptions);		AmiWebCustomColumn column = null;		AmiWebCustomColumn columnToEdit = isCopy ? null : columnToCopy;		boolean added = false;		//Call Table addCustomColumn		try {			com.f1.base.CalcTypes varTypes = AmiWebUtils.getAvailableVariables(amiPortlet.getService(), amiPortlet);			column = new AmiWebCustomColumn(this.amiPortlet, columnId, title, type, prc, formula, colorFormula, backgroundColorFormula, styleFormula, headerStyle, sort, editId,					editType, editOptions, editOptionsFormula, clickable.getValue(), oneClick, isAggregate, tooltip, help, disableFutureDays, enableLastNDays, isFixedWidth);			if (warnOnInvalidFormulas) {				StringBuilder message = new StringBuilder();				for (String id : column.getFormulas().getFormulaIds()) {					AmiWebFormula f = column.getFormulas().getFormula(id);					Exception formulaError = f.getFormulaError(false);					if (formulaError != null)						message.append("Field '").append(f.getFormulaId()).append("' has an error: ").append(formulaError.getMessage()).append("<br>");				}				if (message.length() > 0) {					message.append("Do you wish to continue?");					getManager().showDialog("Warning",							new ConfirmDialogPortlet(generateConfig(), message.toString(), ConfirmDialogPortlet.TYPE_OK_CANCEL, this).setCallback("FORMULA_ERROR"));					return false;				}			}			if (isPortletAggregate && !isAggregate)				added = ((AmiWebAggregateObjectTablePortlet) this.amiPortlet).addCustomColumnGroupBy(column, errorSink, location, columnToEdit, varTypes, true);			else				added = this.amiPortlet.addCustomColumn(column, errorSink, location, columnToEdit, varTypes, true);			//public AmiWebCustomColumn addCustomColumn(AmiWebCustomColumn col, StringBuilder errorSink, int columnLocation, AmiWebCustomColumn replacing, com.f1.base.Types varTypes,		} catch (Exception e) {			LH.info(log, "error parsing", e);			if (errorSink.length() == 0)				errorSink.append(e.getMessage());			getManager().showAlert(errorSink.toString(), e);			return false;		}		if (!added) {			getManager().showAlert(errorSink.toString());			return false;		} else if (getParent() instanceof RootPortlet)			close();		this.amiPortlet.getTable().fireOnColumnsArranged();		columnToCopy = column;		WebColumn col = this.amiPortlet.getTable().getVisibleColumn(this.positionField.getValue());		if (col != null)			this.amiPortlet.getTablePortlet().autoSizeColumn(col);		return true;	}	@Override	public void onFieldValueChanged(FormPortlet portlet, FormPortletField<?> field, Map<String, String> attributes) {		updateFormatFields(field);		if (!changed)			this.changed = true;	}	private void updateFormatFields(FormPortletField<?> field) {		if (field == this.formatField) {			fm.removeFieldNoThrow(this.decimalsField);			switch (formatField.getValue()) {				case AmiWebUtils.CUSTOM_COL_TYPE_NUMERIC:					fm.addFieldAfter(this.formatField, this.decimalsField);					break;				case AmiWebUtils.CUSTOM_COL_TYPE_PRICE:					fm.addFieldAfter(this.formatField, this.decimalsField);					if (field == this.formatField) {						if (isZero(this.decimalsField.getValue()))							this.decimalsField.setValue(2);					}					break;				case AmiWebUtils.CUSTOM_COL_TYPE_PERCENT:					fm.addFieldAfter(this.formatField, this.decimalsField);					if (field == this.formatField) {						if (isZero(this.decimalsField.getValue()))							this.decimalsField.setValue(2);					}					break;				case AmiWebUtils.CUSTOM_COL_TYPE_PROGRESS:					fm.addFieldAfter(this.formatField, this.decimalsField);					if (field == this.formatField) {						if (isZero(this.decimalsField.getValue()))							this.decimalsField.setValue(2);						if (SH.isnt(this.backgroundFormulaField.getValue()))							this.backgroundFormulaField.setValue("\"#77EE77\"");					}					break;				case AmiWebUtils.CUSTOM_COL_TYPE_TEXT:				case AmiWebUtils.CUSTOM_COL_TYPE_DATE:				case AmiWebUtils.CUSTOM_COL_TYPE_TIME_SEC:				case AmiWebUtils.CUSTOM_COL_TYPE_TIME_MILLIS:				case AmiWebUtils.CUSTOM_COL_TYPE_TIME_MICROS:				case AmiWebUtils.CUSTOM_COL_TYPE_TIME_NANOS:				case AmiWebUtils.CUSTOM_COL_TYPE_DATE_TIME_SEC:				case AmiWebUtils.CUSTOM_COL_TYPE_DATE_TIME_MILLIS:				case AmiWebUtils.CUSTOM_COL_TYPE_DATE_TIME_MICROS:				case AmiWebUtils.CUSTOM_COL_TYPE_DATE_TIME_NANOS:					break;			}		} else if (field == this.editTypeField) {			this.fm.removeFieldNoThrow(this.editSelectOptionsField);			this.fm.removeFieldNoThrow(this.editIdField);			this.fm.removeFieldNoThrow(this.disableFutureDatesField);			this.fm.removeFieldNoThrow(this.enableLastNDaysField);			if (this.editTypeField.getValue() != AmiWebCustomColumn.EDIT_DISABLED) {				this.fm.addFieldAfter(this.editTypeField, this.editIdField);				if (SH.isnt(this.editIdField.getValue()) && SH.is(this.formulaField.getValue()))					this.editIdField.setValue(AmiWebUtils.toValidVarname(this.formulaField.getValue()));			}			if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_SELECT) {				this.fm.addFieldAfter(this.editTypeField, this.editSelectOptionsField);			} else if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_COMBOBOX) {				this.fm.addFieldAfter(this.editTypeField, this.editSelectOptionsField);			} else if (this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_DATERANGE_FIELD || this.editTypeField.getValue() == AmiWebCustomColumn.EDIT_DATE_FIELD) {				// TODO we need to add the same options for right calendar for date range field				this.fm.addFieldAfter(this.editTypeField, this.disableFutureDatesField);				this.fm.addFieldAfter(this.disableFutureDatesField, this.enableLastNDaysField);			}		}	}	private static boolean isZero(Double value) {		return value != null && value == 0d;	}	@Override	public void onSpecialKeyPressed(FormPortlet formPortlet, FormPortletField<?> field, int keycode, int mask, int cursorPosition) {		if (keycode == SH.CHAR_CR && field != this.helpField)			onButtonPressed(formPortlet, updateButton);	}	@Override	public WebMenu createMenu(FormPortlet formPortlet, FormPortletField<?> field, int cursorPosition) {		BasicWebMenu r = new BasicWebMenu();		if (field == this.formulaField || field == this.sortField || field == this.backgroundFormulaField || field == this.colorFormulaField || field == this.styleField				|| field == this.editSelectOptionsField || field == this.tooltipField) {			if (field == this.formulaField || field == this.sortField || isAggregate() || !isAggregate(this.amiPortlet) || field == this.tooltipField) {				if (isAggregate) {					WebMenu variables = new BasicWebMenu("Grouping Variables", true);					for (String c : ((AmiWebAggregateObjectTablePortlet) this.amiPortlet).getGroupByColumnIds()) {						String title = this.amiPortlet.getCustomDisplayColumn(c).getTitle(true);						variables.add(new BasicWebMenuLink(title, true, "var_" + title).setAutoclose(false).setCssStyle("_fm=courier"));					}					AmiWebMenuUtils.createVariablesMenu(r, true, this.amiPortlet);					variables.sort();					r.add(new BasicWebMenuDivider());					r.add(variables);					AmiWebMenuUtils.createOperatorsMenu(r, service, this.amiPortlet.getAmiLayoutFullAlias());					r.add(new BasicWebMenuDivider());				} else {					AmiWebMenuUtils.createVariablesMenu(r, false, this.amiPortlet);				}				if (field == this.formulaField) {					r.add(AmiWebMenuUtils.createIconsMenu(true));				}			}			if (field == this.backgroundFormulaField || field == this.colorFormulaField) {				r.add(0, AmiWebMenuUtils.createColorsMenu(this.amiPortlet.getStylePeer()));			}		}		if (field == this.styleField || field == this.headerStyleField) {			AmiWebMenuUtils.createFormatsMenu(r, AmiWebUtils.getService(this.getManager()));			if (field == this.headerStyleField)				r.add(0, AmiWebMenuUtils.createColorsMenu(this.amiPortlet.getStylePeer()));		}		return r;	}	private boolean isAggregate() {		return isAggregate;	}	@Override	public void onContextMenu(FormPortlet portlet, String action, FormPortletField field) {		AmiWebMenuUtils.processContextMenuAction(service, action, field);	}	public void setIsAggregate(boolean isAggregate) {		this.isAggregate = isAggregate;		if (isAggregate(amiPortlet)) {			if (!isAggregate) {				formulaTitle.setValue("Group by");				styleField.setValue("\"bold\"");			}		}	}	public void setCopyColumn(boolean b) {		this.isCopy = true;		if (isCopy)			titleField.setValue("Copy Of " + columnToCopy.getTitle(false));		this.updateButton.setName(isCopy ? "Copy Column" : "Update Column");		this.columnIdField.setValue(SH.getNextId(columnToCopy.getColumnId(), this.amiPortlet.getCustomDisplayColumnIds(), 2));	}	@Override	public void onColorChanged(ColorPickerPortlet target, String oldColor, String nuwColor) {	}	@Override	public void onOkayPressed(ColorPickerPortlet target) {		target.close();	}	@Override	public void onCancelPressed(ColorPickerPortlet target) {		target.close();	}	public FormPortlet getForm() {		return fm;	}	@Override	public boolean onUserKeyEvent(KeyEvent keyEvent) {		return true;	}	@Override	public boolean onButton(ConfirmDialog source, String id) {		if ("FORMULA_ERROR".equals(source.getCallback())) {			if (ConfirmDialogPortlet.ID_YES.contentEquals(id))				onUpdate(false);			return true;		}		return false;	}	public boolean isChanged() {		return changed;	}}